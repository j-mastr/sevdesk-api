openapi: 3.0.0
info:
  title: sevdesk API
  description: "<b>Contact:</b> To contact our support click  <a href='https://landing.sevdesk.de/service-support-center-technik'>here</a><br><br> \r\n# General information\r\nWelcome to our API!<br>\r\nsevdesk offers you  the possibility of retrieving data using an interface, namely the sevdesk API, and making  changes without having to use the web UI. The sevdesk interface is a REST-Full API. All sevdesk  data and functions that are used in the web UI can also be controlled through the API.\r\n\n# Cross-Origin Resource Sharing\r\nThis API features Cross-Origin Resource Sharing (CORS).<br>\r\nIt enables cross-domain communication from the browser.<br>\r\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\r\n\r\n# Embedding resources\r\nWhen retrieving resources by using this API, you might encounter nested resources in the resources you requested.<br>\r\nFor example, an invoice always contains a contact, of which you can see the ID and the object name.<br>\r\nThis API gives you the possibility to embed these resources completely into the resources you originally requested.<br>\r\nTaking our invoice example, this would mean, that you would not only see the ID and object name of a contact, but rather the complete contact resource.\r\n\r\nTo embed resources, all you need to do is to add the query parameter 'embed' to your GET request.<br>\r\nAs values, you can provide the name of the nested resource.<br>\r\nMultiple nested resources are also possible by providing multiple names, separated by a comma.\r\n \n# Authentication and Authorization\n The sevdesk API uses a token authentication to authorize calls. For this purpose every sevdesk administrator has one API token, which is a <b>hexadecimal string</b>  containing <b>32 characters</b>. The following clip shows where you can find the  API token if this is your first time with our API.<br><br> <video src='openAPI/img/findingTheApiToken.mp4' controls width='640' height='360'> Ihr Browser kann dieses Video nicht wiedergeben.<br/> Dieses Video zeigt wie sie Ihr sevdesk API Token finden. </video> <br> The token will be needed in every request that you want to send and needs to be attached to the request url as a <b>Query Parameter</b><br> or provided as a value of an <b>Authorization Header</b>.<br> For security reasons, we suggest putting the API Token in the Authorization Header and not in the query string.<br> However, in the request examples in this documentation, we will keep it in the query string, as it is easier for you to copy them and try them yourself.<br> The following url is an example that shows where your token needs to be placed as a query parameter.<br> In this case, we used some random API token. <ul> <li><span>ht</span>tps://my.sevdesk.de/api/v1/Contact?token=<span style='color:red'>b7794de0085f5cd00560f160f290af38</span></li> </ul> The next example shows the token in the Authorization Header. <ul> <li>\"Authorization\" :<span style='color:red'>\"b7794de0085f5cd00560f160f290af38\"</span></li> </ul> The api tokens have an infinite lifetime and, in other words, exist as long as the sevdesk user exists.<br> For this reason, the user should <b>NEVER</b> be deleted.<br> If really necessary, it is advisable to save the api token as we will <b>NOT</b> be able to retrieve it afterwards!<br> It is also possible to generate a new API token, for example, if you want to prevent the usage of your sevdesk account by other people who got your current API token.<br> To achieve this, you just need to click on the \"generate new\" symbol to the right of your token and confirm it with your password. \n# API News\n To never miss API news and updates again, subscribe to our <b>free API newsletter</b> and get all relevant  information to keep your sevdesk software running smoothly. To subscribe, simply click <a href = 'https://landing.sevdesk.de/api-newsletter'><b>here</b></a> and confirm the email address to which we may send all updates relevant to you. \n# API Requests\n In our case, REST API requests need to be build by combining the following components. <table> <tr> <th><b>Component</b></th> <th><b>Description</b></th> </tr> <tr> <td>HTTP-Methods</td> <td> <ul> <li>GET (retrieve a resource)</li> <li>POST (create a resource)</li> <li>PUT (update a resource)</li> <li>DELETE (delete a resource)</li> </ul> </td> </tr> <tr> <td>URL of the API</td> <td><span style='color: #2aa198'>ht</span><span style='color: #2aa198'>tps://my.sevdesk.de/api/v1</span></td> </tr> <tr> <td>URI of the resource</td> <td>The resource to query.<br>For example contacts in sevdesk:<br><br> <span style='color:red'>/Contact</span><br><br> Which will result in the following complete URL:<br><br> <span style='color: #2aa198'>ht</span><span style='color: #2aa198'>tps://my.sevdesk.de/api/v1</span><span style='color:red'>/Contact</span> </td> </tr> <tr> <td>Query parameters</td> <td>Are attached by using the connectives <b>?</b> and <b>&</b> in the URL.<br></td> </tr> <tr> <td>Request headers</td> <td>Typical request headers are for example:<br> <div> <br> <ul> <li>Content-type</li> <li>Authorization</li> <li>Accept-Encoding</li> <li>User-Agent</li> <li>X-Version: Used for resource versioning see information below</li> <li>...</li> </ul> </div> </td> </tr> <tr>  <td>Response headers</td> <td> Typical response headers are for example:<br><br> <div> <ul>  <li>Deprecation: If a resource is deprecated we return true or a timestamp since when</li> <li>...</li> </ul> </div> </td> </tr> <tr> <td>Request body</td> <td>Mostly required in POST and PUT requests.<br> Often the request body contains json, in our case, it also accepts url-encoded data. </td> </tr> </table><br> <span style='color:red'>Note</span>: please pass a meaningful entry at the header \"User-Agent\".  If the \"User-Agent\" is set meaningfully, we can offer better support in case of queries from customers.<br> An example how such a \"User-Agent\" can look like: \"Integration-name by abc\". <br><br> This is a sample request for retrieving existing contacts in sevdesk using curl:<br><br> <img src='openAPI/img/GETRequest.PNG' alt='Get Request' height='150'><br><br> As you can see, the request contains all the components mentioned above.<br> It's HTTP method is GET, it has a correct endpoint  (<span style='color: #2aa198'>ht</span><span style='color: #2aa198'>tps://my.sevdesk.de/api/v1</span><span style='color:red'>/Contact</span>), query parameters like <b>token</b> and additional <b>header</b> information!<br><br> <b>Query Parameters</b><br><br> As you might have seen in the sample request above, there are several other parameters besides \"token\", located in the url.<br> Those are mostly optional but prove to be very useful for a lot of requests as they can limit, extend, sort or filter the data you will get as a response.<br><br> These are the most used query parameter for the sevdesk API. <table> <tr> <th><b>Parameter</b></th> <th><b>Description</b></th> </tr> <tr> <td>embed</td> <td>Will extend some of the returned data.<br> A brief example can be found below.</td> </tr> <tr> <td>countAll</td> <td>\"countAll=true\" returns the number of items</td> </tr> </table> This is an example for the usage of the embed parameter.<br> The following first request will return all company contact entries in sevdesk up to a limit of 100 without any additional information and no offset.<br><br> <img src='openAPI/img/ContactQueryWithoutEmbed.PNG' width='900' height='850'><br><br> Now have a look at the category attribute located in the response.<br> Naturally, it just contains the id and the object name of the object but no further information.<br> We will now use the parameter embed with the value \"category\".<br><br> <img src='openAPI/img/ContactQueryWithEmbed.PNG' width='900' height='850'><br><br> As you can see, the category object is now extended and shows all the attributes and their corresponding values.<br><br> There are lot of other query parameters that can be used to filter the returned data for objects that match a certain pattern, however, those will not be mentioned here and instead can be found at the detail documentation of the most used API endpoints like contact, invoice or voucher.<br><br>\n<b>Pagination</b><br> <table> <tr> <th><b>Parameter</b></th> <th><b>Description</b></th> </tr> <tr> <td>limit</td> <td>Limits the number of entries that are returned.<br> Most useful in GET requests which will most likely deliver big sets of data like country or currency lists.<br> In this case, you can bypass the default limitation on returned entries by providing a high number. </td> </tr> <tr> <td>offset</td> <td>Specifies a certain offset for the data that will be returned.<br> As an example, you can specify \"offset=2\" if you want all entries except for the first two.</td> </tr> </table> Example: <ul><li><code>ht<span>tps://my.sevdesk.de/api/v1/Invoice?offset=20&limit=10<span></code></li></ul> <b>Request Headers</b><br><br> The HTTP request (response) headers allow the client as well as the server to pass additional information with the request.<br> They transfer the parameters and arguments which are important for transmitting data over HTTP.<br> Three headers which are useful / necessary when using the sevdesk API are \"Authorization, \"Accept\" and  \"Content-type\".<br> Underneath is a brief description of why and how they should be used.<br><br> <b>Authorization</b><br><br> Can be used if you want to provide your API token in the header instead of having it in the url. <ul> <li>Authorization:<span style='color:red'>yourApiToken</span></li> </ul> <b>Accept</b><br><br> Specifies the format of the response.<br> Required for operations with a response body. <ul> <li>Accept:application/<span style='color:red'>format</span> </li> </ul> In our case, <code><span style='color:red'>format</span></code> could be replaced with <code>json</code> or <code>xml</code><br><br> <b>Content-type</b><br><br> Specifies which format is used in the request.<br> Is required for operations with a request body. <ul> <li>Content-type:application/<span style='color:red'>format</span></li> </ul> In our case,<code><span style='color:red'>format</span></code>could be replaced with <code>json</code> or <code>x-www-form-urlencoded</code> <br><br><b>API Responses</b><br><br> HTTP status codes<br> When calling the sevdesk API it is very likely that you will get a HTTP status code in the response.<br> Some API calls will also return JSON response bodies which will contain information about the resource.<br> Each status code which is returned will either be a <b>success</b> code or an <b>error</b> code.<br><br> Success codes <table> <tr> <th><b>Status code</b></th> <th><b>Description</b></th> </tr> <tr> <td><code>200 OK</code></td> <td>The request was successful</td> </tr> <tr> <td><code>201 Created</code></td> <td>Most likely to be found in the response of a <b>POST</b> request.<br> This code indicates that the desired resource was successfully created.</td> </tr> </table> <br>Error codes <table> <tr> <th><b>Status code</b></th> <th><b>Description</b></th> </tr> <tr> <td><code>400 Bad request</code></td> <td>The request you sent is most likely syntactically incorrect.<br> You should check if the parameters in the request body or the url are correct.</td> </tr> <tr> <td><code>401 Unauthorized</code></td> <td>The authentication failed.<br> Most likely caused by a missing or wrong API token.</td> </tr> <tr> <td><code>403 Forbidden</code></td> <td>You do not have the permission the access the resource which is requested.</td> </tr> <tr> <td><code>404 Not found</code></td> <td>The resource you specified does not exist.</td> </tr> <tr> <td><code>500 Internal server error</code></td> <td>An internal server error has occurred.<br> Normally this means that something went wrong on our side.<br> However, sometimes this error will appear if we missed to catch an error which is normally a 400 status code! </td> </tr> </table> <br><br> <b>Resource Versioning</b> <br><br> We use resource versioning to handle breaking changes for our endpoints, these are rarely used and will be communicated before we remove older versions.<br> To call a different version we use a specific header <code>X-Version</code> that should be filled with the desired version.<br> <ul>  <li>If you do not specify any version we assume <code>default</code></li> <li>If you specify a version that does not exist or was removed, you will get an error with information which versions are available</li> </ul> <table> <tr> <th>X-Version</th> <th>Description</th> </tr> <tr> <td><code>default</code></td> <td>Should always reference the oldest version.<br> If a specific resource is updated with a new version, <br> then the default version stays the same until the old version is deleted</td> </tr> <tr> <td><code>1.0</code> ... <code>1.9</code></td> <td>Our incrementally version for each resource independent<br> <b>Important</b>: A resource can be available via <code>default</code> but not <code>1.0</code></td> </tr> </table> \n# Your First Request\n After reading the introduction to our API, you should now be able to make your first call.<br> For testing our API, we would always recommend to create a trial account for sevdesk to prevent unwanted changes to your main account.<br> A trial account will be in the highest tariff (materials management), so every sevdesk function can be tested! \n\nTo start testing we would recommend one of the following tools: <ul> <li><a href='https://www.getpostman.com/'>Postman</a></li> <li><a href='https://curl.haxx.se/download.html'>cURL</a></li> </ul> This example will illustrate your first request, which is creating a new Contact in sevdesk.<br> <ol> <li>Download <a href='https://www.getpostman.com/'><b>Postman</b></a> for your desired system and start the application</li> <li>Enter <span><b>ht</span>tps://my.sevdesk.de/api/v1/Contact</b> as the url</li> <li>Use the connective <b>?</b> to append <b>token=</b> to the end of the url, or create an authorization header. Insert your API token as the value</li> <li>For this test, select <b>POST</b> as the HTTP method</li> <li>Go to <b>Headers</b> and enter the key-value pair <b>Content-type</b> + <b>application/x-www-form-urlencoded</b><br> As an alternative, you can just go to <b>Body</b> and select <b>x-www-form-urlencoded</b></li> <li>Now go to <b>Body</b> (if you are not there yet) and enter the key-value pairs as shown in the following picture<br><br> <img src='openAPI/img/FirstRequestPostman.PNG' width='900'><br><br></li> <li>Click on <b>Send</b>. Your response should now look like this:<br><br> <img src='openAPI/img/FirstRequestResponse.PNG' width='900'></li> </ol> As you can see, a successful response in this case returns a JSON-formatted response body containing the contact you just created.<br> For keeping it simple, this was only a minimal example of creating a contact.<br> There are however numerous combinations of parameters that you can provide which add information to your contact. \n# sevdesk-Update 2.0\n Started in 2024 we introduced a new era of bookkeeping in sevdesk. You can check if you already received the update by clicking on your profile in the top right in the sevdesk WebApp or by using the [Tools/bookkeepingSystemVersion endpoint](#tag/Basics/operation/bookkeepingSystemVersion).<br> The old version will be available for some customers until the end of 2024. In this short list we have outlined the changed endpoints with links to jump to the descriptions. If you received the [api newsletter](https://landing.sevdesk.de/api-newsletter) you already know what changed. Otherwise you can check the api changes [here](https://tech.sevdesk.com/api_news/posts/2024_04_04-system-update-breaking-changes/). \n## Check your bookkeeping system version\n With this endpoint you can check which version you / your client uses. On that basis you must use the old or new versions of the endpoints. [Tools/bookkeepingSystemVersion Endpoint](#tag/Basics/operation/bookkeepingSystemVersion) \n## Tax Rules\n <I><b>(affects the properties taxType and taxSet)</b></I><br> With sevdesk-Update 2.0 we changed the available tax rules. Due to a low level of usage, we won't support the following tax type with the sevdesk-Update 2.0 anymore:\n `taxType = noteu`\n Due to a high likeliness of non-compliant accounting, we won't support the following tax type with the sevdesk-Update 2.0 anymore:\n `taxType = custom (this includes 'taxSet': ... )`\n If you only use <code>taxType = default</code>, <code>taxType = eu</code> and / or <code>taxType = ss</code>, these tax types will automatically be mapped to the new tax rules for a transition period, but you have to make sure the taxRate used in positions is within the allowed ones (you may use the [ReceiptGuidance endpoint](#tag/Voucher/operation/forAllAccounts) for that), otherwise the API will return a validation error (HTTP status code 422). For [orders](#tag/Order), [invoices](#tag/Invoice), [vouchers](#tag/Voucher) and [credit notes](#tag/CreditNote) that were created within sevdesk-Update 2.0 the response will change in all endpoints in which these objects are returned.<br> So orders, invoices, vouchers and credit notes created within sevdesk system version 1.0 still have a taxType in the response. When they are created in sevdesk-Update 2.0 they will have a taxRule instead.<br> You can continue to use taxType at first, but we recommend switching to taxRule as there are new options available that were not previously supported.<br> For orders, invoices, vouchers and credit notes that were created within sevdesk-Update 2.0 the response will change in all endpoints in which these objects are returned. This documentation holds the most current version of the endpoints.<br> Here are lists of the currently available tax rules, sorted by their use case, structured into revenue/expense and 'Regelbesteuerer'/'Kleinunternehmer'. \n#### VAT rules for 'Regelbesteuerung' in sevdesk-Update 2.0 (Revenue)\n <table> <tr> <th>VAT Rule</th> <th>New Property</th> <th>Allowed taxRate in positions</th> <th>Old property (deprecated)</th> </tr> <tr> <td>Umsatzsteuerpflichtige Umsätze</td> <td><code>'taxRule': 1</code></td> <td> <ul> <li>0.0</li> <li>7.0</li> <li>19.0</li> </ul> </td> <td><code>'taxType': 'default'</code></td> </tr> <tr> <td>Ausfuhren</td> <td><code>'taxRule': 2</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td>-</td> </tr> <tr> <td>Innergemeinschaftliche Lieferungen</td> <td><code>'taxRule': 3</code></td> <td> <ul> <li>0.0</li> <li>7.0</li> <li>19.0</li> </ul> </td> <td><code>'taxType': 'eu'</code></td> </tr> <tr> <td>Steuerfreie Umsätze §4 UStG</td> <td><code>'taxRule': 4</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td>-</td> </tr> <tr> <td>Reverse Charge gem. §13b UStG</td> <td><code>'taxRule': 5</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td>-</td> </tr> </table> \n \n#### VAT rules for 'Regelbesteuerung' in sevdesk-Update 2.0 (Expense)\n <table> <tr> <th>VAT Rule</th> <th>New Property</th> <th>Allowed taxRate in positions</th> <th>Old property (deprecated)</th> </tr> <tr> <td>Innergemeinschaftliche Erwerbe</td> <td><code>'taxRule': 8</code></td> <td> <ul> <li>0.0</li> <li>7.0</li> <li>19.0</li> </ul> </td> <td>-</td> </tr> <tr> <td>Vorsteuerabziehbare Aufwendungen</td> <td><code>'taxRule': 9</code></td> <td> <ul> <li>0.0</li> <li>7.0</li> <li>19.0</li> </ul> </td> <td><code>'taxType': 'default'</code></td> </tr> <tr> <td>Nicht vorsteuerabziehbare Aufwendungen</td> <td><code>'taxRule': 10</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td>-</td> </tr> <tr> <td>Reverse Charge gem. §13b Abs. 2 UStG mit Vorsteuerabzug 0% (19%)</td> <td><code>'taxRule': 12</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td>-</td> </tr> <tr> <td>Reverse Charge gem. §13b UStG ohne Vorsteuerabzug 0% (19%)</td> <td><code>'taxRule': 13</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td>-</td> </tr> <tr> <td>Reverse Charge gem. §13b Abs. 1 EU Umsätze 0% (19%)</td> <td><code>'taxRule': 14</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td>-</td> </tr> </table> \n \n#### VAT rules for small business owner ('Kleinunternehmer') in sevdesk-Update 2.0 (Revenue)\n <table> <tr> <th>VAT Rule</th> <th>New Property</th> <th>Allowed taxRate in positions</th> <th>Old property (deprecated)</th> </tr> <tr> <td>Steuer nicht erhoben nach §19UStG</td> <td><code>'taxRule': 11</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td><code>'taxType': 'ss'</code></td> </tr> </table> \n \n#### VAT rules for small business owner ('Kleinunternehmer') in sevdesk-Update 2.0 (Expense)\n <table> <tr> <th>VAT Rule</th> <th>New Property</th> <th>Allowed taxRate in positions</th> <th>Old property (deprecated)</th> </tr> <tr> <td>Nicht vorsteuerabziehbare Aufwendungen</td> <td><code>'taxRule': 10</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td><code>'taxType': 'ss'</code></td> </tr> <tr> <td>Reverse Charge gem. §13b UStG ohne Vorsteuerabzug 0% (19%)</td> <td><code>'taxRule': 13</code></td> <td> <ul> <li>0.0</li> </ul> </td> <td>-</td> </tr> </table> \n \n## Booking Accounts\n <I><b>(affects the property accountingType)</b></I><br> With sevdesk-Update 2.0 we changed the available booking accounts and their combinatorics. If you use accountingTypes with SKR numbers that are still available in our receipt guidance, you do not have to change anything in your requests. These booking accounts will automatically be mapped to the new representation (Account Datev). But you have to make sure the taxRate used in positions and taxRule used in the voucher is within the allowed ones (check the [ReceiptGuidance](#tag/Voucher/operation/forAllAccounts)) of the provided booking account, otherwise the API will return a validation error (HTTP status code 422). For orders, invoices, vouchers and credit notes in that were created within sevdesk-Update 2.0 the response will change in all endpoints were these objects are returned. \n## Receipt Guidance\n To help you decide which account can be used in conjunction with which tax rules, tax rates and documents, we created several guidance endpoints just there for you to get helpful information. You can find the descriptions in the changes section for Vouchers below or jump directly to the endpoint description by using this link: [Receipt Guidance](#tag/Voucher/operation/forAllAccounts).<br> Receipt Guidance is planned to give you guidance in which account you can pick (depending on your filter criteria and the client settings (e.g. 'Kleinunternehmer')) and which tax rate and [tax rules](#section/sevdesk-Update-2.0/Tax-Rules) are comptaible with them.  \n## Vouchers\n \n### Saving a new voucher ([Voucher/Factory/saveVoucher](#tag/Voucher/operation/voucherFactorySaveVoucher))\n Following use cases do not work anymore or have changed: <ol> <li>Custom vat regulations (taxType = custom and provided taxSet)</li> <li>Only specific tax rates and booking accounts are available. Check [ReceiptGuidance](#tag/Voucher/operation/forAllAccounts)</li> <li>Custom accounting types do not work anymore</li> <li>Using an asset booking account without creating an asset is no longer possible</li> <li>A voucher can not be directly set to paid anymore, therefore only status <code>DRAFT (50)</code> or <code>UNPAID / DUE (100)</code> are possible when creating a new voucher. Use the [/api/v1/Voucher/{voucherId}/bookAmount endpoint](#tag/Voucher/operation/bookVoucher) to set a voucher to paid</li> <li>Setting or changing the property enshrined. Use our new endpoint [/api/v1/Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine) to enshrine a voucher</li> </ol> \n### Get or update an existing voucher ([Voucher/{voucherId}](#tag/Voucher/operation/updateVoucher))\n Following use cases do not work anymore or have changed: <ol> <li>Custom vat regulations (taxType = custom and provided taxSet)</li> <li>See [ReceiptGuidance](#tag/Voucher/operation/forAllAccounts) to check which tax rates are available in conjunction with which tax rules</li> </ol> \n### Book a voucher ([Voucher/{voucherId}](#tag/Voucher/operation/bookVoucher))\n Following use cases do not work anymore or have changed: <ol> <li>Voucher with negative voucher positions can not use 'cash discount' as a payment difference anymore</li> <li>A Voucher can only be booked when it was registered beforehand (see above)</li> <li>Based on the combination of voucher positions some payment difference reasons are not possible anymore</li> <li>The currency fluctuation (CF) type is no longer supported as a payment difference reason</li> </ol> \n## Banking\n Following use cases do not work anymore or have changed: <ol> <li>Setting or changing the property enshrined will now only be available by using the [appropriate enshrine endpoint](#tag/CheckAccountTransaction/operation/checkAccountTransactionEnshrine)</li> </ol> \n## Invoicing\n The changes to the vat rules also apply here. Check the documentation of voucher above as the changes are the same. \n### General stricter validation in PUT and POST endpoints\n We added stricter validation to ensure only correct invoices are created which than can be further processed in sevdesk. Following use cases do not work anymore or have changed: <ol> <li>Creating an invoice with taxType <code>noteu</code> does not work anymore</li> <li>Creating an invoice with taxType <code>custom</code> does not work anymore</li> <li>Processing an invoice beyond status <code>DRAFT (100)</code> without a contact does not work anymore</li> <li>Advanced invoices (<code>invoiceType: 'AR'</code>) and partial invoices (<code>invoiceType: 'TR'</code>) can only be created with the tax rule 'Umsatzsteuerpflichtige Umsätze (taxRule: 1)'(for Regelbesteuerer) or 'Steuer nicht erhoben nach §19 UStG (taxRule: 11)'(for Kleinunternehmer)</li> <li>Creating a dunning (<code>invoiceType: 'MA'</code>) with the value of property <code>reminderCharge</code> greater than 0 does not work anymore</li> <li>Creating an advanced invoice (<code>invoiceType: 'AR'</code>), a partial invoice (<code>invoiceType: 'TR'</code>) or a final invoice (<code>invoiceType: 'ER'</code>) with a currency deviating from the clients <code>defaultCurrency</code> is not possible anymore</li> <li>Changing the status manually does not work anymore (see 'Removed endpoint /Invoice/{invoiceId}/changeStatus' below)</li> <li>Enshrining now has to be done by using the [enshrine endpoint](#tag/Invoice/operation/invoiceEnshrine) (see below)</li> </ol> \n### Saving an invoice ([Invoice/Factory/saveInvoice](#tag/Invoice/operation/createInvoiceByFactory))\n Following use cases do not work anymore or have changed: <ol> <li>Invoices can only be created with the status <code>DRAFT (100)</code> and can not be changed manually. Use the matching endpoints (e.g. [sendViaEmail](#tag/Invoice/operation/sendInvoiceViaEMail)) to automatically change the status accordingly</li> <li>Setting or changing the property <code>enshrined</code> is now only possible by using the [enshrine endpoint](#tag/CheckAccountTransaction/operation/checkAccountTransactionEnshrine)</li> </ol> \n### Using an order to create an invoice ([Invoice/Factory/createInvoiceFromOrder](#tag/Invoice/operation/createInvoiceFromOrder))\n Following use cases do not work anymore or have changed: <ol> <li>Creating a final invoice (partialType: 'ER') is not possible if an advanced invoice (partialType: 'AR') or partial invoice (partialType: 'TR') exists. This functionality will be added in a later update</li> </ol> \n### Removed endpoint /Invoice/{invoiceId}/changeStatus\n This endpoint will be completely removed (including sevdesk system version 1.0!). Using these endpoints will automatically change the status accordingly: <ul> <li>[Invoice/{invoiceId}/sendViaEmail](#tag/Invoice/operation/sendInvoiceViaEMail)</li> <li>[Invoice/{invoiceId}/sendBy](#tag/Invoice/operation/invoiceSendBy)</li> <li>[Invoice/{invoiceId}/bookAmount](#tag/Invoice/operation/bookInvoice)</li> <li>[Invoice/{invoiceId}/resetToDraft](#tag/Invoice/operation/invoiceResetToDraft)</li> <li>[Invoice/{invoiceId}/resetToOpen](#tag/Invoice/operation/invoiceResetToOpen)</li> </ul> \n### New endpoint [Invoice/{invoiceId}/resetToDraft](#tag/Invoice/operation/invoiceResetToDraft)\n This new endpoint can be used to reset the status of an invoice to <code>DRAFT (100)</code>. \n### New endpoint [Invoice/{invoiceId}/resetToOpen](#tag/Invoice/operation/invoiceResetToOpen)\n This new endpoint can be used to reset the status of an invoice to <code>OPEN (200)</code>. \n### New endpoint [Invoice/{invoiceId}/enshrine]((#tag/Invoice/operation/invoiceEnshrine))\n The enshrine endpoint is now used to set the property <code>enshrined</code>. <b>This operation CAN NOT be undone due to legal reasons!</b> \n## Credit Notes\n The changes to the vat rules also apply here. Check the documentation of voucher above as the changes are the same. \n### General stricter validation in PUT and POST endpoints\n We added stricter validation to ensure only correct credit notes are created which than can be further processed in sevdesk. Due to the move from taxTypes/taxSets to taxRules you need to check the compatibility of the taxRules in combination with the tax rates. Following use cases do not work anymore or have changed: <ol> <li>Creating a credit note without a date of delivery (<code>deliveryDateUntil</code>) for an invoice that has a date of delivery (<code>deliveryDateUntil</code>) is no longer possible</li> <li>Creating a credit note with a date of delivery (<code>deliveryDateUntil</code>) for an invoice that has no date of delivery (<code>deliveryDateUntil</code>) is no longer possible</li> <li>Creating a credit note with a date of delivery (<code>deliveryDateUntil</code>) that is before the date of delivery (<code>deliveryDateUntil</code>) of the invoice is no longer possible</li> <li>Creating a credit note for an advanced invoice (<code>invoiceType: 'AR'</code>) or partial invoice (<code>invoiceType: 'TR'</code>) is no longer possible</li> <li>Creating a credit note for a voucher is no longer possible</li> <li>Creating a credit note with a <code>bookingCategory</code> other than <code>UNDERACHIEVEMENT</code> is no longer possible</li> <li>Currency fluctuation (CF) is no longer supported as a payment difference</li> </ol> \n### Saving a credit note ([CreditNote/Factory/saveCreditNote](#tag/CreditNote/operation/createcreditNote))\n Following use cases do not work anymore or have changed: <ol> <li>Credit notes can only be created with the status <code>DRAFT (100)</code> and can not be changed manually. Use the matching endpoints (e.g. [sendViaEmail](#tag/CreditNote/operation/sendCreditNoteViaEMail)) to automatically change the status accordingly</li> <li>Enshrining now has to be done by using the enshrine endpoint (see below)</li> </ol> \n### Removed endpoint /CreditNote/Factory/createFromVoucher\n The endpoint will be removed. It is not possible anymore to create credit notes for vouchers within sevdesk-Update 2.0. The endpoint continues to stay available for existing sevdesk system version 1.0 clients. \n### Removed endpoint /CreditNote/{creditNoteId}/changeStatus\n This endpoint will be completely removed (including sevdesk system version 1.0!). Using these endpoints will automatically change the status accordingly: <ul> <li>[CreditNote/{creditNoteId}/sendViaEmail](#tag/CreditNote/operation/sendCreditNoteViaEMail)</li> <li>[CreditNote/{creditNoteId}/sendBy](#tag/CreditNote/operation/creditNoteSendBy)</li> <li>[CreditNote/{creditNoteId}/bookAmount](#tag/CreditNote/operation/bookCreditNote)</li> <li>[CreditNote/{creditNoteId}/resetToDraft](#tag/CreditNote/operation/creditNoteResetToDraft)</li> <li>[CreditNote/{creditNoteId}/resetToOpen](#tag/CreditNote/operation/creditNoteResetToOpen)</li> </ul> \n### New endpoint CreditNote/{creditNoteId}/resetToDraft\n This new endpoint can be used to reset the status of a credit note to <code>DRAFT (100)</code>. You can find the documentation [here](#tag/CreditNote/operation/creditNoteResetToDraft). \n### New endpoint CreditNote/{creditNoteId}/resetToOpen\n This new endpoint can be used to reset the status of a credit note to <code>OPEN (200)</code>. You can find the documentation [here](#tag/CreditNote/operation/creditNoteResetToOpen). \n### New endpoint CreditNote/{creditNoteId}/enshrine\n [The enshrine endpoint](#tag/CreditNote/operation/creditNoteEnshrine) is now used to set the property <code>enshrined</code>. <b>This operation CAN NOT be undone due to legal reasons!</b>\n## Parts\n \n### General stricter validation in PUT and POST endpoints\n Following use cases do not work anymore or have changed: <ol> <li>Creating products with a tax rate other than 0.0, 7.0 and 19.0 is no longer possible</li> </ol> "
  version: 2.0.0
  x-logo:
    url: https://my.sevdesk.de/images/logo.svg
servers:
  - url: https://my.sevdesk.de/api/v1
    description: Our main application instance which most of our customers work with
  - url: http://sevdesk.local/api/v1
    description: sevdesk internal local instance
tags:
  - name: Basics
    description: >-
      This is a collection of basic sevdesk functions that don't really belong
      into any other category.
    x-displayName: Basics
  - name: CheckAccount
    description: >-
      A check account is a payment account on which payments to or from the
      customer are stored.<br> There are three general types of check accounts:
      <ul><li>Offline</li> <li>Online</li> <li>Register</li> </ul> Offline
      accounts are accounts on which transactions can be created and booked over
      the API or over CSV and MT940 imports.<br> The only exception is the
      standard account, on which transactions can not be created over the
      API.<br> Please also note, that accounts with CSV and MT940 imports will
      have online given as the value for their type attribute.<br> Nevertheless,
      they count as offline accounts.<br> Online accounts are directly connected
      to a bank application and can not be manipulated over the API.<br>
      Register accounts represent the cash register for sevdesk account holders
      needing one and they behave the same way as offline
      accounts.<br><br>Regarding the check accounts, you will most certainly
      only need to request existing check accounts for using their ID in further
      requests.<br> Therefore, you only need to send normal GET requests to the
      CheckAccount endpoint.<br>
    x-displayName: CheckAccount
  - name: CheckAccountTransaction
    description: >-
      A check account transaction is a payment on a check account from or to the
      customer.<br> They are essential for booking invoices, vouchers (receipts)
      and credit notes with them to mark them as paid.<br> For a correct
      bookkeeping, there is always one or multiple transactions linked to an
      invoice, a voucher or a credit note, until the relevant object is
      completely payed.
    x-displayName: CheckAccountTransaction
  - name: AccountingContact
    description: >-
      A accounting contact object belongs to one specific contact object and
      holds the accounting information for this contact, which is mainly the
      vendor / receivable accounts number.<br> This information is very
      important to guarantee valid bookkeeping reports.<br> As this endpoint is
      also pretty easy to understand, we won't cover it here, but we really
      recommend you having a look at the POST to create accounting contacts and
      at the request which checks if a number is still available.
    x-displayName: AccountingContact
  - name: CommunicationWay
    description: >-
      A communication way is a medium with which a contact can be reached out
      to.<br> This can be: <ul> <li>A phone number (landline or mobile)</li>
      <li>An email</li> <li>A website</li> </ul> They can not be a part of the
      contact attributes for the same reason as addresses.<br> Each
      communication way also is of one of the following types, called
      communication way keys, which are also their own resource: <ul>
      <li>Private (ID: 1)</li> <li>Work (ID: 2)</li> <li>Fax (ID: 3)</li>
      <li>Mobile (ID: 4)</li> <li>Empty (ID: 5)</li> <li>Autobox (ID: 6)</li>
      <li>Newsletter (ID: 7)</li> <li>Invoicing (ID: 8)</li> </ul>
    x-displayName: CommunicationWay
  - name: ContactAddress
    description: >-
      As one contact can have multiple addresses, they can not be part of the
      contact attributes.<br> Instead, they have their own endpoint which makes
      it possible to create as many addresses for one contact as needed.<br> For
      creating contact addresses have a look at our Swagger specification.
      Everything should be pretty straight forward.
    x-displayName: ContactAddress
  - name: Contact
    description: |-

      # Purpose of contacts in sevdesk
       Every time one of our sevdesk customers sells / buys an item or provides a service there is a end customer involved to which it is sold / from which it is bought or to which the service is provided.<br> These end-customers need to be tracked in sevdesk as our customers will need to link them to the invoices, orders, receipts and all other documents relevant for their bookkeeping which involve the end customer. 
      # Types of contacts
       As our customers can either deal with individual persons or with whole organisations, we need to differentiate between these two types.<br> Therefore, every contact in sevdesk is either a <b>person</b> or a <b>organisation</b>.<br> At the moment, both share the same set of attributes but designating values to some might not make sense for both types.<br> In the next section, we will distinguish between the two and this will become obvious.<br> Furthermore, naturally, individuals can be part of organisations but organisations can not be part of individuals. Also more in the next section.<br> <br> <b>How do I know to which type a contact belongs?</b><br> <br> It is very important to note, that we currently don't have any attribute which shows to which type a contact belongs.<br> Instead, we separate them by the attributes <b>name</b>, <b>surename</b> and <b>familyname</b>.<br> If you designate values to the attribute <b>surename</b> OR <b>familyname</b> the contact will be regarded as a individual person.<br> If you designate a value to <b>name</b> it will be regarded as an organisation.<br><br> <b>Contact Categories</b><br><br> Additionally to the two main types of contacts, every contact belongs to one of the following categories: <ul> <li>Supplier (ID: 2)</li> <li>Customer (ID: 3)</li> <li>Partner (ID: 4)</li> <li>Prospect Customer (ID: 28)</li> </ul> 
      # Attributes of a contact
       Here is a table of all attributes of a contact.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange. <table> <tr> <th>Attribute</th> <th>Contact Type</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td>Organisations</td> <td> The name of an organisation </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>surename</span></td> <td>Individuals</td> <td> The first name of an individual (yes, we know...) </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>familyname</span></td> <td>Individuals</td> <td> The last name of an individual </td> <td>String</td> </tr> <tr> <td>name2</td> <td>Individuals</td> <td> The middle name (or name-suffix) of an individual </td> <td>String</td> </tr> <tr> <td><span style='color:red'>category</span></td> <td>Organisations, Individuals</td> <td> The category of the contact<br> </td> <td>Nested object (Category)</td> </tr> <tr> <td>defaultCashbackTime</td> <td>Organisations, Individuals</td> <td> Time frame in which a cashback is granted to the customer if he pays an invoice </td> <td>Integer</td> </tr> <tr> <td>defaultCashbackPercent</td> <td>Organisations, Individuals</td> <td> Percentage of which the price of an invoice is reduced if paid in above time frame </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>taxNumber</span></td> <td>Organisations, Individuals</td> <td> Tax number of the contact. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>excemptVat</span></td> <td>Organisations, Individuals</td> <td> Defines if the contact is free of vat </td> <td>Boolean</td> </tr> <tr> <td>defaultTimeToPay</td> <td>Organisations, Individuals</td> <td> The default time this end customer has to pay invoices </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>bankNumber</span></td> <td>Organisations, Individuals</td> <td> The bank number of the contact </td> <td>Integer</td> </tr> <tr> <td>birthday</td> <td>Individuals</td> <td> The birthday </td> <td>Unix-Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>vatNumber</span></td> <td>Organisations, Individuals</td> <td> The vat number </td> <td>String</td> </tr> <tr> <td>defaultDiscountAmount</td> <td>Organisations, Individuals</td> <td> A default discount amount this contact gets </td> <td>Double</td> </tr> <tr> <td>defaultDiscountPercentage</td> <td>Organisations, Individuals</td> <td> Define if the value in defaultDiscountAmount is regarded as a percentage. </td> <td>Boolean</td> </tr> <tr> <td>gender</td> <td>Individuals</td> <td> Gender (m,w, or your own definition) </td> <td>String</td> </tr> <tr> <td>academicTitle</td> <td>Individuals</td> <td> Academic title of the contact </td> <td>String</td> </tr> <tr> <td>description</td> <td>Organisations, Individuals</td> <td> A description for the contact </td> <td>String (can contain some html)</td> </tr> <tr> <td>titel</td> <td>Individuals</td> <td> Position an individual holds in an organisation </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>parent</span></td> <td>Individuals</td> <td> The organisation to which this individual belongs </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>customerNumber</span></td> <td>Organisations, Individuals</td> <td> The customer number of the contact. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>bankAccount</span></td> <td>Organisations, Individuals</td> <td> The bank account number </td> <td>String</td> </tr> </table> 
      # The customer number
       The customer number is not an attribute that must be supplied when creating a contact, however for most, if not all of our customers, a correct enumeration is the key to structured bookkeeping, which is why duplicate entries must be avoided.<br> For this reason, most of the time a manual assignment of numbers is not the best idea and we are happy to provide you two contact endpoints which will help out.<br><br> The first GET request you can send will check if a customer number is still available.<br> All you need to provide in the query string is the customer number which should be checked. <ul> <li>ht<span>tps://my.sevdesk.de/api/v1/Contact/Mapper/checkCustomerNumberAvailability?customerNumber=KD-1000</span></li> </ul> The second GET request you can send will check what the next customer number should be, so that a correct enumeration is kept.<br> This time, you only need to send the request to the endpoint. <ul> <li>ht<span>tps://my.sevdesk.de/api/v1/Contact/Factory/getNextCustomerNumber</span></li> </ul> 
      # How to filter for certain contacts
       Often you don't want to retrieve all contacts in a sevdesk account or one specific contact of which you know the ID, but rather a list of contacts or a single contact with certain properties.<br> For this purpose we provide a bunch of filters that you can attach to your GET query string for nearly all endpoints.<br> Here are all filters applicable to a contact query. <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>depth=1</td> <td> Retrieve organisations AND persons.<br> This attribute is not active as default, so if you don't specify it as true, you will only get organisations. </td> </tr> <tr> <td>category[id]={<span style='color:red'>id</span>}&category[objectName]=Category</td> <td>Only retrieve all contacts with <span style='color:red'>id</span> as a category</td> </tr> <tr> <td>city={<span style='color:red'>cityName</span>}</td> <td>Only retrieve all contacts with <span style='color:red'>cityName</span> as a city</td> </tr> <tr> <td>tags[x][id]={<span style='color:red'>id</span>}&tags[x][objectName]=Tag</td> <td>Only retrieve all contacts with <span style='color:red'>id</span> as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>customerNumber={<span style='color:red'>number</span>}</td> <td>Only retrieve all contacts with <span style='color:red'>number</span> as a customer number</td> </tr> <tr> <td>parent[id]={<span style='color:red'>id</span>}&parent[objectName]=Contact</td> <td>Only retrieve all contacts with <span style='color:red'>id</span> as a parent organisation</td> </tr> <tr> <td>name={<span style='color:red'>name</span>}</td> <td>Only retrieve all contacts with <span style='color:red'>name</span> as a name, surename or familyname</td> </tr> <tr> <td>zip={<span style='color:red'>zipCode</span>}</td> <td>Only retrieve all contacts with <span style='color:red'>zipCode</span> as a zip</td> </tr> <tr> <td>country[id]={<span style='color:red'>id</span>}&country[objectName]=StaticCountry</td> <td>Only retrieve all contacts with <span style='color:red'>id</span> as a country</td> </tr> <tr> <td>createBefore={<span style='color:red'>timestamp</span>}</td> <td>Only retrieve all contacts created before <span style='color:red'>timestamp</span></td> </tr> <tr> <td>createAfter={<span style='color:red'>timestamp</span>}</td> <td>Only retrieve all contacts created after <span style='color:red'>timestamp</span></td> </tr> <tr> <td>updateBefore={<span style='color:red'>timestamp</span>}</td> <td>Only retrieve all contacts updated last before <span style='color:red'>timestamp</span></td> </tr> <tr> <td>updateAfter={<span style='color:red'>timestamp</span>}</td> <td>Only retrieve all contacts updated last after <span style='color:red'>timestamp</span></td> </tr> <tr> <td>orderByCustomerNumber={<span style='color:red'>ASC/DESC</span>}</td> <td>Order all contacts after customer number in <span style='color:red'>ASC/DESC</span> order</td> </tr> </table>
    x-displayName: Contact
  - name: ContactField
    description: >-
      The contact fields are placeholders that can be titled and filled per
      contact. The contact fields can then be used in invoices, credit notes and
      emails.
    x-displayName: ContactField
  - name: CreditNote
    description: |-

      # Purpose of credit notes in sevdesk
       A credit notes is essentially a special type of invoice which is not written by the service provider but rather by the beneficiary.<br> In common use, the term credit note is used when someone receives a payment for which he did not write an invoice.<br> In sevdesk you need to choose a booking category for the credit note you want to create.<br> This booking category describes why you need to create a credit note and can't be disregarded.<br> 
      # Credit note booking categories
       As mentioned above, every credit note needs to have a booking category.<br> The following categories are available at the moment. </p> <table> <tr> <th>Booking Category</th>  <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Provision</td> <td> <b>Not supported in sevdesk-Update 2.0.</b><br> The credit note is a provision. </td> <td><code>PROVISION</code></td> </tr> <tr> <td>Assigned royalty</td> <td> <b>Not supported in sevdesk-Update 2.0.</b><br> The credit note is a assigned royalty. </td> <td><code>ROYALTY_ASSIGNED</code></td> </tr> <tr> <td>Unassigned royalty</td> <td> <b>Not supported in sevdesk-Update 2.0.</b><br> The credit note is a unassigned royalty. </td> <td><code>ROYALTY_UNASSIGNED</code></td> </tr> <tr> <td>Underachievement of invoice</td> <td> The Credit Note is a underachievement of an invoice or voucher.<br> If this is the case, you need to provide the ID of this invoice or voucher in the attribute <code>refSrcInvoice</code> or <code>refSrcVoucher</code>! </td> <td><code>UNDERACHIEVEMENT</code></td> </tr> <tr> <td>To be booked on special account</td> <td> <b>Not supported in sevdesk-Update 2.0.</b><br> The Credit Note should be booked on a special account.<br> If this is the case, you need to provide the ID of this account in the attribute accountingType! </td> <td><code>ACCOUNTING_TYPE</code></td> </tr> </table>

      # Status of credit notes
       <table> <tr> <th>Credit note status</th> <th>Meaning</th> <th>Status code</th> </tr> <tr> <td>Draft</td> <td> The credit note is still a draft.<br> It has not been sent to the end-customer and can still be changed. </td> <td> 100 </td> </tr> <tr> <td>Open / Delivered</td> <td> The credit note has been sent to the end-customer.<br> </td> <td> 200 </td> </tr> <tr> <td>Partially paid</td> <td> The credit note has been partially paid.<br> </td> <td> 1000 </td> </tr> <tr> <td>Paid</td> <td> The credit note has been paid.<br> </td> <td> 1000 </td> </tr> </table> It is again important to keep in mind the status codes for all status of credit notes or at least the one you will need.

      # Attributes of a credit note
       Here is the table of all attributes of credit notes.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> There is also a distinction between credit note types. <table> <tr> <th>Attribute</th> <th>Credit Note Type</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td> <td>Any</td> <td> <b>Use this in sevdesk-Update 1.0 (instead of taxRule).</b><br> Defines the vat-regulation.<br> Can be: <ul> <li><code>default</code></li> <li><code>eu</code></li> <li><code>noteu</code></li> <li><code>custom</code></li> <li><code>ss</code></li> </ul> </td> <td>String</td> </tr> <tr> <td>taxSet</td> <td>Any</td> <td> <b>Use this in sevdesk-Update 1.0 (instead of taxRule).</b><br> Use for custom defined vat-regulations.<br> Requires <code>"taxType": "custom"</code> </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>taxRule</span></td> <td>Any</td> <td> <b>Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).</b><br> Defines the vat-regulation.<br> <br> For "Regelbesteuerung" it can be one of: <ul> <li><code>1</code> - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces <code>"taxType": "default"</code></li> <li><code>2</code> - Ausfuhren - allowedTaxRates: 0.0</li> <li><code>3</code> - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces <code>"taxType": "eu"</code></li> <li><code>4</code> - Steuerfreie Umsätze §4 UStG - tax rates: 0.0</li> <li><code>5</code> - Reverse Charge gem. §13b UStG - tax rates: 0.0</li> </ul> For small business owner ("Kleinunternehmer") it can be: <ul> <li><code>11</code> - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces <code>"taxType": "ss"</code></li> </ul> Example for Umsatzsteuerpflichtige Umsätze: <code>"taxRule": {"id": "1", "objectName": "TaxRule"}</code> </td> <td>Nested object (TaxRule)</td> </tr> <tr> <td><span style='color:darkorange'>accountingType</span></td> <td>Any</td> <td> The account on which this credit note should be booked.<br> This attribute <b>has</b> to be used in case the booking category <b>ACCOUNTING_TYPE</b> is used. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>refSrcInvoice</span></td> <td>Any</td> <td> The invoice from which the underachievement originates.<br> This attribute <b>has</b> to be used if <code>"bookingCategory": "UNDERACHIEVEMENT"</code> is used.<br> <br> We recommend to use <a href="#tag/CreditNote/operation/createCreditNoteFromInvoice">/CreditNote/Factory/createFromInvoice</a> to create a credit note for an invoices. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>refSrcVoucher</span></td> <td>Any</td> <td> <b>Not supported in sevdesk-Update 2.0.</b><br> The voucher from which the underachievement originates.<br> This attribute <b>has</b> to be used in case the booking category <code>UNDERACHIEVEMENT</code> is used.<br> <br> We recommend to use <a href="#tag/CreditNote/operation/createCreditNoteFromVoucher">/CreditNote/Factory/createFromVoucher</a> to create a credit note for an invoices. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>currency</span></td> <td>Any</td> <td> Currency of the credit note.<br> Needs to be currency code according to ISO-4217. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxText</span></td> <td>Any</td> <td> Text describing the vat regulation you chose.<br> A common text of our German customers would be:<br> Umsatzsteuer ausweisen or zzgl. Umsatzsteuer 19% </td> <td>String</td> </tr> <tr> <td>taxRate</td> <td>Any</td> <td> This is not used anymore. Use the taxRate of the individual positions instead. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>contactPerson</span></td> <td>Any</td> <td> The sevdesk user which acts as a contact person for this credit note.<br> </td> <td>Nested object (SevUser)</td> </tr> <tr> <td>smallSettlement</td> <td>Any</td> <td> If the sevdesk account is falling under the small entrepreneur scheme the credit notes must't contain any vat.<br> If this is the case, this attribute should be true, otherwise false. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>creditNoteDate</span></td> <td>Any</td> <td> The credit note date. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td> <td>Any</td> <td> The credit note status. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>showNet</span></td> <td>Any</td> <td> This attribute determines, if the price you give the credit note positions will be regarded as gross or net.<br> If true, the price attribute will hold the net value, otherwise the gross value, as described in the section above. </td> <td>Boolean</td> </tr> <tr> <td>enshrined</td> <td>Any</td> <td> Enshrined credit notes cannot be changed.<br> Can only be set via <a href="#tag/CreditNote/operation/creditNoteEnshrine">/CreditNote/{creditNoteId}/enshrine</a>. This operation cannot be undone. </td> <td>Date / Timestamp</td> </tr> <tr> <td>customerInternalNote</td> <td>Any</td> <td> You can use this attribute to provide a note for the credit note.<br> It can be used for reference numbers, order numbers or other important information. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>address</span></td> <td>Any</td> <td> Holds the <b>complete</b> address to which the credit note is directed.<br> You can use line brakes to separate the different address parts. </td> <td>String</td> </tr> <tr> <td>deliveryDate</td> <td>Any</td> <td> The delivery date of the credit note.<br> This can also be a date range if you provide another timestamp for <b>deliveryDateUntil</b>. </td> <td>Timestamp</td> </tr> <tr> <td>deliveryDateUntil</td> <td>Any</td> <td> You can provide a value here if you want the delivery date to be a date range and you have already given a timestamp to <b>deliveryDate</b>. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>sendType</span></td> <td>Any</td> <td> Is set when using [CreditNote/{creditNoteId}/sendBy](#tag/CreditNote/operation/creditNoteSendBy) / [CreditNote/{creditNoteId}/sendViaEmail](#tag/CreditNote/operation/sendCreditNoteViaEMail).<br> Valid types are: VPR (printed), VPDF (downloaded), VM (mailed), VP (postal). </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>creditNoteNumber</span></td> <td>Any</td> <td> The credit note number. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>contact</span></td> <td>Any</td> <td> The end-customer to which the credit note is directed.<br> </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>header</span></td> <td>Any</td> <td> The credit note header.<br> Usually consists of the credit note number and a prefix. </td> <td>String</td> </tr> <tr> <td>headText</td> <td>Any</td> <td> A head text for the credit note.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>footText</td> <td>Any</td> <td> A foot text for the credit note.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>payDate</td> <td>Any</td> <td> The date the credit note has been paid. </td> <td>Timestamp</td> </tr> <tr> <td>costCentre</td> <td>Any</td> <td> A cost centre for the credit note. </td> <td>Nested object (CostCentre)</td> </tr> <tr> <td>sendDate</td> <td>Any</td> <td> The date the credit note has been sent to the end-customer. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:red'>bookingCategory</span></td> <td>Any</td> <td> The booking category of the credit note.<br> <b>Must be <code>UNDERACHIEVEMENT</code> in sevdesk-Update 2.0.</b> </td> <td>String</td> </tr> </table> 
      # The credit note number
       At this point we wan't to pay special attention to the credit note number again.<br> The credit note number is not an attribute that must be supplied when creating a credit note, however for most, if not all of our customers, a correct enumeration is the key to structured bookkeeping, which is why duplicate entries must be avoided.<br> For this reason, most of the time a manual assignment of numbers is not the best idea and we are happy to provide you a endpoints which will help out finding the next credit note number. <br><br> This GET request will check what the next credit note number should be, so that a correct enumeration is kept.<br> The concrete endpoint can be used for a multitude of enumerations, but we will just concentrate on checking the next credit note number.<br> <ul> <li><b>v1/SevSequence/Factory/getByType?objectType=CreditNote&type=CN</b></li> </ul> 
      # How to filter for certain credit notes
       Often you don't want to retrieve all credit notes in a sevdesk account or one specific credit note of which you know the ID, but rather a list of credit notes or a single credit note with certain properties.<br> For this purpose we provide a bunch of filters that you can attach to your GET query string for nearly all endpoints.<br> Here are all filters applicable to a credit note query. <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>creditNoteNumber={number}</td> <td>Only retrieve all credit notes with number as a credit note number</td> </tr> <tr> <td>onlyEnshrined=true</td> <td>Only retrieve all credit notes which are enshrined</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only retrieve all credit notes with id as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>status={status}</td> <td>Only retrieve credit notes of a given status</td> </tr> <tr> <td>delinquent=true</td> <td>Only retrieve delinquent (due) credit notes</td> </tr> <tr> <td>notdelinquent=true</td> <td>Only retrieve credit notes which are not delinquent (due)</td> </tr> <tr> <td>customerIntenalNote={note}</td> <td>Only retrieve all credit notes with note as a customer internal note</td> </tr> <tr> <td>origin[id]={id}&origin[objectName]=ModelName</td> <td>Only retrieve all credit notes with id as an origin</td> </tr> <tr> <td>costCentre[id]={id}&costCentre[objectName]=CostCentre</td> <td>Only retrieve all credit notes with id as a cost centre.<br> </td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td> <td>Only retrieve all credit notes with id as a contact<br> </td> </tr> <tr> <td>startDate={timestamp}</td> <td>Only retrieve all credit notes where credit note date is bigger than timestamp</td> </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all credit notes where credit note date is smaller than timestamp<br> If startDate and endDate are both supplied, you will get all credit notes in the defined range </td> </tr> <tr> <td>day={timestamp}</td> <td>Only retrieve all credit notes where credit note date falls on the day of timestamp</td> </tr> <tr> <td>header={header}</td> <td>Only retrieve all credit notes with header as a header</td> </tr> <tr> <td>headerSearch={header}</td> <td>Only retrieve all credit notes of which the header is like header</td> </tr> <tr> <td>paymentMethod[id]={id}&paymentMethod[objectName]=PaymentMethod</td> <td>Only retrieve all credit notes with id as a payment method</td> </tr> <tr> <td>headerOrNumber={headerOrNumber}</td> <td>Only retrieve all credit notes of which the header or credit note number is like headerOrNumber</td> </tr> <tr> <td>headerStartsWith={headerStart}</td> <td>Only retrieve all credit notes of which the header starts with headerStart</td> </tr> <tr> <td>globalSearch={searchTerm}</td> <td>Search for credit notes related to searchTerm</td> </tr> <tr> <td>orderByCreditNoteNumber={ASC/DESC}</td> <td>Order all credit notes after credit note number in ASC/DESC order</td> </tr> <tr> <td>partiallyPaid=true</td> <td> Retrieve all credit notes which are partially paid </td> </tr> <tr> <td>orderByDueDate=true</td> <td>Retrieve all credit notes ordered by their due date</td> </tr> <tr> <td>orderByDueTime=true</td> <td>Retrieve all credit notes ordered by their due time</td> </tr> <tr> <td>orderByDebit=true</td> <td>Retrieve all credit notes ordered by their debit</td> </tr> <tr> <td>creditNoteNumberGreater={number}</td> <td>Only retrieve all credit notes of which the credit note number is bigger than number</td> </tr> <tr> <td>creditNoteNumberNumberSmaller={number}</td> <td>Only retrieve all credit notes of which the credit note number is smaller than number</td> </tr> <tr> <td>startAmount={amount}</td> <td>Only retrieve all credit notes of which the (net/gross) sum is larger or equal amount</td> </tr> <tr> <td>endAmount={amount}</td> <td>Only retrieve all credit notes of which the (net/gross) sum is smaller or equal amount</td> </tr> </table>
    x-displayName: CreditNote
  - name: CreditNotePos
    description: >-
      Just like normal invoices, credit notes naturally contain one or more
      credit note positions sometimes also called items, lines or line
      items.<br> These positions can but mustn't contain parts from the sevdesk
      inventory.<br> In sevdesk the credit note object itself just provides the
      skeleton to which positions can be added.<br> Without the positions, the
      credit note would have a sum of zero and therefore no real meaning.<br>
      For this reason it is necessary that we have a closer look at credit note
      positions in this section. 

      # What makes up a credit note position?
       A credit note position basically consist of: <ul> <li>A part (optional but strongly recommended)</li> <li>The name of the part or item</li> <li>A price for one unit of this part or item</li> <li>A unit in which the part or item is measured</li> <li>A quantity showing how many units of the part or item are in the position</li> <li>A tax rate</li> <li>An credit note to which the position belongs</li> </ul> The total gross sum of the credit note position is then calculated by the price being multiplied with the quantity and the tax rate, which is previously converted to a point number.<br> So for a price of 100, a quantity of two and a tax rate of 19 this would be:<br> 100 * 2 * 1,19 = 238 <br><br> There is also the option of regarding the price as the gross price.<br> This is regulated by an attribute of credit note which is called showNet. More about it in the attribute list.<br> In this case, the total sum will be the price you provided and the net price will be calculated by our system.<br> Some of our customers prefer this method, however make sure that you don't get prices mixed up. 
      # Credit note position attributes
       Here is the table of all attributes of credit note positions<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>unity</span></td> <td> The unity in which one item is measured. </td> <td>Nested object (Unity)</td> </tr> <tr> <td><span style='color:red'>quantity</span></td> <td> The quantity of items. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>creditNote</span></td> <td> The creditNote to which the position belongs. </td> <td>Nested object (CreditNote)</td> </tr> <tr> <td>text</td> <td> A text describing the position. </td> <td>String</td> </tr> <tr> <td>positionNumber</td> <td> The number of the position if there are multiple positions in a credit note.<br> Needs to start with zero and is incremented for every new position.<br> If you want to order them differently, you can change their position numbers to your needs. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td> The name of the item in the position. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>price</span></td> <td> The price for one unit of the item in the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>part</span></td> <td> You can define a part from your sevdesk inventory here.<br> Please be aware, you will still need to provide the name, price and everything else as this will not automatically be generated. </td> <td>Nested object (Part)</td> </tr> </table> 
      # How to create/update an credit note position
       You can create a credit note position when creating a credit note, for more information visit the credit note endpoint.<br> If you want to update an credit note position for an existing credit note, then you must use the same endpoint as when creating an credit note, then passing in the <span style='color:red'><b>ID</b></span> along with the <span style='color:red'><b>objectName</b></span> of the credit note and <span style='color:red'><b>mapAll</b></span>.<br> <ul> <li><code>{"creditNote": { "<b>id</b>": 0, "<b>objectName</b>": "CreditNote", "<b>mapAll</b>": true}, <br>"creditNotePos":[{...}]</code></li> </ul> In order to update an credit note position in an existing credit note, the <span style='color:red'><b>ID</b></span> and the <span style='color:red'><b>objectName</b></span> of the credit note must be transferred and in the credit note position the <span style='color:red'><b>ID</b></span> of the credit note position to be updated<br> <ul> <li><code>"creditNote": { "<b>id</b>": 0, "<b>objectName</b>": "CreditNote", "<b>mapAll</b>": true},<br> "creditNotePos":[{"<b>id</b>": 0, ...}]</code></li> </ul>
    x-displayName: CreditNotePos
  - name: Export
    description: A set of operations to export data.
    x-displayName: Export
  - name: Part
    description: Manage parts in an inventory and use them in e.g. invoices.
    x-displayName: Part
  - name: Invoice
    description: |-

      # Purpose of invoices in sevdesk
       Every time one of our sevdesk customers sells an item or provides a service an invoice needs to be created.<br> These invoice can then be paid by the end-customers so that the selling process is completed.<br> The invoices are directly connected to the transactions of the customer, so every time an invoice is created and marked as paid, there must be a transaction on some bank account.<br> The invoice must then be linked to this transaction, otherwise false reports for tax offices and other institutions can be the case. 
      # Attributes of an invoice
       Here is the table of all attributes of invoices.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> There is also a distinction between invoice types, as not all attributes are useful for all types.<br> <table> <tr> <th>Attribute</th> <th>Invoice Type</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td> <td>Any</td> <td> <b>Use this in sevdesk-Update 1.0 (instead of taxRule).</b><br> Defines the vat-regulation.<br> Can be: <ul> <li><code>default</code></li> <li><code>eu</code></li> <li><code>noteu</code></li> <li><code>custom</code></li> <li><code>ss</code></li> </ul> </td> <td>String</td> </tr> <tr> <td>taxSet</td> <td>Any</td> <td> <b>Use this in sevdesk-Update 1.0 (instead of taxRule).</b><br> Use for custom defined vat-regulations.<br> Requires <code>"taxType": "custom"</code> </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>taxRule</span></td> <td>Any</td> <td> <b>Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).</b><br> Defines the vat-regulation.<br> <br> For "Regelbesteuerung" it can be one of: <ul> <li><code>1</code> - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces <code>"taxType": "default"</code></li> <li><code>2</code> - Ausfuhren - allowedTaxRates: 0.0</li> <li><code>3</code> - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces <code>"taxType": "eu"</code></li> <li><code>4</code> - Steuerfreie Umsätze §4 UStG - tax rates: 0.0</li> <li><code>5</code> - Reverse Charge gem. §13b UStG - tax rates: 0.0</li> </ul> For small business owner ("Kleinunternehmer") it can be: <ul> <li><code>11</code> - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces <code>"taxType": "ss"</code></li> </ul> Example for Umsatzsteuerpflichtige Umsätze: <code>"taxRule": {"id": "1", "objectName": "TaxRule"}</code> </td> <td>Nested object (TaxRule)</td> </tr> <tr> <td><span style='color:red'>currency</span></td> <td>Any</td> <td> Currency of the invoice.<br> Needs to be currency code according to ISO-4217. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxText</span></td> <td>Any</td> <td> Text describing the vat regulation you chose.<br> A common text of our German customers would be:<br> Umsatzsteuer ausweisen or zzgl. Umsatzsteuer 19% </td> <td>String</td> </tr> <tr> <td>taxRate</td> <td>Any</td> <td> This is not used anymore. Use the taxRate of the individual positions instead. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>contactPerson</span></td> <td>Any</td> <td> The sevdesk user which acts as a contact person for this invoice.<br> </td> <td>Nested object (SevUser)</td> </tr> <tr> <td>smallSettlement</td> <td>Any</td> <td> If the sevdesk account is falling under the small entrepreneur scheme the invoices must't contain any vat.<br> If this is the case, this attribute should be true, otherwise false. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>invoiceDate</span></td> <td>Any</td> <td> The invoice date.

      **Requirements:**
       * For final invoices (<code>"invoiceType" = "ER"</code>), the invoiceDate must be later than or equal to the invoiceDate of related advance (<code>"invoiceType" = "AR"</code>) / partial (<code>"invoiceType" = "TR"</code>) invoices. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td> <td>Any</td> <td> The invoice status. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>showNet</span></td> <td>Any</td> <td> This attribute determines, if the price you give the invoice positions will be regarded as gross or net.<br> If true, the price attribute will hold the net value, otherwise the gross value, as described in the section above. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>discount</span></td> <td>Any</td> <td> If the end-customer gets a discount if he pays the invoice in a given time, you can specify the percentage of the discount here.<br> Should this be the case, you will need to provide a value for the attribute <b>discountTime</b> too, otherwise there is no time given and the end-customer won't get a discount.<br> If you don't want this, just leave this attribute at zero. </td> <td>Integer</td> </tr> <tr> <td>discountTime</td> <td>Any</td> <td> If a value other than zero is used for the discount attribute you need to specify the amount of days for which the discount is granted. </td> <td>Integer</td> </tr> <tr> <td>enshrined</td> <td>Any</td> <td> Enshrined invoices cannot be changed.<br> Can only be set via <a href="#tag/Invoice/operation/invoiceEnshrine">/Invoice/{invoiceId}/enshrine</a>. This operation cannot be undone. </td> <td>Date / Timestamp</td> </tr> <tr> <td>customerInternalNote</td> <td>Any</td> <td> You can use this attribute to provide a note for the invoice.<br> It can be used for reference numbers, order numbers or other important information. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>address</span></td> <td>Any</td> <td> Holds the <b>complete</b> address to which the invoice is directed.<br> You can use line brakes to separate the different address parts. </td> <td>String</td> </tr> <tr> <td>deliveryDate</td> <td>Any</td> <td> The delivery date of the invoice.<br> This can also be a date range if you provide another timestamp for <b>deliveryDateUntil</b>. </td> <td>Timestamp</td> </tr> <tr> <td>deliveryDateUntil</td> <td>Any</td> <td> You can provide a value here if you want the delivery date to be a date range and you have already given a timestamp to <b>deliveryDate</b>. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>sendType</span></td> <td>Any</td> <td> Is set when using [Invoice/{invoiceId}/sendBy](#tag/Invoice/operation/invoiceSendBy) / [Invoice/{invoiceId}/sendViaEmail](#tag/Invoice/operation/sendInvoiceViaEMail).<br> Valid types are: VPR (printed), VPDF (downloaded), VM (mailed), VP (postal). </td> <td>String</td> </tr> <tr> <td>origin</td> <td>Any</td> <td> You can specify the object from which an invoice originated, like an order.<br> Just provide the ID of this object. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>invoiceNumber</span></td> <td>Any</td> <td> The invoice number. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>contact</span></td> <td>Any</td> <td> The end-customer to which the invoice is directed.<br> Please note, you <b>need</b> to provide a contact if the invoice has any other status than 100. </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>header</span></td> <td>Any</td> <td> The invoice header.<br> Usually consists of the invoice number and a prefix. </td> <td>String</td> </tr> <tr> <td>headText</td> <td>Any</td> <td> A head text for the invoice.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>footText</td> <td>Any</td> <td> A foot text for the invoice.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>timeToPay</td> <td>Any</td> <td> The time the end-customer has to pay the invoice in days. </td> <td>Integer</td> </tr> <tr> <td>payDate</td> <td>Any</td> <td> The date the end-customer has paid the invoice. </td> <td>Timestamp</td> </tr> <tr> <td>paymentMethod</td> <td>Any</td> <td> The payment method for the invoice.<br> Needs the ID of a specified payment method. </td> <td>Integer</td> </tr> <tr> <td>costCentre</td> <td>Any</td> <td> A cost centre for the invoice. </td> <td>Nested object (CostCentre)</td> </tr> <tr> <td>sendDate</td> <td>Any</td> <td> The date the invoice was sent to the end-customer. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:red'>invoiceType</span></td> <td><ul> <li>RE - invoice</li> <li>WKR - recurring invoice</li> <li>SR - cancellation invoice</li> <li>MA - invoice remider</li> <li>TR - partial invoice</li> <li>ER - final invoice</li> </td> <td> The invoice type. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>dunningLevel</span></td> <td>Reminders</td> <td> The dunning level.<br> Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>reminderDeadline</span></td> <td>Reminders</td> <td> The deadline for the next reminder. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>reminderDebit</span></td> <td>Reminders</td> <td> The reminder debit. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>reminderTotal</span></td> <td>Reminders</td> <td> The total reminder amount. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>reminderCharge</span></td> <td>Reminders</td> <td> The additional reminder charge. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>accountIntervall</span></td> <td>Recurring Invoices</td> <td> The interval in which recurring invoices are due. </td> <td>ISO-8601 Duration</td> </tr> <tr> <td><span style='color:darkorange'>accountNextInvoice</span></td> <td>Recurring Invoices</td> <td> The date when the next invoice is due. </td> <td>Timestamp</td> </tr> </table> 
      # The invoice number
       At this point we wan't to pay special attention to the invoice number again.<br> The invoice number is not an attribute that must be supplied when creating an invoice, however for most, if not all of our customers, a correct enumeration is the key to structured bookkeeping, which is why duplicate entries must be avoided.<br> For this reason, most of the time a manual assignment of numbers is not the best idea and we are happy to provide you a endpoints which will help out finding the next invoice number.<br><br> This GET request will check what the next invoice number should be, so that a correct enumeration is kept.<br> The concrete endpoint can be used for a multitude of enumerations, but we will just concentrate on checking the next invoice number.<br> You can change the <b>type</b> query string parameter to your needs, depending on the invoice type for which you want the next number. <ul> <li><code>ht<span>tps://my.sevdesk.de/api/v1/SevSequence/Factory/getByType?objectType=Invoice&type=RE</span></code></li> </ul> 
      # Types and status of invoices
       Invoice types <br> Invoices are most certainly the most complex objects that can be handled over the API. There are multiple types of invoices and these invoices can have multiple status again. Let's have a look at the different types of invoices first.<br> <table> <tr> <th>Invoice Type</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Normal invoice</td> <td> A normal invoice which documents a simple selling process. </td> <td> RE </td> </tr> <tr> <td>Recurring invoice</td> <td> An invoice which generates normal invoices with the same values regularly in fixed time frames (every month, year, ...). </td> <td> WKR </td> </tr> <tr> <td>Cancellation invoice</td> <td> An invoice which cancels another already created normal invoice. </td> <td> SR </td> </tr> <tr> <td>Reminder invoice</td> <td> An invoice which gets created if the end-customer failed to pay a normal invoice in a given time frame.<br> Often includes some kind of reminder fee. </td> <td> MA </td> </tr> <tr> <td>Part invoice</td> <td> Part of a complete invoice. All part invoices together result in the complete invoice.<br> Often used if the end-customer can partly pay for items or services. </td> <td> TR </td> </tr> <tr> <td>Final invoice</td> <td> The final invoice of all part invoices which completes the invoice.<br> After the final invoice is paid by the end-customer, the selling process is complete. </td> <td> ER </td> </tr> </table><br> For now we will only cover the normal invoices, as this is complex enough.<br> However, it is important to keep in mind the abbreviations for all types of invoices or at least the one you will need.<br> This is, because you will need to provide the invoice type when creating an invoice.<br> <br> <b>Invoice status</b><br> Now that we have covered all invoice types, let's move to the different status they can have.<br> <table> <tr> <th>Invoice status</th> <th>Meaning</th> <th>Status code</th> </tr> <tr> <td>Deactivated recurring invoice</td> <td> The invoice is a deactivated recurring invoice.<br> This status code is only relevant for recurring invoices. </td> <td> 50 </td> </tr> <tr> <td>Draft</td> <td> The invoice is still a draft.<br> It has not been sent to the end-customer and can still be changed. </td> <td> 100 </td> </tr> <tr> <td>Open / Due</td> <td> The invoice has been sent to the end-customer.<br> It is either shown as <b>open</b> if the pay date is not exceeded or <b>due</b> if it is. </td> <td> 200 </td> </tr> <tr> <td>Partially paid</td> <td> The invoice has been partially paid.<br> This means, that it is linked to a transaction on some payment account in sevdesk. This status was introduced with Release 4.181 (June 13, 2024). Invoices that were partially paid before that release will have the status "Open" (<code>"status": "200"</code>). In that case use [Invoice/{invoiceId}/getIsPartiallyPaid](#tag/Invoice/operation/getIsInvoicePartiallyPaid) instead of checking the status directly. </td> <td> 750 </td> </tr> <tr> <td>Paid</td> <td> The invoice has been paid.<br> This means, that it is linked to a transaction on some payment account in sevdesk. </td> <td> 1000 </td> </tr> </table><br> It is again important to keep in mind the status codes for all status of invoices or at least the one you will need.<br> This is, because you will need to provide the status code when creating an invoice.<br> 
      # How to book an invoice
       Booking the invoice with a transaction is probably the most important part in the bookkeeping process.<br> There are several ways on correctly booking an invoice, all by using the same endpoint.<br> This endpoint is called <b>/Invoice/{id}/bookAmount</b>.<br><br> The first way of correctly booking an invoice is to book it on the standard check account which is provided by sevdesk.<br> This is perhaps the easiest way, as no transaction needs to be manually created or searched.<br> The fitting transaction will automatically be created on the standard account and the invoice will be booked with it.<br> This works the same way with the register check account.<br><br> <img src='openAPI/img/bookAmountStandard.PNG' width= '800px'><br><br> In the second variant, it is necessary that a transaction already exists, because it is not automatically generated in a manual account or online/finapi account.<br> For this, you must either create the transactions or, in the case of an online/finapi account, import the transactions. When booking the invoices it is important that an id and an objectName are passed along, otherwise a logic error will occur.<br> <img src='openAPI/img/bookAmountWithTransaction.PNG' width= '800px'><br><br> 
      # How to filter for certain invoices
       Often you don't want to retrieve all invoices in a sevdesk account or one specific invoice of which you know the ID, but rather a list of invoices or a single invoice with certain properties.<br> For this purpose we provide a bunch of filters that you can attach to your GET query string for nearly all endpoints.<br> Here are all filters applicable to an invoice query.<br> <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>partiallyPaid=true</td> <td> Retrieve all invoices which are partially paid </td> </tr> <tr> <td>orderByDebit=true</td> <td>Retrieve all invoices ordered by their debit</td> </tr> <tr> <td>orderByDueTime=true</td> <td>Retrieve all invoices ordered by their due time</td> </tr> <tr> <td>showAll=true</td> <td>Retrieve all invoices of all types</td> </tr> <tr> <td>invoiceNumber={number}</td> <td>Only retrieve all invoices with number as a invoice number</td> </tr> <tr> <td>delinquent=true</td> <td>Only retrieve delinquent (due) invoices</td> </tr> <tr> <td>notdelinquent=true</td> <td>Only retrieve invoices which are not delinquent (due)</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only retrieve all invoices with id as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>costCentre[id]={id}&costCentre[objectName]=CostCentre</td> <td>Only retrieve all invoices with id as a cost centre.<br> </td> </tr> <tr> <td>status={status}</td> <td>Only retrieve invoices of a given status</td> </tr> <tr> <td>createBefore={timestamp}</td> <td>Only retrieve all invoices created before timestamp</td> </tr> <tr> <td>createAfter={timestamp}</td> <td>Only retrieve all invoices created after timestamp</td> </tr> <tr> <td>updateBefore={timestamp}</td> <td>Only retrieve all invoices updated last before timestamp</td> </tr> <tr> <td>updateAfter={timestamp}</td> <td>Only retrieve all invoices updated last after timestamp</td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td> <td>Only retrieve all invoices with id as a contact<br> </td> </tr> <tr> <td>orderByDueDate=true</td> <td>Retrieve all invoices ordered by their due date</td> </tr> <tr> <td>customerIntenalNote={note}</td> <td>Only retrieve all invoices with note as a customer internal note</td> </tr> <tr> <td>day={timestamp}</td> <td>Only retrieve all invoices where invoice date falls on the day of timestamp</td> </tr> <tr> <td>startDate={timestamp}</td> <td>Only retrieve all invoices where invoice date is bigger than timestamp</td> </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all invoices where invoice date is smaller than timestamp<br> If startDate and endDate are both supplied, you will get all invoices in the defined range </td> </tr> <tr> <td>header={header}</td> <td>Only retrieve all invoices with header as a header</td> </tr> <tr> <td>onlyDunned=true</td> <td>Retrieve all invoices which are dunned</td> </tr> <tr> <td>showWkr=all</td> <td>Retrieve all recurring invoices</td> </tr> <tr> <td>showMa=all</td> <td>Retrieve all invoices which are payment reminders</td> </tr> <tr> <td>origin[id]={id}&origin[objectName]=ModelName</td> <td>Only retrieve all invoices with id as an origin</td> </tr> <tr> <td>invoiceType={type}</td> <td>Only retrieve all invoices with type as an invoice type</td> </tr> <tr> <td>paymentMethod[id]={id}&paymentMethod[objectName]=PaymentMethod</td> <td>Only retrieve all invoices with id as a payment method</td> </tr> <tr> <td>headerSearch={header}</td> <td>Only retrieve all invoices of which the header is like header</td> </tr> <tr> <td>headerStartsWith={headerStart}</td> <td>Only retrieve all invoices of which the header starts with headerStart</td> </tr> <tr> <td>headerOrNumber={headerOrNumber}</td> <td>Only retrieve all invoices of which the header or invoice number is like headerOrNumber</td> </tr> <tr> <td>globalSearch={searchTerm}</td> <td>Search for invoices related to searchTerm</td> </tr> <tr> <td>orderByInvoiceNumber={ASC/DESC}</td> <td>Order all invoices after invoice number in ASC/DESC order</td> </tr> <tr> <td>invoiceNumberGreater={number}</td> <td>Only retrieve all invoices of which the invoice number is bigger than number</td> </tr> <tr> <td>invoiceNumberSmaller={number}</td> <td>Only retrieve all invoices of which the invoice number is smaller than number</td> </tr> <tr> <td>sendType={type}</td> <td>Only retrieve all invoices with type as a send type</td> </tr> <tr> <td>fulltextSearch={text}</td> <td>Search for invoices, positions or contact with text as a text</td> </tr> </table>
    x-displayName: Invoice
  - name: InvoicePos
    description: |-

      # Invoice positions
       Every invoice naturally contains one or more invoice positions sometimes also called invoice items, invoice lines or line items.<br> These positions can but mustn't contain parts from the sevdesk inventory.<br> In sevdesk the invoice object itself just provides the skeleton to which positions can be added.<br> Without the positions, the invoice would have a sum of zero and therefore no real meaning.<br> For this reason it is necessary that we have a closer look at invoice positions in this section.<br><br> What makes up a invoice position?<br><br> A invoice position basically consist of: <ul> <li>A part (optional but strongly recommended)</li> <li>The name of the part or item</li> <li>A price for one unit of this part or item</li> <li>A unit in which the part or item is measured</li> <li>A quantity showing how many units of the part or item are in the position</li> <li>A tax rate</li> <li>An invoice to which the position belongs</li> </ul> The total gross sum of the invoice position is then calculated by the price being multiplied with the quantity and the tax rate, which is previously converted to a point number.<br> So for a price of 100, a quantity of two and a tax rate of 19 this would be:<br> 100 * 2 * 1,19 = 238<br><br> There is also the option of regarding the price as the gross price.<br> This is regulated by an attribute of invoice which is called showNet. More about it in the attribute list.<br> In this case, the total sum will be the price you provided and the net price will be calculated by our system.<br> Some of our customers prefer this method, however make sure that you don't get prices mixed up. 
      # Invoice position attributes
       Here is the table of all attributes of invoice positions.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> There is also a distinction between invoice types, as not all attributes are useful for all types.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>unity</span></td> <td> The unity in which one item is measured. </td> <td>Nested object (Unity)</td> </tr> <tr> <td><span style='color:red'>quantity</span></td> <td> The quantity of items. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>invoice</span></td> <td> The invoice to which the position belongs. </td> <td>Nested object (Invoice)</td> </tr> <tr> <td>discount</td> <td> A discount amount for the specific position. </td> <td>Double</td> </tr> <tr> <td>text</td> <td> A text describing the position. </td> <td>String</td> </tr> <tr> <td>positionNumber</td> <td> The number of the position if there are multiple positions in an invoice.<br> Needs to start with zero and is incremented for every new position.<br> If you want to order them differently, you can change their position numbers to your needs. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td> The name of the item in the position. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>price</span></td> <td> The price for one unit of the item in the position. </td> <td>Double</td> </tr> <tr> <td> <span style='color:darkorange'> part</span></td> <td> You can define a part from your sevdesk inventory here.<br> Please be aware, you will still need to provide the name, price and everything else as this will not automatically be generated. </td> <td>Nested object (Part)</td> </tr> </table> 
      # How to create/update an invoice position
       You can create an invoice position when creating an invoice, for more information visit the Invoice endpoint.<br> If you want to update an invoice position for an existing invoice, then you must use the same endpoint as when creating an invoice, then passing in the <span style='color:red'><b>ID</b></span> along with the <span style='color:red'><b>objectName</b></span> of the invoice and <span style='color:red'><b>mapAll</b></span>.<br> <ul> <li><code>{"invoice": { "<b>id</b>": 0, "<b>objectName</b>": "Invoice", "<b>mapAll</b>": true}, <br>"invoicePos":[{...}]</code></li> </ul> In order to update an invoice position in an existing invoice, the <span style='color:red'><b>ID</b></span> and the <span style='color:red'><b>objectName</b></span> of the invoice must be transferred and in the invoice position the <span style='color:red'><b>ID</b></span> of the invoice position to be updated<br> <ul> <li><code>"invoice": { "<b>id</b>": 0, "<b>objectName</b>": "Invoice", "<b>mapAll</b>": true},<br> "invoicePos":[{"<b>id</b>": 0, ...}]</code></li> </ul>
    x-displayName: InvoicePos
  - name: Layout
    description: |-

      # Purpose of Layout in sevdesk
       Each invoice, order and credit note has a generated document.<br> In this chapter we will show you how the layout queries and use them to change the look of your document<br> Please keep in mind that every invoice, order and credit note must be rendered beforehand so that a document is also available. 
      # Attributes of a Layout
       In the layouts there are only two different attributes, <b>key</b> and <b>value</b>. For key you can pass one of the following values: <ul> <li>template</li> <li>letterpaper</li> <li>language</li> <li>payPal</li> </ul> The value depends on which key you have chosen. In the following the standard values ​​of the respective keys.<br><br> <b>language</b> <table> <tr> <td>German</td> <td>de_DE</td> </tr> <tr> <td>German(Autria)</td> <td>de_AT</td> </tr> <tr> <td>German(Swiss)</td> <td>de_CH</td> </tr> <tr> <td>English</td> <td>en_US</td> </tr> <tr> <td>Spanish</td> <td>es_ES</td> </tr> <tr> <td>French</td> <td>fr_FR</td> </tr> <tr> <td>Italian</td> <td>id_IT</td> </tr> <tr> <td>Greek</td> <td>el_GR</td> </tr> </table><br> <b>payPal</b> <table> <tr> <td>Show PayPal icon</td> <td>A</td> </tr> <tr> <td>Show link</td> <td>B</td> </tr> <tr> <td>Disable Paypal</td> <td>C</td> </tr> <tr> <td>PayPal as Strig</td> <td>D</td> </tr> </table>
    x-displayName: Layout
  - name: Order
    description: |-

      # Purpose of orders in sevdesk
       Orders serve a multitude of purposes in sevdesk.<br> Although strictly speaking an order has just one single purpose, we regard three types of objects as orders.<br> The <b>estimate / proposal</b> which gets sent to an end-customer by the customer.<br> The <b>order confirmation</b> from an accepted estimate.<br> The <b>delivery note</b> which is sent if goods have been sent by the customer.<br> If you need to handle any of these objects, this detail documentation is the right place!<br> Orders are really similar to invoices in regards to their attributes and representation.<br> This is due to their close relation to invoices, as invoices can be created from orders. 
      # Types and status of orders
       Orders are one of the more complex objects that can be handled over the API.<br> As already mentioned, there are different types of orders and these orders can have multiple status again.<br> Let's have a look at the different types of orders first.<br> <table> <tr> <th>Order Type</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Estimate / Proposal</td> <td> A normal order which documents a simple estimation / proposal for an end-customer. </td> <td> AN </td> </tr> <tr> <td>Order confirmation</td> <td> A confirmation for an estimate / proposal. </td> <td> AB </td> </tr> <tr> <td>Delivery note</td> <td> A confirmation that goods from an estimate / proposal have been sent. </td> <td> LI </td> </tr> </table> Fortunately all types of order share the same set of attributes so it is only important to keep in mind the abbreviations for all types of orders or at least the one you will need.<br> This is, because you will need to provide the order type when creating an order.<br><br> <b>Order status</b><br> Now that we have covered all order types, let's move to the different status they can have.<br><br> <table> <tr> <th>Order status</th> <th>Meaning</th> <th>Status code</th> </tr> <tr> <td>Draft</td> <td> The order is still a draft.<br> It has not been sent to the end-customer and can still be changed. </td> <td> 100 </td> </tr> <tr> <td>Delivered</td> <td> The order has been sent to the end-customer.<br> </td> <td> 200 </td> </tr> <tr> <td>Rejected / Cancelled</td> <td> The order has been rejected by the end-customer.<br> </td> <td> 300 </td> </tr> <tr> <td>Accepted</td> <td> The order has been accepted by the end-customer.<br> </td> <td> 500 </td> </tr> <tr> <td>Partially Calculated</td> <td> An invoice for parts of the order (but not the full order) has been created.<br> </td> <td> 750 </td> </tr> <tr> <td>Calculated</td> <td> The order has been calculated.<br> One or more invoices have been created covering the whole order. </td> <td> 1000 </td> </tr> </table> It is important to keep in mind the status codes for all status of orders or at least the one you will need.<br> This is, because you will need to provide the status code when creating an order. 
      # Attributes of an order
       Here is the table of all attributes of orders.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td> <td> <b>Use this in sevdesk-Update 1.0 (instead of taxRule).</b><br> Defines the vat-regulation.<br> Can be: <ul> <li><code>default</code></li> <li><code>eu</code></li> <li><code>noteu</code></li> <li><code>custom</code></li> <li><code>ss</code></li> </ul> </td> <td>String</td> </tr> <tr> <td>taxSet</td> <td> <b>Use this in sevdesk-Update 1.0 (instead of taxRule).</b><br> Use for custom defined vat-regulations.<br> Requires <code>"taxType": "custom"</code> </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>taxRule</span></td> <td> <b>Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).</b><br> Defines the vat-regulation.<br> <br> For "Regelbesteuerung" it can be one of: <ul> <li><code>1</code> - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces <code>"taxType": "default"</code></li> <li><code>2</code> - Ausfuhren - allowedTaxRates: 0.0</li> <li><code>3</code> - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces <code>"taxType": "eu"</code></li> <li><code>4</code> - Steuerfreie Umsätze §4 UStG - tax rates: 0.0</li> <li><code>5</code> - Reverse Charge gem. §13b UStG - tax rates: 0.0</li> </ul> For small business owner ("Kleinunternehmer") it can be: <ul> <li><code>11</code> - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces <code>"taxType": "ss"</code></li> </ul> Example for Umsatzsteuerpflichtige Umsätze: <code>"taxRule": {"id": "1", "objectName": "TaxRule"}</code> </td> <td>Nested object (TaxRule)</td> </tr> <tr> <td><span style='color:red'>currency</span></td> <td> Currency of the order.<br> Needs to be currency code according to ISO-4217. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>version</span></td> <td> Version of the order.<br> Can be used if you have multiple drafts for the same order.<br> Should start with 0. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>taxText</span></td> <td> Text describing the vat regulation you chose.<br> A common text of our German customers would be:<br> Umsatzsteuer ausweisen or zzgl. Umsatzsteuer 19% </td> <td>String</td> </tr> <tr> <td>taxRate</td> <td> This is not used anymore. Use the taxRate of the individual positions instead. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>contactPerson</span></td> <td> The sevdesk user which acts as a contact person for this order.<br> </td> <td>Nested object (SevUser)</td> </tr> <tr> <td>smallSettlement</td> <td> If the sevdesk account is falling under the small entrepreneur scheme the order must't contain any vat.<br> If this is the case, this attribute should be true, otherwise false. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>orderDate</span></td> <td> The order date. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td> <td> The order status. </td> <td>Integer</td> </tr> <tr> <td>showNet</td> <td> This attribute determines, if the price you give the order positions will be regarded as gross or net.<br> If true, the price attribute will hold the net value, otherwise the gross value. </td> <td>Boolean</td> </tr> <tr> <td>customerInternalNote</td> <td> You can use this attribute to provide a note for the order.<br> It can be used for reference numbers, order numbers or other important information. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>address</span></td> <td> Holds the <b>complete</b> address to which the order is directed.<br> You can use line brakes to separate the different address parts. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>sendType</span></td> <td> If you don't plan to send the order over another endpoint like <b>/Order/sendViaEmail</b> or <b>Order/sendBy</b> but instead give it the status "200" directly, you need to specify a send type here.<br> Valid types are: VPR (printed), VPDF (downloaded), VM (mailed), VP (postal). </td> <td>String</td> </tr> <tr> <td>origin</td> <td> You can specify the object from which an order originated.<br> Just provide the ID of this object. </td> <td>Integer</td> </tr> <tr> <td>typeOrigin</td> <td> Specifies the object name of the object from which an order originated.<br> Most likely <b>Order</b> or <b>Invoice</b>. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>orderNumber</span></td> <td> The order number. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>contact</span></td> <td> The end-customer to which the order is directed.<br> </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:red'>header</span></td> <td> The order header.<br> Usually consists of the order number and a prefix. </td> <td>String</td> </tr> <tr> <td>headText</td> <td> A head text for the order.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>footText</td> <td> A foot text for the order.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>paymentTerms</td> <td> The payment terms for the order.<br> </td> <td>Integer</td> </tr> <tr> <td>deliveryTerms</td> <td> The delivery terms for the order.<br> </td> <td>Integer</td> </tr> <tr> <td>sendDate</td> <td> The date the order was sent to the end-customer. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:red'>orderType</span></td> <td> The order type. </td> <td>String</td> </tr> </table> 
      # How to filter for certain orders
       Often you don't want to retrieve all orders in a sevdesk account or one specific order of which you know the ID, but rather a list of orders or a single order with certain properties.<br> For this purpose we provide a bunch of filters that you can attach to your GET query string for nearly all endpoints.<br> Here are all filters applicable to an order query. <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>orderNumber={number}</td> <td>Only retrieve all orders with number as a order number</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only retrieve all orders with id as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>status={status}</td> <td>Only retrieve orders of a given status</td> </tr> <tr> <td>createBefore={timestamp}</td> <td>Only retrieve all orders created before timestamp</td> </tr> <tr> <td>createAfter={timestamp}</td> <td>Only retrieve all orders created after timestamp</td> </tr> <tr> <td>updateBefore={timestamp}</td> <td>Only retrieve all orders updated last before timestamp</td> </tr> <tr> <td>updateAfter={timestamp}</td> <td>Only retrieve all orders updated last after timestamp</td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td> <td>Only retrieve all orders with id as a contact<br> </td> </tr> <tr> <td>startDate={timestamp}</td> <td>Only retrieve all orders where order date is bigger than timestamp</td> </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all orders where order date is smaller than timestamp<br> If startDate and endDate are both supplied, you will get all orders in the defined range </td> </tr> <tr> <td>orderType={type}</td> <td>Only retrieve all orders with type as an order type</td> </tr> <tr> <td>headerSearch={header}</td> <td>Only retrieve all orders of which the header is like header</td> </tr> <tr> <td>globalSearch={searchTerm}</td> <td>Search for orders related to searchTerm</td> </tr> <tr> <td>orderByOrderNumber={ASC/DESC}</td> <td>Order all orders after order number in ASC/DESC order</td> </tr> <tr> <td>orderNumberGreater={number}</td> <td>Only retrieve all orders of which the order number is bigger than number</td> </tr> <tr> <td>orderNumberNumberSmaller={number}</td> <td>Only retrieve all orders of which the order number is smaller than number</td> </tr> <tr> <td>startAmount={amount}</td> <td>Only retrieve all orders of which the (net/gross) sum is larger or equal amount</td> </tr> <tr> <td>endAmount={amount}</td> <td>Only retrieve all orders of which the (net/gross) sum is smaller or equal amount</td> </tr> </table>
    x-displayName: Order
  - name: OrderPos
    description: |-

      # Order position attributes
       Here is the tables of all attributes of order positions.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>unity</span></td> <td> The unity in which one item is measured. </td> <td>Nested object (Unity)</td> </tr> <tr> <td><span style='color:red'>quantity</span></td> <td> The quantity of items. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>order</span></td> <td> The order to which the position belongs. </td> <td>Nested object (Order)</td> </tr> <tr> <td>discount</td> <td> A discount amount for the specific position. </td> <td>Double</td> </tr> <tr> <td>text</td> <td> A text describing the position. </td> <td>String</td> </tr> <tr> <td>positionNumber</td> <td> The number of the position if there are multiple positions in an order.<br> Needs to start with zero and is incremented for every new position.<br> If you want to order them differently, you can change their position numbers to your needs. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td> The name of the item in the position. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>price</span></td> <td> The price for one unit of the item in the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>part</span></td> <td> You can define a part from your sevdesk inventory here.<br> Please be aware, you will still need to provide the name, price and everything else as this will not automatically be generated. </td> <td>Nested object (Part)</td> </tr> </table>
    x-displayName: OrderPos
  - name: Voucher
    description: >-
      Vouchers (receipts) is a generic term for various documents that serve as
      proof of business transactions for the bookkeeping.<br> Incoming and
      outgoing invoices, coupons and receipts are among the most common types of
      documents.<br> Every time one of our sevdesk customers makes a monetary
      input or output, the transaction needs to be documented with a
      receipt.<br> In sevdesk our customers can create a digital version of this
      receipt, the voucher, to which the actual offline receipt can be
      attached.<br> These vouchers can then be paid by the end-customers or by
      the customer, depending if it is an input or output, so that the
      transaction process is completely documented.<br> The vouchers are
      directly connected to the transactions of the customer, so every time a
      voucher is created and marked as paid, there must be a transaction on some
      bank account.<br> The voucher must then be linked to this transaction,
      otherwise false reports for tax offices and other institutions can be the
      case.<br> 

      # Attributes of a voucher
       Here is the table of useful attributes of voucher.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange. These can be skipped when creating a draft voucher.<br> There is also a distinction between voucher types, as not all attributes are useful for all types. <table> <tr> <th>Attribute</th> <th>Voucher Type</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td> <td>Any</td> <td> <b>Use this in sevdesk-Update 1.0 (instead of taxRule).</b><br> Defines the vat-regulation for the voucher<br> Can be: <ul> <li><code>default</code></li> <li><code>eu</code></li> <li><code>noteu</code></li> <li><code>custom</code></li> <li><code>ss</code></li> </ul> </td> <td>String</td> </tr> <tr> <td>taxSet</td> <td>Any</td> <td> <b>Use this in sevdesk-Update 1.0 (instead of taxRule).</b><br> If you supplied <code>"taxType": "custom"</code> you can specify which tax set should be used. </td> <td>Nested object (TaxSet)</td> </tr> <tr> <td><span style='color:red'>taxRule</span></td> <td>Any</td> <td> <b>Use this in sevdesk-Update 2.0 (instead of taxType / taxSet).</b><br> Defines the vat-regulation for the voucher<br> <br> For "Regelbesteuerung" it can be one of: <ul> <li><code>1</code> - Umsatzsteuerpflichtige Ums&auml;tze (tax rates: 0.0, 7.0, 19.0) - replaces <code>"taxType": "default"</code></li> <li><code>2</code> - Ausfuhren (tax rates: 0.0)</li> <li><code>3</code> - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces <code>"taxType": "eu"</code></li> <li><code>4</code> - Steuerfreie Ums&auml;tze §4 UStG (tax rates: 0.0)</li> <li><code>5</code> - Reverse Charge gem. §13b UStG (tax rates: 0.0)</li> </ul> For small business owner ("Kleinunternehmer") it can be: <ul> <li><code>1</code> - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces <code>"taxType": "ss"</code></li> </ul> Example for Umsatzsteuerpflichtige Ums&auml;tze: <code>"taxRule": {"id": "1", "objectName": "TaxRule"}</code> <br><br> Depending on the use case (revenue or expense), you can find the right TaxRule via one of the Account Guidance endpoints:<br> <ul> <li><a href='#tag/Voucher/operation/forRevenue'>for revenue</a></li> <li><a href='#tag/Voucher/operation/forExpense'>for expense</a></li> </ul> </td> <td>Nested object (TaxRule)</td> </tr> <tr> <td><span style='color:red'>voucherType</span></td> <td>Any</td> <td> The type of the voucher. Most likely <b>VOU</b> but RV is also valid. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>voucherDate</span></td> <td>Any</td> <td> The voucher date. </td> <td>Date / Timestamp</td> </tr> <tr> <td style='color:darkorange'>deliveryDate</td> <td>Any</td> <td> The delivery date of the voucher.<br> This can also be a date range if you provide another value for <b>deliveryDateUntil</b>. </td> <td>Date / Timestamp</td> </tr> <tr> <td>deliveryDateUntil</td> <td>Any</td> <td> You can provide a value here if you want the delivery date to be a date range and you have already given a value to <b>deliveryDate</b>. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td> <td>Any</td> <td> The voucher status. Notable values are 50 (draft) and 100 (finished), see below for the full list. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>creditDebit</span></td> <td>Any</td> <td> Defines if the voucher is a credit (expense) or debit (revenue) document.<br> If you supply <b>C</b> as the value, the voucher is a credit. You bought something.<br> If you supply <b>D</b> as the value, the voucher is a debit. You sold something. </td> <td>String</td> </tr> <tr> <td>enshrined</td> <td>Any</td> <td> Enshrined vouchers cannot be changed.<br> Can only be set via <a href="#tag/Voucher/operation/voucherEnshrine">/Voucher/{voucherId}/enshrine</a>. This operation cannot be undone. </td> <td>Date / Timestamp</td> </tr> <tr> <td>paymentDeadline</td> <td>Any</td> <td> The payment deadline of the voucher.<br> If this date is exceeded, the voucher will be shown as due. </td> <td>Date / Timestamp</td> </tr> <tr> <td>supplier</td> <td>Any</td> <td> The supplier or customer to which the voucher is directed.<br> <span style='color:darkorange'>Note that you must provide either the supplier object or a supplierName.</span> </td> <td>Nested object (Contact)</td> </tr> <tr> <td>supplierName</td> <td>Any</td> <td> The name of the supplier or customer used for the voucher.<br> </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>description</span></td> <td>Any</td> <td> The voucher number or voucher description. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>document</span></td> <td>Any</td> <td> The document of the voucher.<br> </td> <td>Nested object (Document)</td> </tr> <tr> <td>payDate</td> <td>Any</td> <td> The date the voucher was paid. </td> <td>Date / Timestamp</td> </tr> <tr> <td>costCentre</td> <td>Any</td> <td> A cost centre for the voucher. </td> <td>Nested object (CostCentre)</td> </tr> <tr> <td>currency</td> <td>Any</td> <td> The currency, defaults to the system currency when not set.<br> Example value: EUR </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>recurringInterval</span></td> <td>Recurring Vouchers</td> <td> The interval in which vouchers are to be created.<br> Possible values are:<br> <ul> <li>P0Y0M1W (weekly)</li> <li>P0Y0M2W (every second week)</li> <li>P0Y1M (monthly)</li> <li>P0Y2M (every second month)</li> <li>P0Y3M (quarterly)</li> <li>P0Y6M (semiannual)</li> <li>P1Y (yearly)</li> <li>P2Y (every 2 years)</li> <li>P3Y (every 3 years)</li> <li>P4Y (every 4 years)</li> <li>P5Y (every 5 years)</li> </ul> </td> <td>String</td> </tr> <tr> <td>recurringIntervall<br><span style='color:red'>deprecated</span></td> <td>Recurring Vouchers</td> <td>Values will be mapped to recurringInterval, deprecated because it would not allow values < 1 month.</td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>recurringStartDate</span></td> <td>Recurring Vouchers</td> <td> The date when the recurring vouchers start. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>recurringNextVoucher</span></td> <td>Recurring Vouchers</td> <td> The date when the next voucher is due. When creating RV documents you will usually set this to the same date as recurringStartDate. </td> <td>Date / Timestamp</td> </tr> <tr> <td>recurringLastVoucher</td> <td>Recurring Vouchers</td> <td> The date the last previous voucher was generated. </td> <td>Date / Timestamp</td> </tr> <tr> <td>recurringEndDate</td> <td>Recurring Vouchers</td> <td> The date the generation of recurring vouchers ends. </td> <td>Date / Timestamp</td> </tr> </table> 
      # Types and status of vouchers
       Vouchers are one of the more complex objects that can be handled over the API.<br> There are two types of vouchers and these vouchers can have multiple status again.<br> Let's have a look at the different types of vouchers first.<br> <table> <tr> <th>Voucher Type</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Normal voucher</td> <td> A normal voucher which documents a simple selling process. </td> <td> VOU </td> </tr> <tr> <td>Recurring voucher</td> <td> A voucher which generates normal vouchers with the same values regularly in fixed time frames (every month, year, ...). </td> <td> RV </td> </tr> </table> For now we will only cover the normal vouchers, as this is complex enough.<br><br> <b>Voucher status</b><br> Now that we have covered all voucher types, let's move to the different status they can have.<br> <table> <tr> <th>Voucher status</th> <th>Meaning</th> <th>Status code</th> </tr> <tr> <td>Draft</td> <td> The voucher is still a draft.<br> It has not been marked as completed and can still be changed. </td> <td> 50 </td> </tr> <tr> <td>Unpaid / Due</td> <td> The voucher has been completed but not paid.<br> It is either shown as <b>unpaid</b> if the pay date is not exceeded or <b>due</b> if it is. </td> <td> 100 </td> </tr> <tr> <td>Transferred</td> <td> The voucher has been used to create a payment in sevdesk and is waiting for the import of the bank transaction to set it to paid. </td> <td> 150 </td> </tr> <tr> <td>Partially paid</td> <td> The voucher has been partially paid. There are linked transactions or payments. </td> <td> 750 </td> </tr> <tr> <td>Paid</td> <td> The voucher has been paid by the end-customer or the sevdesk customer.<br> This means, that it is linked to a transaction on some payment account in sevdesk. </td> <td> 1000 </td> </tr> </table> 
      # Account Datev
       
      *Use this in sevdesk-Update 2.0 (instead of <a
      href='#tag/Voucher/Accounting-type'>Accounting type</a>)*
       
       An account Datev is the booking account used in voucher positions.<br> To choose the right account datev please use our <a href='#tag/Voucher/operation/forAllAccounts'>account guidance</a><br> <br> Here are two examples how accounting types can be chosen by our customers in the web interface:<br> <br> <img src='openAPI/img/accountDatevExpense.png'><br><br> <img src='openAPI/img/accountDatevYield.png'><br><br> 
       
      # Accounting type
       
      *Use this in sevdesk-Update 1.0*
       
       An accounting type is the booking account used in voucher positions.<br> It is essential that you always provide one, as it is relevant for multiple business reports.<br> In general, accounting types are differentiated into income and output accounting types.<br> Income types should only be used for debit vouchers and output types only for credit vouchers!<br> Here are two examples how accounting types can be chosen by our customers in the web interface:<br><br> <img src='openAPI/img/creditAccountingTypes.PNG' width= '700px'><br><br> <img src='openAPI/img/debitAccountingType.PNG' width= '700px'><br><br> Regarding the accounting types, you will most certainly only need to request existing accounting types for using their ID in further requests.<br> Therefore, you only need to send normal GET requests to the AccountingType endpoint.<br> 
      # How to filter for certain vouchers
       <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>accountingType[id]={id}&accountingType[objectName]=AccountingType</td> <td>Only retrieve all vouchers which contain at least one position using id as an accounting type.<br> </td> </tr> <tr> <td>withoutCatering=true</td> <td>Retrieve all vouchers except catering vouchers.</td> </tr> <tr> <td>year={year}</td> <td>Only retrieve all vouchers with a voucher date in year.</td> </tr> <tr> <td>month={month}</td> <td>Only retrieve all vouchers with a voucher date in month.<br> Can be combined with a year. </td> </tr> <tr> <td>descriptionLike={description}</td> <td>Only retrieve all vouchers with a description containing description.</td> </tr> <tr> <td>creditDebit={C/D}</td> <td>Supply <b>C</b> to only retrieve credit vouchers and <b>D</b> to only retrieve debit vouchers.</td> </tr> <tr> <td>supplierName={name}</td> <td>Only retrieve all vouchers with a supplier having a name like name.</td> </tr> <tr> <td>commentLike={comment}</td> <td>Only retrieve all vouchers having a position with a comment like comment.</td> </tr> <tr> <td>searchCommentOrDescription={text}</td> <td>Only retrieve all vouchers having a position with comment like text or a description like text.</td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td> <td>Only retrieve all vouchers with id as a contact<br> </td> </tr> <tr> <td>createBefore={timestamp}</td> <td>Only retrieve all vouchers created before timestamp</td> </tr> <tr> <td>createAfter={timestamp}</td> <td>Only retrieve all vouchers created after timestamp</td> </tr> <tr> <td>updateBefore={timestamp}</td> <td>Only retrieve all vouchers updated last before timestamp</td> </tr> <tr> <td>updateAfter={timestamp}</td> <td>Only retrieve all vouchers updated last after timestamp</td> </tr> <tr> <td>startDate={timestamp}</td> <td>Only retrieve all vouchers where voucher date is bigger than timestamp</td> </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all vouchers where voucher date is smaller than timestamp<br> If startDate and endDate are both supplied, you will get all vouchers in the defined range. </td> </tr> <tr> <td>object[id]={id}&object[objectName]={objectName}</td> <td>Only retrieve all vouchers with a linked object with ID id and objectName as object name.<br> </td> </tr> <tr> <td>startPayDate={timestamp}</td> <td>Only retrieve all vouchers where pay date is bigger than timestamp</td> </tr> <tr> <td>endPayDate={timestamp}</td> <td> Only retrieve all vouchers where pay date is smaller than timestamp<br> If startPayDate and endPayDate are both supplied, you will get all vouchers in the defined range. </td> </tr> <tr> <td>status={status}</td> <td>Only retrieve vouchers of a given status</td> </tr> <tr> <td>orderByDebit=true</td> <td>Retrieve all vouchers ordered by their debit</td> </tr> <tr> <td>costCentre[id]={id}&costCentre[objectName]=CostCentre</td> <td>Only retrieve all vouchers with id as a cost centre.<br> </td> </tr> <tr> <td>voucherType={type}</td> <td>Only retrieve all vouchers with type as a voucher type</td> </tr> <tr> <td>origin[id]={id}&origin[objectName]=ModelName</td> <td>Only retrieve all vouchers with id as an origin</td> </tr> <tr> <td>globalSearch={searchTerm}</td> <td>Search for vouchers related to searchTerm</td> </tr> <tr> <td>contactOrObject[id]={id}&contactOrObject[objectName]={objectName}</td> <td>Only retrieve all vouchers with a linked object or a contact with ID id and objectName as object name.<br> </td> </tr> <tr> <td>orderByVoucherNumber={ASC/DESC}</td> <td>Order all vouchers after voucher number in ASC/DESC order</td> </tr> <tr> <td>delinquent=true</td> <td>Only retrieve delinquent (due) vouchers</td> </tr> <tr> <td>hasDocument=true</td> <td>Only retrieve vouchers which have an attached document</td> </tr> <tr> <td>noRv=true</td> <td>Only retrieve vouchers which are not of type RV</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only retrieve all vouchers with id as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>startAmount={amount}</td> <td>Only retrieve all vouchers with a sum bigger than amount.<br> If your provided amount is negative, it will retrieve all vouchers with a sum smaller than amount.</td> </tr> <tr> <td>endAmount={amount}</td> <td> Only retrieve all vouchers with a sum smaller than amount.<br> If your provided amount is negative, it will retrieve all vouchers with a sum bigger than amount.<br> If startAmount and endAmount are both supplied, you will get all vouchers in the defined range. </td> </tr> <tr> <td>fulltextSearch={text}</td> <td>Search for vouchers, positions or contact with text as a text</td> </tr> <tr> <td>fulltextSearchObjects={object1, object2, ...}</td> <td>Enables different objects to search in with the fulltextSearch.</td> </tr> </table><br>
    x-displayName: Voucher
  - name: VoucherPos
    description: "Every voucher can contain one or more voucher positions.<br> These positions must contain an accounting type (booking account) so that the voucher can be booked accordingly.<br> In sevdesk the voucher object itself just provides the skeleton to which positions can be added.<br> Without the positions, the voucher would have a sum of zero and therefore no real meaning.<br> For this reason it is necessary that we have a closer look at voucher positions in this section. \n# What makes up a voucher position?\n\n<b>A voucher position item basically consists of in sevdesk-Update 2.0:</b><br> \r\n <ul> <li>An account datev (booking account)</li> <li>A sum (gross or net)</li> <li>A tax rate</li> <li>A voucher to which the position belongs</li> </ul>\n<b>A voucher position item basically consists of in sevdesk-Update 1.0:</b><br><br> \r\n <ul> <li>An accounting type (booking account)</li> <li>A sum (gross or net)</li> <li>A tax rate</li> <li>A voucher to which the position belongs</li> </ul>\nThe total gross sum of the voucher position is then calculated.<br> The 'net' attribute determines how we calculate the total, if net is true we use the sumNet and calculate from there. If net is false we use the sumGross and calculate the other values from there. <br><br>\n\n# Voucher position attributes\n Here is the table of all attributes of voucher positions.<br> Necessary attributes, which must not be left out, are marked red.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>sumGross</span> or <span style='color:red'>sumNet</span></td> <td> The sum of the voucher position. You may provider both values. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the voucher position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>voucher</span></td> <td> The voucher to which the position belongs. </td> <td>Nested object (Voucher)</td> </tr> <tr> <td>comment</td> <td> A comment describing the position. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>net</span></td> <td> Define if the sum you provided is inclusive (false) or exclusive vat (true).<br> All positions must be either net or gross, a mixture of the two is not possible. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>accountDatev</span></td> <td> <b>Use this in sevdesk-Update 2.0 (replaces accountingType).</b><br> The account datev (booking account) for the voucher position. </td> <td>Nested object (AccountDatev)</td> </tr>           <tr> <td><span style='color:red'>accountingType</span></td> <td> The accounting type (booking account) for the voucher position. </td> <td>Nested object (AccountingType)</td> </tr>           </table>"
    x-displayName: VoucherPos
  - name: Report
    description: A set of operations to export data.
    x-displayName: Report
  - name: Tag
    description: |-

      # Purpose of Tag in sevdesk
       Tags are a tool to create groupings that can be attached to any invoice, order, voucher and  credit note.<br> The filter function can also be used with the help of the tags. It must be mentioned here that each  invoice, order, receipt and credit note can have more than one tag and the tag must therefore be passed  as an array.<br> An example of how to use a tag in invoices: <ul> <li><code>ht<span>tps://my.sevdesk.de/api/v1/Invoice?tags[0][id]={tagId}&tags[0][objectName]=Tag</span></code></li> </ul> 
      # Tag relation
       With the tag relations you can display all invoices, receipts, orders and credit notes that have a tag<br> The tag relation does not have to be created separately, as this is automatically created when a tag is created.<br> <br>
    x-displayName: Tag
paths:
  /Tools/bookkeepingSystemVersion:
    get:
      tags:
        - Basics
      summary: Retrieve bookkeeping system version
      description: >-
        To check if you already received the update to version 2.0 you can use
        this endpoint.
      operationId: bookkeepingSystemVersion
      responses:
        '200':
          description: Successful Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      version:
                        type: string
                        enum:
                          - '1.0'
                          - '2.0'
              example:
                objects:
                  version: '2.0'
        '401':
          description: Authentication required
      deprecated: false
      security:
        - api_key: []
  /CheckAccount:
    get:
      tags:
        - CheckAccount
      summary: Retrieve check accounts
      description: Retrieve all check accounts
      operationId: getCheckAccounts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_CheckAccountResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server error
      deprecated: false
      security:
        - api_key: []
    post:
      tags:
        - CheckAccount
      summary: Create a new check account
      description: Creates a new banking account on which transactions can be created.
      operationId: createCheckAccount
      requestBody:
        description: "Creation data. Please be aware, that you need to provide at least all required parameter\r\n    of the CheckAccount model!"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CheckAccount'
      responses:
        '201':
          description: Created - Returns created check account
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_CheckAccountResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server error
      deprecated: true
      security:
        - api_key: []
  /CheckAccount/Factory/fileImportAccount:
    post:
      tags:
        - CheckAccount
      summary: Create a new file import account
      description: Creates a new banking account for file imports (CSV, MT940).
      operationId: createFileImportAccount
      requestBody:
        description: Data to create a file import account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFileImportAccount'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  objects:
                    $ref: '#/components/schemas/createFileImportAccountResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Invalid value given
        '500':
          description: Server error
      security:
        - api_key: []
  /CheckAccount/Factory/clearingAccount:
    post:
      tags:
        - CheckAccount
      summary: Create a new clearing account
      description: Creates a new clearing account.
      operationId: createClearingAccount
      requestBody:
        description: Data to create a clearning account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createClearingAccount'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  objects:
                    $ref: '#/components/schemas/createClearingAccountResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Invalid value given
        '500':
          description: Server error
      security:
        - api_key: []
  /CheckAccount/{checkAccountId}:
    get:
      tags:
        - CheckAccount
      summary: Find check account by ID
      description: Retrieve an existing check account
      operationId: getCheckAccountById
      parameters:
        - name: checkAccountId
          in: path
          description: ID of check account
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_CheckAccountResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server error
      deprecated: false
      security:
        - api_key: []
    put:
      tags:
        - CheckAccount
      summary: Update an existing check account
      description: Update a check account
      operationId: updateCheckAccount
      parameters:
        - name: checkAccountId
          in: path
          description: ID of check account to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CheckAccountUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed check account resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_CheckAccountResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server error
      security:
        - api_key: []
    delete:
      tags:
        - CheckAccount
      summary: Deletes a check account
      operationId: deleteCheckAccount
      parameters:
        - name: checkAccountId
          in: path
          description: Id of check account to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - check account deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server error
      security:
        - api_key: []
  /CheckAccount/{checkAccountId}/getBalanceAtDate:
    get:
      tags:
        - CheckAccount
      summary: Get the balance at a given date
      description: >-
        Get the balance, calculated as the sum of all transactions sevdesk
        knows, up to and including the given date. Note that this balance does
        not have to be the actual bank account balance, e.g. if sevdesk did not
        import old transactions.
      operationId: getBalanceAtDate
      parameters:
        - name: checkAccountId
          in: path
          description: ID of check account
          required: true
          schema:
            type: integer
        - name: date
          in: query
          required: true
          description: Only consider transactions up to this date at 23:59:59
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: string
                    format: float
                    example: '105.56'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server error
      security:
        - api_key: []
  /CheckAccountTransaction:
    get:
      tags:
        - CheckAccountTransaction
      summary: Retrieve transactions
      description: Retrieve all transactions depending on the filters defined in the query.
      operationId: getTransactions
      parameters:
        - name: checkAccount[id]
          in: query
          description: >-
            Retrieve all transactions on this check account. Must be provided
            with checkAccount[objectName]
          required: false
          explode: false
          schema:
            type: integer
        - name: checkAccount[objectName]
          in: query
          description: >-
            Only required if checkAccount[id] was provided. 'CheckAccount'
            should be used as value.
          required: false
          explode: false
          schema:
            type: string
        - name: isBooked
          in: query
          description: Only retrieve booked transactions
          required: false
          explode: false
          schema:
            type: boolean
        - name: paymtPurpose
          in: query
          description: Only retrieve transactions with this payment purpose
          required: false
          explode: false
          schema:
            type: string
        - name: startDate
          in: query
          description: Only retrieve transactions from this date on
          required: false
          explode: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Only retrieve transactions up to this date
          required: false
          explode: false
          schema:
            type: string
            format: date-time
        - name: payeePayerName
          in: query
          description: Only retrieve transactions with this payee / payer
          required: false
          explode: false
          schema:
            type: string
        - name: onlyCredit
          in: query
          description: Only retrieve credit transactions
          required: false
          explode: false
          schema:
            type: boolean
        - name: onlyDebit
          in: query
          description: Only retrieve debit transactions
          required: false
          explode: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: >-
                        #/components/schemas/Model_CheckAccountTransactionResponse
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server error
      deprecated: false
      security:
        - api_key: []
    post:
      tags:
        - CheckAccountTransaction
      summary: Create a new transaction
      description: Creates a new transaction on a check account.
      operationId: createTransaction
      requestBody:
        description: "Creation data. Please be aware, that you need to provide at least all required parameter\r\n    of the CheckAccountTransaction model!"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CheckAccountTransaction'
      responses:
        '201':
          description: Created - Returns created transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_CheckAccountTransactionResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server error
      security:
        - api_key: []
  /CheckAccountTransaction/{checkAccountTransactionId}:
    get:
      tags:
        - CheckAccountTransaction
      summary: Find check account transaction by ID
      description: Retrieve an existing check account transaction
      operationId: getCheckAccountTransactionById
      parameters:
        - name: checkAccountTransactionId
          in: path
          description: ID of check account transaction
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: >-
                        #/components/schemas/Model_CheckAccountTransactionResponse
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server error
      deprecated: false
      security:
        - api_key: []
    put:
      tags:
        - CheckAccountTransaction
      summary: Update an existing check account transaction
      description: Update a check account transaction
      operationId: updateCheckAccountTransaction
      parameters:
        - name: checkAccountTransactionId
          in: path
          description: ID of check account to update transaction
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CheckAccountTransactionUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed check account resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_CheckAccountTransactionResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server error
      security:
        - api_key: []
    delete:
      tags:
        - CheckAccountTransaction
      summary: Deletes a check account transaction
      operationId: deleteCheckAccountTransaction
      parameters:
        - name: checkAccountTransactionId
          in: path
          description: Id of check account transaction to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - check account transaction deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server error
      security:
        - api_key: []
  /CheckAccountTransaction/{checkAccountTransactionId}/enshrine:
    put:
      tags:
        - CheckAccountTransaction
      summary: Enshrine
      description: >
        Sets the current date and time as a value for the property
        `enshrined`.<br>

        This operation is only possible if the status is "Linked" (`"status":
        "200"`) or higher.


        Linked invoices, credit notes or vouchers cannot be changed when the
        transaction is enshrined.
      operationId: checkAccountTransactionEnshrine
      parameters:
        - name: checkAccountTransactionId
          in: path
          description: ID of the transaction to enshrine
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /Contact/Factory/getNextCustomerNumber:
    get:
      tags:
        - Contact
      summary: Get next free customer number
      description: Retrieves the next available customer number. Avoids duplicates.
      operationId: getNextCustomerNumber
      responses:
        '200':
          description: Returns next available customer number
          content:
            application/json:
              schema:
                properties:
                  objects:
                    description: Next available customer number
                    type: string
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /Contact/Factory/findContactsByCustomFieldValue:
    get:
      tags:
        - Contact
      summary: Find contacts by custom field value
      description: Returns an array of contacts having a certain custom field value set.
      operationId: findContactsByCustomFieldValue
      parameters:
        - name: value
          in: query
          description: The value to be checked.
          required: true
          explode: true
          schema:
            type: string
        - name: customFieldSetting[id]
          in: query
          description: >-
            ID of ContactCustomFieldSetting for which the value has to be
            checked.
          required: false
          explode: true
          schema:
            type: string
        - name: customFieldSetting[objectName]
          in: query
          description: >-
            Object name. Only needed if you also defined the ID of a
            ContactCustomFieldSetting.
          required: false
          explode: true
          schema:
            type: string
            example: ContactCustomFieldSetting
        - name: customFieldName
          in: query
          description: >-
            The ContactCustomFieldSetting name, if no ContactCustomFieldSetting
            is provided.
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Array of contacts having a certain custom field value set.
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_ContactResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /Contact/Mapper/checkCustomerNumberAvailability:
    get:
      tags:
        - Contact
      summary: Check if a customer number is available
      description: Checks if a given customer number is available or already used.
      operationId: contactCustomerNumberAvailabilityCheck
      parameters:
        - name: customerNumber
          in: query
          description: The customer number to be checked.
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Returns whether given customer number is available.
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: boolean
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /Contact:
    get:
      tags:
        - Contact
      summary: Retrieve contacts
      description: "There are a multitude of parameter which can be used to filter.<br>\r\n     A few of them are attached but\r\n     for a complete list please check out <a href='#tag/Contact/How-to-filter-for-certain-contacts'>this</a> list"
      operationId: getContacts
      parameters:
        - name: depth
          in: query
          description: "Defines if both organizations <b>and</b> persons should be returned.<br>\r\n     '0' -> only organizations, '1' -> organizations and persons"
          required: false
          explode: true
          schema:
            type: string
            enum:
              - '0'
              - '1'
        - name: customerNumber
          in: query
          description: Retrieve all contacts with this customer number
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_ContactResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
    post:
      tags:
        - Contact
      summary: Create a new contact
      description: "Creates a new contact.<br>\r\n     For adding addresses and communication ways, you will need to use the ContactAddress and CommunicationWay endpoints."
      operationId: createContact
      requestBody:
        description: Creation data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_Contact'
      responses:
        '201':
          description: Created - Returns created contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ContactResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /Contact/{contactId}:
    get:
      tags:
        - Contact
      summary: Find contact by ID
      description: Returns a single contact
      operationId: getContactById
      parameters:
        - name: contactId
          in: path
          description: ID of contact to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_ContactResponse'
                type: object
        '400':
          description: Bad request. Contact was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - Contact
      summary: Update a existing contact
      description: Update a contact
      operationId: updateContact
      parameters:
        - name: contactId
          in: path
          description: ID of contact to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed contact resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ContactResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    delete:
      tags:
        - Contact
      summary: Deletes a contact
      operationId: deleteContact
      parameters:
        - name: contactId
          in: path
          description: Id of contact resource to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - contact deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Contact/{contactId}/getTabsItemCount:
    get:
      tags:
        - Contact
      summary: Get number of all items
      description: Get number of all invoices, orders, etc. of a specified contact
      operationId: getContactTabsItemCountById
      parameters:
        - name: contactId
          in: path
          description: ID of contact to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  orders:
                    type: number
                  invoices:
                    type: number
                  creditNotes:
                    type: number
                  documents:
                    type: number
                  persons:
                    type: number
                  vouchers:
                    type: number
                  letters:
                    type: number
                  parts:
                    type: string
                    example: '0'
                  invoicePos:
                    type: number
                type: object
        '400':
          description: Bad request.
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /ContactAddress:
    post:
      tags:
        - ContactAddress
      summary: Create a new contact address
      description: Creates a new contact address.
      operationId: createContactAddress
      requestBody:
        description: Creation data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactAddress'
      responses:
        '201':
          description: Created - Returns created contact address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ContactAddressResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
    get:
      tags:
        - ContactAddress
      summary: Retrieve contact addresses
      description: Retrieve all contact addresses
      operationId: getContactAddresses
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_ContactAddressResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /ContactAddress/{contactAddressId}:
    get:
      tags:
        - ContactAddress
      summary: Find contact address by ID
      description: Returns a single contact address
      operationId: contactAddressId
      parameters:
        - name: contactAddressId
          in: path
          description: ID of contact address to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_ContactAddressResponse'
                type: object
        '400':
          description: Bad request. Contact address was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - ContactAddress
      summary: update a existing contact address
      description: update a existing contact address.
      operationId: updateContactAddress
      parameters:
        - name: contactAddressId
          in: path
          description: ID of contact address to return
          required: true
          schema:
            type: integer
      requestBody:
        description: Creation data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactAddressUpdate'
      responses:
        '201':
          description: Created - Returns created contact address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ContactAddressResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
    delete:
      tags:
        - ContactAddress
      summary: Deletes a contact address
      operationId: deleteContactAddress
      parameters:
        - name: contactAddressId
          in: path
          description: Id of contact address resource to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - contact address deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /CommunicationWay:
    get:
      tags:
        - CommunicationWay
      summary: Retrieve communication ways
      description: >-
        Returns all communication ways which have been added up until now.
        Filters can be added.
      operationId: getCommunicationWays
      parameters:
        - name: contact[id]
          in: query
          description: ID of contact for which you want the communication ways.
          required: false
          explode: true
          schema:
            type: string
        - name: contact[objectName]
          in: query
          description: Object name. Only needed if you also defined the ID of a contact.
          required: false
          explode: true
          schema:
            type: string
            example: Contact
        - name: type
          in: query
          description: Type of the communication ways you want to get.
          required: false
          explode: true
          schema:
            type: string
            enum:
              - PHONE
              - EMAIL
              - WEB
              - MOBILE
        - name: main
          in: query
          description: Define if you only want the main communication way.
          required: false
          explode: true
          schema:
            type: string
            enum:
              - '0'
              - '1'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_CommunicationWayResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
    post:
      tags:
        - CommunicationWay
      summary: Create a new contact communication way
      description: Creates a new contact communication way.
      operationId: createCommunicationWay
      requestBody:
        description: Creation data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CommunicationWay'
      responses:
        '201':
          description: Created - Returns created contact communication way
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_CommunicationWayResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /CommunicationWay/{communicationWayId}:
    get:
      tags:
        - CommunicationWay
      summary: Find communication way by ID
      description: Returns a single communication way
      operationId: getCommunicationWayById
      parameters:
        - name: communicationWayId
          in: path
          description: ID of communication way to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_CommunicationWayResponse'
                type: object
        '400':
          description: Bad request. communication way was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    delete:
      tags:
        - CommunicationWay
      summary: Deletes a communication way
      operationId: deleteCommunicationWay
      parameters:
        - name: communicationWayId
          in: path
          description: Id of communication way resource to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - Communication way deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - CommunicationWay
      summary: Update a existing communication way
      description: Update a communication way
      operationId: UpdateCommunicationWay
      parameters:
        - name: communicationWayId
          in: path
          description: ID of CommunicationWay to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CommunicationWayUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed CommunicationWay resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_CommunicationWayResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CommunicationWayKey:
    get:
      tags:
        - CommunicationWay
      summary: Retrieve communication way keys
      description: Returns all communication way keys.
      operationId: getCommunicationWayKeys
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      properties:
                        id:
                          description: |-
                            The id of the communication way key
                            1. ID: 1 - Privat
                            2. ID: 2 - Arbeit
                            3. ID: 3 - Fax
                            4. ID: 4 - Mobil
                            5. ID: 5 - " "
                            6. ID: 6 - Autobox
                            7. ID: 7 - Newsletter
                            8. ID: 8 - Rechnungsadresse
                          type: string
                          example: '2'
                        objectName:
                          description: object name which is 'CommunicationWayKey'.
                          type: string
                          example: CommunicationWayKey
                        create:
                          description: Date the communication way key was created
                          type: string
                          format: date-time
                        upadate:
                          description: Date the communication way key was last updated
                          type: string
                          format: date-time
                        name:
                          description: Name of the communication way key
                          type: string
                          example: Arbeit
                          enum:
                            - Arbeit
                            - Autobox
                            - Fax
                            - Mobil
                            - Newsletter
                            - Privat
                            - Rechnungsadresse
                            - ' '
                        translationCode:
                          type: string
                          example: COMM_WAY_KEY_WORK
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /AccountingContact:
    get:
      tags:
        - AccountingContact
      summary: Retrieve accounting contact
      description: >-
        Returns all accounting contact which have been added up until now.
        Filters can be added.
      operationId: getAccountingContact
      parameters:
        - name: contact[id]
          in: query
          description: ID of contact for which you want the accounting contact.
          required: false
          explode: true
          schema:
            type: string
        - name: contact[objectName]
          in: query
          description: Object name. Only needed if you also defined the ID of a contact.
          required: false
          explode: true
          schema:
            type: string
            example: Contact
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_AccountingContactResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
    post:
      tags:
        - AccountingContact
      summary: Create a new accounting contact
      description: Creates a new accounting contact.
      operationId: createAccountingContact
      requestBody:
        description: Creation data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_AccountingContact'
      responses:
        '201':
          description: Created - Returns created accounting contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_AccountingContactResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /AccountingContact/{accountingContactId}:
    get:
      tags:
        - AccountingContact
      summary: Find accounting contact by ID
      description: Returns a single accounting contac
      operationId: getAccountingContactById
      parameters:
        - name: accountingContactId
          in: path
          description: ID of accounting contact to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_AccountingContactResponse'
                type: object
        '400':
          description: Bad request. Accounting contact was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - AccountingContact
      summary: Update an existing accounting contact
      description: >-
        Attention, updating an existing AccountingContact can lead to **booking
        errors**, especially in the **DATEV export**.

        Compatibility of sevdesk with DATEV is no longer guaranteed.
      operationId: updateAccountingContact
      parameters:
        - name: accountingContactId
          in: path
          description: ID of accounting contact to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_AccountingContactUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed accounting contact resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_AccountingContactResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    delete:
      tags:
        - AccountingContact
      summary: Deletes an accounting contact
      description: >-
        Attention, deleting an existing AccountingContact can lead to **booking
        errors**, especially in the **DATEV export**.

        Compatibility of sevdesk with DATEV is no longer guaranteed.
      operationId: deleteAccountingContact
      parameters:
        - name: accountingContactId
          in: path
          description: Id of accounting contact resource to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - accounting contact deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Textparser/fetchDictionaryEntriesByType:
    get:
      tags:
        - ContactField
      summary: Retrieve Placeholders
      description: Retrieve all Placeholders
      operationId: getPlaceholder
      parameters:
        - name: objectName
          in: query
          description: Model name
          required: true
          schema:
            type: string
            enum:
              - Invoice
              - CreditNote
              - Order
              - Contact
              - Letter
              - Email
        - name: subObjectName
          in: query
          description: Sub model name, required if you have "Email" at objectName
          required: false
          schema:
            type: string
            enum:
              - Invoice
              - CreditNote
              - Order
              - Contact
              - Letter
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: >-
                        #/components/schemas/Model_Textparser_fetchDictionaryEntriesByType_response
                type: object
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /ContactCustomField:
    get:
      tags:
        - ContactField
      summary: Retrieve contact fields
      description: Retrieve all contact fields
      operationId: getContactFields
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_ContactCustomFieldResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    post:
      tags:
        - ContactField
      summary: Create contact field
      description: Create contact field
      operationId: createContactField
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactCustomField'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ContactCustomFieldResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /ContactCustomField/{contactCustomFieldId}:
    get:
      tags:
        - ContactField
      summary: Retrieve contact fields
      description: Retrieve all contact fields
      operationId: getContactFieldsById
      parameters:
        - name: contactCustomFieldId
          in: path
          description: id of the contact field
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_ContactCustomFieldResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - ContactField
      summary: Update a contact field
      description: Update a contact field
      operationId: updateContactfield
      parameters:
        - name: contactCustomFieldId
          in: path
          description: id of the contact field
          required: true
          schema:
            type: number
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactCustomFieldUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ContactCustomFieldResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    delete:
      tags:
        - ContactField
      summary: delete a contact field
      operationId: deleteContactCustomFieldId
      parameters:
        - name: contactCustomFieldId
          in: path
          description: Id of contact field
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /ContactCustomFieldSetting:
    get:
      tags:
        - ContactField
      summary: Retrieve contact field settings
      description: Retrieve all contact field settings
      operationId: getContactFieldSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: >-
                        #/components/schemas/Model_ContactCustomFieldSettingResponse
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    post:
      tags:
        - ContactField
      summary: Create contact field setting
      description: Create contact field setting
      operationId: createContactFieldSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactCustomFieldSetting'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: >-
                        #/components/schemas/Model_ContactCustomFieldSettingResponse
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /ContactCustomFieldSetting/{contactCustomFieldSettingId}:
    get:
      tags:
        - ContactField
      summary: Find contact field setting by ID
      description: Returns a single contact field setting
      operationId: getContactFieldSettingById
      parameters:
        - name: contactCustomFieldSettingId
          in: path
          description: ID of contact field to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: >-
                        #/components/schemas/Model_ContactCustomFieldSettingResponse
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - ContactField
      summary: Update contact field setting
      description: Update an existing contact field  setting
      operationId: updateContactFieldSetting
      parameters:
        - name: contactCustomFieldSettingId
          in: path
          description: ID of contact field setting you want to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactCustomFieldSettingUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ContactCustomFieldSettingResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    delete:
      tags:
        - ContactField
      summary: Deletes a contact field setting
      operationId: deleteContactFieldSetting
      parameters:
        - name: contactCustomFieldSettingId
          in: path
          description: Id of contact field to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - contact field deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /ContactCustomFieldSetting/{contactCustomFieldSettingId}/getReferenceCount:
    get:
      tags:
        - ContactField
      summary: Receive count reference
      description: Receive count reference
      operationId: getReferenceCount
      parameters:
        - name: contactCustomFieldSettingId
          in: path
          description: ID of contact field you want to get the reference count
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - contact field deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    description: the count of all references
                    type: integer
                    example: 1
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote:
    get:
      tags:
        - CreditNote
      summary: Retrieve CreditNote
      description: There are a multitude of parameter which can be used to filter.
      operationId: getCreditNotes
      parameters:
        - name: status
          in: query
          description: Status of the CreditNote
          required: false
          explode: true
          schema:
            type: string
            enum:
              - '100'
              - '200'
              - '300'
              - '500'
              - '750'
              - '1000'
        - name: creditNoteNumber
          in: query
          description: Retrieve all CreditNotes with this creditNote number
          required: false
          explode: true
          schema:
            type: string
        - name: startDate
          in: query
          description: Retrieve all CreditNotes with a date equal or higher
          required: false
          explode: true
          example: 01.01.2020
          schema:
            type: integer
        - name: endDate
          in: query
          description: Retrieve all CreditNotes with a date equal or lower
          required: false
          explode: true
          example: 01.01.2021
          schema:
            type: integer
        - name: contact[id]
          in: query
          description: >-
            Retrieve all CreditNotes with this contact. Must be provided with
            contact[objectName]
          required: false
          explode: false
          schema:
            type: integer
        - name: contact[objectName]
          in: query
          description: >-
            Only required if contact[id] was provided. 'Contact' should be used
            as value.
          required: false
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_creditNoteResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /CreditNote/Factory/saveCreditNote:
    post:
      tags:
        - CreditNote
      summary: Create a new creditNote
      description: >-
        The list of parameters starts with the credit note array.<br> This array
        contains all required attributes for a complete credit note.<br> Most of
        the attributes are covered in the credit note attribute list, there are
        only two parameters standing out, namely <b>mapAll</b> and
        <b>objectName</b>.<br> These are just needed for our system and you
        always need to provide them.<br> The list of parameters then continues
        with the credit note position array.<br> With this array you have the
        possibility to add multiple positions at once.<br> In the example it
        only contains one position, again together with the parameters
        <b>mapAll</b> and <b>objectName</b>, however, you can add more credit
        note positions by extending the array.<br> So if you wanted to add
        another position, you would add the same list of parameters with an
        incremented array index of "1" instead of "0".<br><br> The list ends
        with the five parameters creditNotePosDelete, discountSave,
        discountDelete, takeDefaultAddress and forCashRegister.<br> They only
        play a minor role if you only want to create a credit note but we will
        shortly explain what they can do.<br> With creditNotePosDelete you have
        to option to delete credit note positions as this request can also be
        used to update credit notes.<br> Both discount parameters are deprecated
        and have no use for credit notes, however they need to be provided in
        case you want to use the following two parameters.<br> With
        takeDefaultAddress you can specify that the first address of the contact
        you are using for the credit note is taken for the credit note address
        attribute automatically, so you don't need to provide the address
        yourself.<br> Finally, the forCashRegister parameter needs to be set to
        <b>true</b> if your credit note is to be booked on the cash
        register.<br> If you want to know more about these parameters, for
        example if you want to use this request to update credit notes, feel
        free to contact our support.<br> Finally, after covering all parameters,
        they only important information left, is that the order of the last five
        attributes always needs to be kept.<br> You will also always need to
        provide all of them, as otherwise the request won't work properly.
      operationId: createcreditNote
      requestBody:
        description: "Creation data. Please be aware, that you need to provide at least all required parameter\r\n    of the credit note model!"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveCreditNote'
      responses:
        '201':
          description: Created - Returns created credit note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveCreditNoteResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/Factory/createFromInvoice:
    post:
      tags:
        - CreditNote
      summary: Creates a new creditNote from an invoice
      description: Use this endpoint to create a new creditNote from an invoice.
      operationId: createCreditNoteFromInvoice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - invoice
              properties:
                invoice:
                  type: object
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: The id of the existing invoice
                      type: integer
                      example: 1234
                    objectName:
                      description: The objectName must be 'Invoice'
                      type: string
                      example: Invoice
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      creditNote:
                        $ref: '#/components/schemas/Model_creditNoteResponse'
                      creditNotePos:
                        description: An array of creditNote positions
                        type: array
                        items:
                          $ref: '#/components/schemas/Model_creditNotePosResponse'
                      discount:
                        description: An array of discounts (can be empty)
                        type: array
                        items:
                          $ref: '#/components/schemas/Model_discountsResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/Factory/createFromVoucher:
    post:
      tags:
        - CreditNote
      summary: Creates a new creditNote from a voucher
      description: |
        **Not supported with sevdesk-Update 2.0**

        Use this endpoint to create a new creditNote from a voucher.
      operationId: createCreditNoteFromVoucher
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - voucher
              properties:
                voucher:
                  type: object
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: The id of the existing Voucher
                      type: integer
                      example: 1234
                    objectName:
                      description: The objectName must be 'Voucher'
                      type: string
                      example: Voucher
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      creditNote:
                        $ref: '#/components/schemas/Model_creditNoteResponse'
                      creditNotePos:
                        description: An array of creditNote positions
                        type: array
                        items:
                          $ref: '#/components/schemas/Model_creditNotePosResponse'
                      discount:
                        description: An array of discounts (can be empty)
                        type: array
                        items:
                          $ref: '#/components/schemas/Model_discountsResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}:
    get:
      tags:
        - CreditNote
      summary: Find creditNote by ID
      description: Returns a single creditNote
      operationId: getcreditNoteById
      parameters:
        - name: creditNoteId
          in: path
          description: ID of creditNote to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_creditNoteResponse'
                type: object
        '400':
          description: Bad request. creditNote was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - CreditNote
      summary: Update an existing creditNote
      description: Update a creditNote
      operationId: updatecreditNote
      parameters:
        - name: creditNoteId
          in: path
          description: ID of creditNote to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_creditNoteUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed creditNote resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_creditNoteResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    delete:
      tags:
        - CreditNote
      summary: Deletes an creditNote
      operationId: deletecreditNote
      parameters:
        - name: creditNoteId
          in: path
          description: Id of creditNote resource to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - creditNote deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict - f.e occurs if the creditNote is not a draft
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}/sendByWithRender:
    get:
      tags:
        - CreditNote
      summary: Send credit note by printing
      description: >-
        Sending a credit note to end-customers is an important part of the
        bookkeeping process.<br> Depending on the way you want to send the
        credit note, you need to use different endpoints.<br> Let's start with
        just printing out the credit note, meaning we only need to render the
        pdf.
      operationId: sendCreditNoteByPrinting
      parameters:
        - name: creditNoteId
          in: path
          description: ID of creditNote to return
          required: true
          schema:
            type: integer
        - name: sendType
          in: query
          description: the type you want to print.
          schema:
            type: string
          example: PRN
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_CreditNote_sendByWithRender'
        '400':
          description: Bad request.
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}/sendBy:
    put:
      tags:
        - CreditNote
      summary: Mark credit note as sent
      description: Marks an credit note as sent by a chosen send type.
      operationId: creditNoteSendBy
      parameters:
        - name: creditNoteId
          in: path
          description: ID of credit note to mark as sent
          required: true
          schema:
            type: integer
      requestBody:
        description: Specify the send type
        content:
          application/json:
            schema:
              required:
                - sendType
                - sendDraft
              properties:
                sendType:
                  description: "Specifies the way in which the credit note was sent to the customer.<br>\r\n     Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd)."
                  type: string
                  enum:
                    - VPR
                    - VP
                    - VM
                    - VPDF
                  example: VPDF
                sendDraft:
                  description: >-
                    To create a draft of a credit note for internal use. This
                    operation will not alter the status of the credit note or
                    create bookings for reports.
                  type: boolean
                  example: false
              type: object
      responses:
        '200':
          description: Successful operation - Returns changed credit note log entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_creditNoteResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}/enshrine:
    put:
      tags:
        - CreditNote
      summary: Enshrine
      description: >
        Sets the current date and time as a value for the property
        `enshrined`.<br>

        This operation is only possible if the status is "Open" (`"status":
        "200"`) or higher.


        Enshrined credit notes cannot be changed. This operation cannot be
        undone.
      operationId: creditNoteEnshrine
      parameters:
        - name: creditNoteId
          in: path
          description: ID of the credit note to enshrine
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}/getPdf:
    get:
      tags:
        - CreditNote
      summary: Retrieve pdf document of a credit note
      description: Retrieves the pdf document of a credit note with additional metadata.
      operationId: creditNoteGetPdf
      parameters:
        - name: creditNoteId
          in: path
          description: ID of credit note from which you want the pdf
          required: true
          schema:
            type: integer
        - name: download
          in: query
          description: If u want to download the pdf of the credit note.
          schema:
            type: boolean
          example: true
        - name: preventSendBy
          in: query
          description: Defines if u want to send the credit note.
          schema:
            type: boolean
          example: true
      responses:
        '200':
          description: A pdf file
          content:
            application/json:
              schema:
                properties:
                  filename:
                    type: string
                    example: GU-1001.pdf
                  mimeType:
                    type: string
                    example: application/pdf
                  base64encoded:
                    type: boolean
                    example: true
                  content:
                    type: string
                    format: binary
                type: object
        '400':
          description: Bad request. Invoice was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}/sendViaEmail:
    post:
      tags:
        - CreditNote
      summary: Send credit note via email
      description: "This endpoint sends the specified credit note to a customer via email.<br>\r\n    This will automatically mark the credit note as sent.<br>\r\n    Please note, that in production an credit note is not allowed to be changed after this happened!"
      operationId: sendCreditNoteViaEMail
      parameters:
        - name: creditNoteId
          in: path
          description: ID of credit note to be sent via email
          required: true
          schema:
            type: integer
      requestBody:
        description: Mail data
        content:
          application/json:
            schema:
              required:
                - toEmail
                - subject
                - text
              properties:
                toEmail:
                  description: The recipient of the email.
                  type: string
                  nullable: false
                subject:
                  description: The subject of the email.
                  type: string
                  nullable: false
                text:
                  description: The text of the email. Can contain html.
                  type: string
                copy:
                  description: Should a copy of this email be sent to you?
                  type: boolean
                additionalAttachments:
                  description: "Additional attachments to the mail. String of IDs of existing documents in your\r\n     *                      sevdesk account separated by ','"
                  type: string
                ccEmail:
                  description: String of mail addresses to be put as cc separated by ','
                  type: string
                bccEmail:
                  description: String of mail addresses to be put as bcc separated by ','
                  type: string
              type: object
      responses:
        '201':
          description: Created - Returns created mail object
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_creditNote_mailResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}/bookAmount:
    put:
      tags:
        - CreditNote
      summary: Book a credit note
      description: >-
        Booking the credit note with a transaction is probably the most
        important part in the bookkeeping process.<br> There are several ways on
        correctly booking a credit note, all by using the same endpoint.<br>
        Conveniently, the booking process is exactly the same as the process for
        invoices and vouchers.<br> For this reason, you can have a look at it in
        the <a href='#tag/Invoice/How-to-book-an-invoice'>invoice chapter</a>
        and all you need to do is to change "Invoice" into "CreditNote" in the
        URL.
      operationId: bookCreditNote
      parameters:
        - name: creditNoteId
          in: path
          description: ID of credit note to book
          required: true
          schema:
            type: integer
      requestBody:
        description: Booking data
        content:
          application/json:
            schema:
              required:
                - amount
                - date
                - type
                - checkAccount
              properties:
                amount:
                  description: Amount which should be booked. Can also be a partial amount.
                  type: number
                date:
                  description: The booking date. Most likely the current date.
                  type: integer
                type:
                  description: "Define a type for the booking.<br>\r\n    The following type abbreviations are available (abbreviation <-> meaning).<br>\r\n    <ul>\r\n    <li>N <-> Normal booking / partial booking</li>\r\n    <li>CB <-> Reduced amount due to discount (skonto)</li>\r\n    <li>CF <-> Reduced/Higher amount due to currency fluctuations (deprecated)</li>\r\n    <li>O <-> Reduced/Higher amount due to other reasons</li>\r\n    <li>OF <-> Higher amount due to reminder charges</li>\r\n    <li>MTC <-> Reduced amount due to the monetary traffic costs</li>\r\n    </ul>"
                  type: string
                  enum:
                    - 'N'
                    - CB
                    - CF
                    - O
                    - OF
                    - MTC
                checkAccount:
                  description: The check account on which should be booked.
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: The id of the check account on which should be booked.
                      type: integer
                    objectName:
                      description: Internal object name which is 'CheckAccount'.
                      type: string
                      example: CheckAccount
                  type: object
                checkAccountTransaction:
                  description: "The check account transaction on which should be booked.<br>\r\n    The transaction will be linked to the credit note."
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: >-
                        The id of the check account transaction on which should
                        be booked.
                      type: integer
                    objectName:
                      description: Internal object name which is 'CheckAccountTransaction'.
                      type: string
                      example: CheckAccountTransaction
                  type: object
                createFeed:
                  description: Determines if a feed is created for the booking process.
                  type: boolean
              type: object
      responses:
        '200':
          description: Successful operation - Returns changed invoice log entry
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 2
                  objectName:
                    type: string
                    example: CreditNoteLog
                  additionalInformation:
                    type: string
                    default: null
                  create:
                    description: Date of email creation
                    type: string
                    format: date-time
                    example: '2023-04-18T15:45:38+02:00'
                  creditNote:
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: The id of the credit note
                        type: integer
                        example: 2
                      objectName:
                        description: Internal object name which is 'CreditNote'.
                        type: string
                        example: CreditNote
                  fromStatus:
                    type: string
                    example: 200
                  toStatus:
                    type: string
                    example: 1000
                  ammountPayed:
                    type: string
                    example: 0
                  bookingDate:
                    type: string
                    format: date-time
                    example: '2023-04-18T15:45:38+02:00'
                  sevClient:
                    type: object
                    description: >-
                      Client to which creditNote belongs. Will be filled
                      automatically
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: Unique identifier of the client
                        type: integer
                        example: 1
                      objectName:
                        description: Model name, which is 'SevClient'
                        type: string
                        example: SevClient
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}/resetToOpen:
    put:
      tags:
        - CreditNote
      summary: Reset status to open
      description: >
        Resets the status "Open" (`"status": "200"`). Linked transactions will
        be unlinked.<br>

        This is not possible if the credit note itself or one of its
        transactions (CheckAccountTransaction) is already enshrined.


        This endpoint cannot be used to increase the status to "Open"
        (`"status": "200"`).<br>

        Use
        [CreditNote/{creditNoteId}/sendBy](#tag/CreditNote/operation/creditNoteSendBy)
        /
        [CreditNote/{creditNoteId}/sendViaEmail](#tag/CreditNote/operation/sendCreditNoteViaEMail)
        instead.
      operationId: creditNoteResetToOpen
      parameters:
        - name: creditNoteId
          in: path
          description: ID of the credit note to reset
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - Returns changed credit note
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    allOf:
                      - $ref: '#/components/schemas/Model_creditNoteResponse'
                      - type: object
                        properties:
                          status:
                            example: '200'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}/resetToDraft:
    put:
      tags:
        - CreditNote
      summary: Reset status to draft
      description: >
        Resets the status to "Draft" (`"status": "100"`).<br>

        This is only possible if the credit note has the status "Open"
        (`"status": "200"`).<br>

        If it has a higher status use
        [CreditNote/{creditNoteId}/resetToOpen](#tag/CreditNote/operation/creditNoteResetToOpen)
        first.
      operationId: creditNoteResetToDraft
      parameters:
        - name: creditNoteId
          in: path
          description: ID of the credit note to reset
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - Returns changed credit note
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    allOf:
                      - $ref: '#/components/schemas/Model_creditNoteResponse'
                      - type: object
                        properties:
                          taxText:
                            example: null
                          customerInternalNote:
                            example: null
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNotePos:
    get:
      tags:
        - CreditNotePos
      summary: Retrieve creditNote positions
      description: >-
        Retrieve all creditNote positions depending on the filters defined in
        the query.
      operationId: getcreditNotePositions
      parameters:
        - name: creditNote[id]
          in: query
          description: >-
            Retrieve all creditNote positions belonging to this creditNote. Must
            be provided with creditNote[objectName]
          required: false
          explode: false
          schema:
            type: integer
        - name: creditNote[objectName]
          in: query
          description: >-
            Only required if creditNote[id] was provided. 'creditNote' should be
            used as value.
          required: false
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_creditNotePosResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /SevClient/{SevClientId}/updateExportConfig:
    put:
      tags:
        - Export
      summary: Update export config
      description: Update export config to export datev CSV
      operationId: updateExportConfig
      parameters:
        - name: SevClientId
          in: path
          description: id of sevClient
          required: true
          schema:
            type: number
      requestBody:
        description: Specify the update
        content:
          application/json:
            schema:
              required:
                - accountantNumber
                - accountantClientNumber
                - accountingYearBegin
              properties:
                accountantNumber:
                  type: number
                  example: 1324124
                accountantClientNumber:
                  type: number
                  example: 1234152
                accountingYearBegin:
                  type: number
                  format: timestamp
                  example: 1681907569
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Export/datevCSV:
    get:
      summary: Export datev
      description: >-
        Datev export as zip with csv´s. Before you can perform the datev export,
        you must first set the "accountingYearBegin". To do this, you must use
        the <a
        href='#tag/Export/operation/updateExportConfig'>updateExportConfig</a>
        endpoint.
      operationId: exportDatev
      tags:
        - Export
      parameters:
        - name: Download
          in: query
          description: Specifies if the document is downloaded
          schema:
            type: boolean
          example: true
        - name: startDate
          in: query
          description: the start date of the export as timestamp
          schema:
            type: integer
          required: true
          example: 1641032867
        - name: endDate
          in: query
          description: the end date of the export as timestamp
          schema:
            type: integer
          required: true
          example: 1648805267
        - name: scope
          in: query
          description: >-
            Define what you want to include in the datev export. This parameter
            takes a string of 5 letters. Each stands for a model that should be
            included. Possible letters are: ‘E’ (Earnings), ‘X’ (Expenditure),
            ‘T’ (Transactions), ‘C’ (Cashregister), ‘D’ (Assets). By providing
            one of those letter you specify that it should be included in the
            datev export. Some combinations are: ‘EXTCD’, ‘EXTD’ …
          schema:
            type: string
          required: true
          example: EXTCD
        - name: withUnpaidDocuments
          in: query
          description: include unpaid documents
          schema:
            type: boolean
          example: true
        - name: withEnshrinedDocuments
          in: query
          description: include enshrined documents
          schema:
            type: boolean
          example: true
        - name: enshrine
          in: query
          description: >-
            Specify if you want to enshrine all models which were included in
            the export
          schema:
            type: boolean
          example: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Export/invoiceCsv:
    get:
      summary: Export invoice
      description: Export all invoices as csv
      operationId: exportInvoice
      tags:
        - Export
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name, which is 'Invoice'
                example: Invoice
              objectName:
                description: Model name, which is 'SevQuery'
                example: SevQuery
              filter:
                type: object
                properties:
                  invoiceType:
                    type: array
                    description: |-
                      Type of invoices you want to export
                      1. RE - Rechnung
                      2. SR - Stornorechnung
                      3. TR - Teilrechnung
                      4. AR - Abschlagsrechnung
                      5. ER - Endrechnung
                      6. WKR - Wiederkehrende Rechnung
                      7. MA - Mahnung
                    items:
                      enum:
                        - Re
                        - SR
                        - TR
                        - AR
                        - ER
                        - WKR
                        - MA
                  startDate:
                    description: Start date of the invoice
                    type: string
                    format: date-time
                  endDate:
                    description: End date of the invoice
                    type: string
                    format: date-time
                  contact:
                    description: filters the invoices by contact
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: ID of the contact
                        type: integer
                      objectName:
                        description: Model name, which is 'Contact'
                        type: string
                        example: Contact
                  startAmount:
                    description: filters the invoices by amount
                    type: integer
                    example: 100
                  endAmount:
                    description: filters the invoices by amount
                    type: integer
                    example: 150
      responses:
        '200':
          description: Successful operation without download
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: invoices.csv
                      mimetype:
                        type: string
                        example: text/csv
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Export/invoiceZip:
    get:
      summary: Export Invoice as zip
      description: Export all invoices as zip
      operationId: exportInvoiceZip
      tags:
        - Export
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name, which is 'Invoice'
              objectName:
                description: Model name, which is 'SevQuery'
                example: SevQuery
              filter:
                type: object
                properties:
                  invoiceType:
                    type: array
                    description: |-
                      Type of invoices you want to export
                      1. RE - Rechnung
                      2. SR - Stornorechnung
                      3. TR - Teilrechnung
                      4. AR - Abschlagsrechnung
                      5. ER - Endrechnung
                      6. WKR - Wiederkehrende Rechnung
                      7. MA - Mahnung
                    items:
                      enum:
                        - Re
                        - SR
                        - TR
                        - AR
                        - ER
                        - WKR
                        - MA
                  startDate:
                    description: Start date of the invoice
                    type: string
                    format: date-time
                  endDate:
                    description: End date of the invoice
                    type: string
                    format: date-time
                  contact:
                    description: filters the invoices by contact
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: ID of the contact
                        type: integer
                      objectName:
                        description: Model name, which is 'Contact'
                        type: string
                        example: Contact
                  startAmount:
                    description: filters the invoices by amount
                    type: integer
                    example: 100
                  endAmount:
                    description: filters the invoices by amount
                    type: integer
                    example: 150
      responses:
        '200':
          description: Successful operation without download
          content:
            application/json:
              schema:
                description: Response without Download
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: Rechnungen_19.04.23.zip
                      mimetype:
                        type: string
                        example: application/zip
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
                        default: null
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Export/creditNoteCsv:
    get:
      summary: Export creditNote
      description: Export all credit notes as csv
      operationId: exportCreditNote
      tags:
        - Export
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name, which is 'CreditNote'
                example: CreditNote
              objectName:
                description: Model name, which is 'SevQuery'
                example: SevQuery
              filter:
                type: object
                properties:
                  startDate:
                    description: Start date of the credit note
                    type: string
                    format: date-time
                  endDate:
                    description: End date of the credit note
                    type: string
                    format: date-time
                  contact:
                    description: filters the credit notes by contact
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: ID of the contact
                        type: integer
                      objectName:
                        description: Model name, which is 'Contact'
                        type: string
                        example: Contact
                  startAmount:
                    description: filters the credit notes by amount
                    type: integer
                    example: 100
                  endAmount:
                    description: filters the credit notes by amount
                    type: integer
                    example: 150
      responses:
        '200':
          description: Successful operation with download
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: creditNote.csv
                      mimetype:
                        type: string
                        example: text/csv
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Export/voucherListCsv:
    get:
      summary: Export voucher as zip
      description: Export all vouchers as zip
      operationId: exportVoucher
      tags:
        - Export
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name, which is 'Voucher'
                example: Voucher
              objectName:
                description: Model name, which is 'SevQuery'
                example: SevQuery
              filter:
                type: object
                properties:
                  startDate:
                    description: Start date of the voucher
                    type: string
                    format: date-time
                  endDate:
                    description: End date of the voucher
                    type: string
                    format: date-time
                  startPayDate:
                    description: Start pay date of the voucher
                    type: string
                    format: date-time
                  endPayDate:
                    description: End pay date of the voucher
                    type: string
                    format: date-time
                  contact:
                    description: filters the vouchers by contact
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: ID of the contact
                        type: integer
                      objectName:
                        description: Model name, which is 'Contact'
                        type: string
                        example: Contact
                  startAmount:
                    description: filters the vouchers by amount
                    type: integer
                    example: 100
                  endAmount:
                    description: filters the vouchers by amount
                    type: integer
                    example: 150
      responses:
        '200':
          description: Successful operation without download
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                    example: Gutschrift_19.04.23.zip
                  mimetype:
                    type: string
                    example: application/zip
                  base64Encoded:
                    type: boolean
                    example: true
                  content:
                    type: string
                    default: null
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Export/transactionsCsv:
    get:
      summary: Export transaction
      description: Export all transactions as csv
      operationId: exportTransactions
      tags:
        - Export
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name, which is 'CheckAccountTransaction'
                example: CheckAccountTransaction
              objectName:
                description: Model name, which is 'SevQuery'
                example: SevQuery
              filter:
                type: object
                properties:
                  paymtPurpose:
                    description: the payment purpose
                    type: string
                    example: salary
                  name:
                    description: the name of the payee/payer
                    type: string
                    example: Cercei Lannister
                  startDate:
                    description: Start date of the transactions
                    type: string
                    format: date-time
                  endDate:
                    description: End date of the transactions
                    type: string
                    format: date-time
                  startAmount:
                    description: filters the transactions by amount
                    type: integer
                    example: 100
                  endAmount:
                    description: filters the transactions by amount
                    type: integer
                    example: 150
                  checkAccount:
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: Id of the checkAccount
                        type: integer
                        example: 1
                      objectName:
                        description: Model name, which is 'CheckAccount'
                        type: string
                        example: CheckAccount
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: transaction.csv
                      mimetype:
                        type: string
                        example: text/csv
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Export/voucherZip:
    get:
      summary: Export voucher zip
      description: export all vouchers as zip
      operationId: exportVoucherZip
      tags:
        - Export
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name, which is 'Voucher'
                example: Voucher
              objectName:
                description: Model name, which is 'SevQuery'
                example: SevQuery
              filter:
                type: object
                properties:
                  startDate:
                    description: Start date of the voucher
                    type: string
                    format: date-time
                  endDate:
                    description: End date of the voucher
                    type: string
                    format: date-time
                  startPayDate:
                    description: Start pay date of the voucher
                    type: string
                    format: date-time
                  endPayDate:
                    description: End pay date of the voucher
                    type: string
                    format: date-time
                  contact:
                    description: filters the vouchers by contact
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: ID of the contact
                        type: integer
                        example: 1
                      objectName:
                        description: Model name, which is 'Contact'
                        type: string
                        example: Contact
                  startAmount:
                    description: filters the vouchers by amount
                    type: integer
                    example: 100
                  endAmount:
                    description: filters the vouchers by amount
                    type: integer
                    example: 150
      responses:
        '200':
          description: Successful operation without download
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: Belege_19.04.23.zip
                      mimetype:
                        type: string
                        example: application/zip
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
                        default: null
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Export/contactListCsv:
    get:
      summary: Export contact
      description: Contact export as csv
      operationId: exportContact
      tags:
        - Export
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name, which is 'Contact'
                example: Contact
              objectName:
                description: Model name, which is 'SevQuery'
                example: SevQuery
              filter:
                type: object
                properties:
                  zip:
                    description: filters the contacts by zip code
                    type: integer
                    example: 77656
                  city:
                    description: filters the contacts by city
                    type: string
                    example: Offenburg
                  country:
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: id of the country
                        type: integer
                        example: 1
                      objectName:
                        description: Model name, which is 'StaticCountry'
                        type: string
                        example: StaticCountry
                  depth:
                    description: export only organisations
                    type: boolean
                  onlyPeople:
                    description: export only people
                    type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: contacts.csv
                      mimetype:
                        type: string
                        example: text/csv
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Part:
    get:
      tags:
        - Part
      summary: Retrieve parts
      description: >-
        Retrieve all parts in your sevdesk inventory according to the applied
        filters.
      operationId: getParts
      parameters:
        - name: partNumber
          in: query
          description: Retrieve all parts with this part number
          required: false
          explode: false
          schema:
            type: string
        - name: name
          in: query
          description: Retrieve all parts with this name
          required: false
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_Part'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
    post:
      tags:
        - Part
      summary: Create a new part
      description: Creates a part in your sevdesk inventory.
      operationId: createPart
      requestBody:
        description: "Creation data. Please be aware, that you need to provide at least all required parameter\r\n    of the part model!"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_Part'
      responses:
        '201':
          description: Created - Returns created part
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_Part'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Part/{partId}:
    get:
      tags:
        - Part
      summary: Find part by ID
      description: Returns a single part
      operationId: getPartById
      parameters:
        - name: partId
          in: path
          description: ID of part to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_Part'
                type: object
        '400':
          description: Bad request. Part was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - Part
      summary: Update an existing part
      description: Update a part
      operationId: updatePart
      parameters:
        - name: partId
          in: path
          description: ID of part to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_PartUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed part resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_Part'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Part/{partId}/getStock:
    get:
      tags:
        - Part
      summary: Get stock of a part
      description: Returns the current stock amount of the given part.
      operationId: partGetStock
      parameters:
        - name: partId
          in: path
          description: ID of part for which you want the current stock.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    description: Stock amount
                    type: integer
                    example: 10
                type: object
        '400':
          description: Bad request. Part was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice:
    get:
      tags:
        - Invoice
      summary: Retrieve invoices
      description: "There are a multitude of parameter which can be used to filter. A few of them are attached but\r\n     for a complete list please check out <a href='#tag/Invoice/How-to-filter-for-certain-invoices'>this</a> list"
      operationId: getInvoices
      parameters:
        - name: status
          in: query
          description: Status of the invoices
          required: false
          schema:
            type: number
            enum:
              - 100
              - 200
              - 1000
        - name: invoiceNumber
          in: query
          description: Retrieve all invoices with this invoice number
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: Retrieve all invoices with a date equal or higher
          required: false
          schema:
            type: integer
        - name: endDate
          in: query
          description: Retrieve all invoices with a date equal or lower
          required: false
          schema:
            type: integer
        - name: contact[id]
          in: query
          description: >-
            Retrieve all invoices with this contact. Must be provided with
            contact[objectName]
          required: false
          schema:
            type: integer
        - name: contact[objectName]
          in: query
          description: >-
            Only required if contact[id] was provided. 'Contact' should be used
            as value.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_InvoiceResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /Invoice/Factory/saveInvoice:
    post:
      tags:
        - Invoice
      summary: Create a new invoice
      description: "This endpoint offers you the following functionality.\r\n     <ul>\r\n        <li>Create invoices together with positions and discounts</li>\r\n        <li>Delete positions while adding new ones</li>\r\n        <li>Delete or add discounts, or both at the same time</li>\r\n        <li>Automatically fill the address of the supplied contact into the invoice address</li>\r\n     </ul>\r\n     To make your own request sample slimmer, you can omit all parameters which are not required and nullable.\r\n     However, for a valid and logical bookkeeping document, you will also need some of them to ensure that all the necessary data is in the invoice.<br><br> The list of parameters starts with the invoice array.<br> This array contains all required attributes for a complete invoice.<br> Most of the attributes are covered in the invoice attribute list, there are only two parameters standing out, namely <b>mapAll</b> and <b>objectName</b>.<br> These are just needed for our system and you always need to provide them.<br><br> The list of parameters then continues with the invoice position array.<br> With this array you have the possibility to add multiple positions at once.<br> In the example it only contains one position, again together with the parameters <b>mapAll</b> and <b>objectName</b>, however, you can add more invoice positions by extending the array.<br> So if you wanted to add another position, you would add the same list of parameters with an incremented array index of \"1\" instead of \"0\".<br><br> The list ends with the four parameters invoicePosDelete, discountSave, discountDelete and takeDefaultAddress.<br> They only play a minor role if you only want to create an invoice but we will shortly explain what they can do.<br> With invoicePosDelete you have to option to delete invoice positions as this request can also be used to update invoices.<br> With discountSave you can add discounts to your invoice.<br> With discountDelete you can delete discounts from your invoice.<br> With takeDefaultAddress you can specify that the first address of the contact you are using for the invoice is taken for the invoice address attribute automatically, so you don't need to provide the address yourself.<br> If you want to know more about these parameters, for example if you want to use this request to update invoices, feel free to contact our support.<br><br> Finally, after covering all parameters, they only important information left, is that the order of the last four attributes always needs to be kept.<br> You will also always need to provide all of them, as otherwise the request won't work properly.<br><br> <b>Warning:</b> You can not create a regular invoice with the <b>deliveryDate</b> being later than the <b>invoiceDate</b>.<br> To do that you will need to create a so called <b>Abschlagsrechnung</b> by setting the <b>invoiceType</b> parameter to <b>AR</b>."
      operationId: createInvoiceByFactory
      requestBody:
        description: "Creation data. Please be aware, that you need to provide at least all required parameter\r\n    of the invoice model!"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveInvoice'
      responses:
        '201':
          description: Created - Returns created invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveInvoiceResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}:
    get:
      tags:
        - Invoice
      summary: Find invoice by ID
      description: Returns a single invoice
      operationId: getInvoiceById
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_InvoiceResponse'
                type: object
        '400':
          description: Bad request. Invoice was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/getPositions:
    get:
      tags:
        - Invoice
      summary: Find invoice positions
      description: Returns all positions of an invoice
      operationId: getInvoicePositionsById
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice to return the positions
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: limits the number of entries returned
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: set the index where the returned entries start
          required: false
          schema:
            type: integer
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_InvoicePosResponse'
                type: object
        '400':
          description: Bad request. Invoice was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/Factory/createInvoiceFromOrder:
    post:
      tags:
        - Invoice
      summary: Create invoice from order
      description: Create an invoice from an order
      operationId: createInvoiceFromOrder
      requestBody:
        description: Create invoice
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CreateInvoiceFromOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_InvoiceResponse'
        '400':
          description: Bad Request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/Factory/createInvoiceReminder:
    post:
      tags:
        - Invoice
      summary: Create invoice reminder
      description: Create an reminder from an invoice
      operationId: createInvoiceReminder
      parameters:
        - name: invoice[id]
          in: query
          description: the id of the invoice
          required: true
          schema:
            type: integer
        - name: invoice[objectName]
          in: query
          description: Model name, which is 'Invoice'
          required: true
          example: Invoice
          schema:
            type: string
      requestBody:
        description: Create invoice
        content:
          application/json:
            schema:
              required:
                - invoice
              properties:
                invoice:
                  description: Invoice for the reminder
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: Id of the invoice
                      type: integer
                    objectName:
                      description: Model name, which is 'Invoice'
                      type: string
                      example: Invoice
              type: object
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_InvoiceResponse'
        '400':
          description: Bad Request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/getIsPartiallyPaid:
    get:
      tags:
        - Invoice
      summary: Check if an invoice is already partially paid
      description: "Returns 'true' if the given invoice is partially paid - 'false' if it is not.\r\n    Invoices which are completely paid are regarded as not partially paid."
      operationId: getIsInvoicePartiallyPaid
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: boolean
                type: object
        '400':
          description: Bad Request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/cancelInvoice:
    post:
      tags:
        - Invoice
      summary: Cancel an invoice / Create cancellation invoice
      description: "This endpoint will cancel the specified invoice therefor creating a cancellation invoice.<br>\r\n     The cancellation invoice will be automatically paid and the source invoices status will change to 'cancelled'."
      operationId: cancelInvoice
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice to be cancelled
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Created - Returns cancellation invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_InvoiceResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/render:
    post:
      tags:
        - Invoice
      summary: Render the pdf document of an invoice
      description: "Using this endpoint you can render the pdf document of an invoice.<br>\r\n     Use cases for this are the retrieval of the pdf location or the forceful re-render of a already sent invoice.<br>\r\n     Please be aware that changing an invoice after it has been sent to a customer is not an allowed bookkeeping process."
      operationId: invoiceRender
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice to render
          required: true
          schema:
            type: integer
      requestBody:
        description: Define if the document should be forcefully re-rendered.
        content:
          application/json:
            schema:
              properties:
                forceReload:
                  description: Define if a forceful re-render should occur.
                  type: boolean
              type: object
      responses:
        '201':
          description: Returns meta-data about pdf.
          content:
            application/json:
              schema:
                properties:
                  thumbs:
                    type: array
                    items:
                      example: null
                  pages:
                    type: integer
                    example: 2
                  docId:
                    type: string
                    example: d4605b19248ad176443b7cb382679b1f
                  parameters:
                    type: array
                    items:
                      properties:
                        key:
                          type: string
                          example: language
                        name:
                          type: string
                          example: Sprache
                        values:
                          type: array
                          items:
                            properties:
                              name:
                                type: string
                                example: deutsch
                              translationCade:
                                type: string
                                example: SEVDOC_LANG_DE_DE
                              value:
                                type: string
                                example: de_DE
                            type: object
                        visible:
                          type: boolean
                          example: true
                        value:
                          type: string
                          example: de_DE
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/sendViaEmail:
    post:
      tags:
        - Invoice
      summary: Send invoice via email
      description: "This endpoint sends the specified invoice to a customer via email.<br>\r\n    This will automatically mark the invoice as sent.<br>\r\n    Please note, that in production an invoice is not allowed to be changed after this happened!"
      operationId: sendInvoiceViaEMail
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice to be sent via email
          required: true
          schema:
            type: integer
      requestBody:
        description: Mail data
        content:
          application/json:
            schema:
              required:
                - toEmail
                - subject
                - text
              properties:
                toEmail:
                  description: The recipient of the email.
                  type: string
                subject:
                  description: The subject of the email.
                  type: string
                text:
                  description: The text of the email. Can contain html.
                  type: string
                copy:
                  description: Should a copy of this email be sent to you?
                  type: boolean
                additionalAttachments:
                  description: "Additional attachments to the mail. String of IDs of existing documents in your\r\n     *                      sevdesk account separated by ','"
                  type: string
                ccEmail:
                  description: String of mail addresses to be put as cc separated by ','
                  type: string
                bccEmail:
                  description: String of mail addresses to be put as bcc separated by ','
                  type: string
              type: object
      responses:
        '201':
          description: Created - Returns created mail object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_Email'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/getPdf:
    get:
      tags:
        - Invoice
      summary: Retrieve pdf document of an invoice
      description: Retrieves the pdf document of an invoice with additional metadata.
      operationId: invoiceGetPdf
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice from which you want the pdf
          required: true
          schema:
            type: integer
        - name: download
          in: query
          description: If u want to download the pdf of the invoice.
          schema:
            type: boolean
          example: true
        - name: preventSendBy
          in: query
          description: Defines if u want to send the invoice.
          schema:
            type: boolean
          example: true
      responses:
        '200':
          description: A pdf file
          content:
            application/json:
              schema:
                properties:
                  filename:
                    type: string
                    example: RE-101.pdf
                  mimeType:
                    type: string
                    example: application/pdf
                  base64encoded:
                    type: boolean
                    example: true
                  content:
                    type: string
                    format: binary
                type: object
        '400':
          description: Bad request. Invoice was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/sendBy:
    put:
      tags:
        - Invoice
      summary: Mark invoice as sent
      description: Marks an invoice as sent by a chosen send type.
      operationId: invoiceSendBy
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice to mark as sent
          required: true
          schema:
            type: integer
      requestBody:
        description: Specify the send type
        content:
          application/json:
            schema:
              required:
                - sendType
                - sendDraft
              properties:
                sendType:
                  description: "Specifies the way in which the invoice was sent to the customer.<br>\r\n     Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd)."
                  type: string
                  enum:
                    - VPR
                    - VP
                    - VM
                    - VPDF
                sendDraft:
                  description: >-
                    To create a draft of an invoice for internal use. This
                    operation will not alter the status of the invoice or create
                    bookings for reports.
                  type: boolean
              type: object
      responses:
        '200':
          description: Successful operation - Returns changed invoice log entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_InvoiceResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/enshrine:
    put:
      tags:
        - Invoice
      summary: Enshrine
      description: >
        Sets the current date and time as a value for the property
        `enshrined`.<br>

        This operation is only possible if the status is "Open" (`"status":
        "200"`) or higher.


        Enshrined invoices cannot be changed. This operation cannot be undone.
      operationId: invoiceEnshrine
      parameters:
        - name: invoiceId
          in: path
          description: ID of the invoice to enshrine
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/bookAmount:
    put:
      tags:
        - Invoice
      summary: Book an invoice
      description: >-
        Booking the invoice with a transaction is probably the most important
        part in the bookkeeping process.<br> There are several ways on correctly
        booking an invoice, all by using the same endpoint.<br> for more
        information look <a href='#tag/Invoice/How-to-book-an-invoice'>here</a>.
      operationId: bookInvoice
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice to book
          required: true
          schema:
            type: integer
      requestBody:
        description: Booking data
        content:
          application/json:
            schema:
              required:
                - amount
                - date
                - type
                - checkAccount
              properties:
                amount:
                  description: Amount which should be booked. Can also be a partial amount.
                  type: number
                date:
                  description: The booking date. Most likely the current date.
                  type: integer
                type:
                  description: "Define a type for the booking.<br>\r\n    The following type abbreviations are available (abbreviation <-> meaning).<br>\r\n    <ul>\r\n    <li>N <-> Normal booking / partial booking</li>\r\n    <li>CB <-> Reduced amount due to discount (skonto)</li>\r\n    <li>CF <-> Reduced/Higher amount due to currency fluctuations (deprecated)</li>\r\n    <li>O <-> Reduced/Higher amount due to other reasons</li>\r\n    <li>OF <-> Higher amount due to reminder charges</li>\r\n    <li>MTC <-> Reduced amount due to the monetary traffic costs</li>\r\n    </ul>"
                  type: string
                  enum:
                    - 'N'
                    - CB
                    - CF
                    - O
                    - OF
                    - MTC
                checkAccount:
                  description: The check account on which should be booked.
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: The id of the check account on which should be booked.
                      type: integer
                    objectName:
                      description: Internal object name which is 'CheckAccount'.
                      type: string
                      example: CheckAccount
                  type: object
                checkAccountTransaction:
                  description: "The check account transaction on which should be booked.<br>\r\n    The transaction will be linked to the invoice."
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: >-
                        The id of the check account transaction on which should
                        be booked.
                      type: integer
                    objectName:
                      description: Internal object name which is 'CheckAccountTransaction'.
                      type: string
                      example: CheckAccountTransaction
                  type: object
                createFeed:
                  description: Determines if a feed is created for the booking process.
                  type: boolean
              type: object
      responses:
        '200':
          description: Successful operation - Returns changed invoice log entry
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 2
                  objectName:
                    type: string
                    example: InvoiceLog
                  additionalInformation:
                    type: string
                    default: null
                  create:
                    description: Date of email creation
                    type: string
                    format: date-time
                    example: '2023-04-18T15:45:38+02:00'
                  creditNote:
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: The id of the invoice
                        type: integer
                        example: 2
                      objectName:
                        description: Internal object name which is 'Invoice'.
                        type: string
                        example: Invoice
                  fromStatus:
                    type: string
                    example: 200
                  toStatus:
                    type: string
                    example: 1000
                  ammountPayed:
                    type: string
                    example: 0
                  bookingDate:
                    type: string
                    format: date-time
                    example: '2023-04-18T15:45:38+02:00'
                  sevClient:
                    type: object
                    description: >-
                      Client to which invoice belongs. Will be filled
                      automatically
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: Unique identifier of the client
                        type: integer
                        example: 1
                      objectName:
                        description: Model name, which is 'SevClient'
                        type: string
                        example: SevClient
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/resetToOpen:
    put:
      tags:
        - Invoice
      summary: Reset status to open
      description: >
        Resets the status "Open" (`"status": "200"`). Linked transactions will
        be unlinked.<br>

        This is not possible if the invoice itself or one of its transactions
        (CheckAccountTransaction) is already enshrined.


        This endpoint cannot be used to increase the status to "Open"
        (`"status": "200"`).<br>

        Use [Invoice/{invoiceId}/sendBy](#tag/Invoice/operation/invoiceSendBy) /
        [Invoice/{invoiceId}/sendViaEmail](#tag/Invoice/operation/sendInvoiceViaEMail)
        instead.


        This endpoint cannot be used for recurring invoices (`"invoiceType":
        "WKR"`).

        Use
        [Invoice/Factory/saveInvoice](#tag/Invoice/operation/createInvoiceByFactory)
        instead.
      operationId: invoiceResetToOpen
      parameters:
        - name: invoiceId
          in: path
          description: ID of the invoice to reset
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - Returns changed invoice
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    allOf:
                      - $ref: '#/components/schemas/Model_InvoiceResponse'
                      - type: object
                        properties:
                          status:
                            example: '200'
                          payDate:
                            example: null
                          enshrined:
                            example: null
                          accountIntervall:
                            example: null
                          accountNextInvoice:
                            example: null
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/resetToDraft:
    put:
      tags:
        - Invoice
      summary: Reset status to draft
      description: >
        Resets the status to "Draft" (`"status": "100"`).<br>

        This is only possible if the invoice has the status "Open" (`"status":
        "200"`).<br>

        If it has a higher status use
        [Invoice/{invoiceId}/resetToOpen](#tag/Invoice/operation/invoiceResetToOpen)
        first.


        This endpoint cannot be used for recurring invoices (`"invoiceType":
        "WKR"`).<br>

        Use
        [Invoice/Factory/saveInvoice](#tag/Invoice/operation/createInvoiceByFactory)
        instead.
      operationId: invoiceResetToDraft
      parameters:
        - name: invoiceId
          in: path
          description: ID of the invoice to reset
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - Returns changed invoice
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    allOf:
                      - $ref: '#/components/schemas/Model_InvoiceResponse'
                      - properties:
                          payDate:
                            example: null
                          enshrined:
                            example: null
                          accountIntervall:
                            example: null
                          accountNextInvoice:
                            example: null
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /InvoicePos:
    get:
      tags:
        - InvoicePos
      summary: Retrieve InvoicePos
      description: There are a multitude of parameter which can be used to filter.
      operationId: getInvoicePos
      parameters:
        - name: id
          in: query
          description: Retrieve all InvoicePos with this InvoicePos id
          required: false
          schema:
            type: number
        - name: invoice[id]
          in: query
          description: >-
            Retrieve all invoices positions with this invoice. Must be provided
            with invoice[objectName]
          required: false
          schema:
            type: number
        - name: invoice[objectName]
          in: query
          description: >-
            Only required if invoice[id] was provided. 'Invoice' should be used
            as value.
          required: false
          schema:
            type: string
        - name: part[id]
          in: query
          description: >-
            Retrieve all invoices positions with this part. Must be provided
            with part[objectName]
          required: false
          schema:
            type: number
        - name: part[objectName]
          in: query
          description: >-
            Only required if part[id] was provided. 'Part' should be used as
            value.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_InvoicePosResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /DocServer/getLetterpapersWithThumb:
    get:
      tags:
        - Layout
      summary: Retrieve letterpapers
      description: Retrieve all letterpapers with Thumb
      operationId: getLetterpapersWithThumb
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: string
                    example: '1'
                  letterpapers:
                    type: array
                    items:
                      properties:
                        id:
                          type: string
                          example: 57d7ff34f23ada297d265f21
                        pdf:
                          type: string
                        sevClient:
                          type: string
                          example: '0'
                        name:
                          type: string
                          example: Blanko
                        default:
                          type: integer
                        img:
                          type: string
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /DocServer/getTemplatesWithThumb:
    get:
      tags:
        - Layout
      summary: Retrieve templates
      description: Retrieve all templates
      operationId: getTemplates
      parameters:
        - name: type
          in: query
          description: Type of the templates you want to get.
          schema:
            type: string
            enum:
              - Invoice
              - invoicereminder
              - Order
              - Contractnote
              - Packinglist
              - Letter
              - Creditnote
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: string
                    example: '1'
                  templates:
                    type: array
                    items:
                      properties:
                        id:
                          type: string
                          example: 57986aee6bd2d53306068da1
                        name:
                          type: string
                          example: SEVDOC_TEMPLATE_STANDARD
                        translationCode:
                          type: string
                          example: SEVDOC_TEMPLATE_STANDARD
                        sevClient:
                          type: string
                          example: '0'
                        type:
                          type: string
                          example: Invoice
                        html:
                          type: string
                        default:
                          type: integer
                        premium:
                          type: boolean
                          example: false
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Invoice/{invoiceId}/changeParameter:
    put:
      tags:
        - Layout
      summary: Update an invoice template
      description: Update an existing invoice template
      operationId: updateInvoiceTemplate
      parameters:
        - name: invoiceId
          in: path
          description: ID of invoice to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Change Layout
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ChangeLayout'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ChangeLayoutResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/{orderId}/changeParameter:
    put:
      tags:
        - Layout
      summary: Update an order template
      description: Update an existing order template
      operationId: updateOrderTemplate
      parameters:
        - name: orderId
          in: path
          description: ID of order to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Change Layout
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ChangeLayout'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ChangeLayoutResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /CreditNote/{creditNoteId}/changeParameter:
    put:
      tags:
        - Layout
      summary: Update an of credit note template
      description: Update an existing of credit note template
      operationId: updateCreditNoteTemplate
      parameters:
        - name: creditNoteId
          in: path
          description: ID of credit note to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Change Layout
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ChangeLayout'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_ChangeLayoutResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order:
    get:
      tags:
        - Order
      summary: Retrieve orders
      description: "There are a multitude of parameter which can be used to filter. A few of them are attached but\r\n    for a complete list please check out <a href='#tag/Order/How-to-filter-for-certain-orders'>this</a> list"
      operationId: getOrders
      parameters:
        - name: status
          in: query
          description: Status of the order
          required: false
          explode: true
          schema:
            type: integer
            enum:
              - 100
              - 200
              - 300
              - 500
              - 750
              - 1000
        - name: orderNumber
          in: query
          description: Retrieve all orders with this order number
          required: false
          explode: true
          schema:
            type: string
        - name: startDate
          in: query
          description: Retrieve all orders with a date equal or higher
          required: false
          explode: true
          schema:
            type: integer
        - name: endDate
          in: query
          description: Retrieve all orders with a date equal or lower
          required: false
          explode: true
          schema:
            type: integer
        - name: contact[id]
          in: query
          description: >-
            Retrieve all orders with this contact. Must be provided with
            contact[objectName]
          required: false
          explode: false
          schema:
            type: integer
        - name: contact[objectName]
          in: query
          description: >-
            Only required if contact[id] was provided. 'Contact' should be used
            as value.
          required: false
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_OrderResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /Order/Factory/saveOrder:
    post:
      tags:
        - Order
      summary: Create a new order
      description: Creates an order to which positions can be added later.
      operationId: createOrder
      requestBody:
        description: "Creation data. Please be aware, that you need to provide at least all required parameter\r\n    of the order model!"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveOrder'
      responses:
        '201':
          description: Created - Returns created voucher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveOrderResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/{orderId}:
    get:
      tags:
        - Order
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_OrderResponse'
                type: object
        '400':
          description: Bad request. Order was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - Order
      summary: Update an existing order
      description: Update an order
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_OrderUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed order resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_OrderResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    delete:
      tags:
        - Order
      summary: Deletes an order
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: Id of order resource to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - Order deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict - f.e occurs if the order is not a draft
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/{orderId}/getPositions:
    get:
      tags:
        - Order
      summary: Find order positions
      description: Returns all positions of an order
      operationId: getOrderPositionsById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return the positions
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: limits the number of entries returned
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: set the index where the returned entries start
          required: false
          schema:
            type: integer
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_OrderPosResponse'
                type: object
        '400':
          description: Bad request. order was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/{orderId}/getDiscounts:
    get:
      tags:
        - Order
      summary: Find order discounts
      description: Returns all discounts of an order
      operationId: getDiscounts
      parameters:
        - name: orderId
          in: path
          description: ID of order to return the positions
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: limits the number of entries returned
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: set the index where the returned entries start
          required: false
          schema:
            type: integer
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_Discount'
                type: object
        '400':
          description: Bad request. order was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/{orderId}/getRelatedObjects:
    get:
      tags:
        - Order
      summary: Find related objects
      description: Get related objects of a specified order
      operationId: getRelatedObjects
      parameters:
        - name: orderId
          in: path
          description: ID of order to return the positions
          required: true
          schema:
            type: integer
        - name: includeItself
          in: query
          description: Define if the related objects include the order itself
          required: false
          schema:
            type: boolean
        - name: sortByType
          in: query
          description: Define if you want the related objects sorted by type
          required: false
          schema:
            type: boolean
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_OrderPosResponse'
                type: object
        '400':
          description: Bad request. order was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/{orderId}/sendViaEmail:
    post:
      tags:
        - Order
      summary: Send order via email
      description: "This endpoint sends the specified order to a customer via email.<br>\r\n    This will automatically mark the order as sent.<br>\r\n    Please note, that in production an order is not allowed to be changed after this happened!"
      operationId: sendorderViaEMail
      parameters:
        - name: orderId
          in: path
          description: ID of order to be sent via email
          required: true
          schema:
            type: integer
      requestBody:
        description: Mail data
        content:
          application/json:
            schema:
              required:
                - toEmail
                - subject
                - text
              properties:
                toEmail:
                  description: The recipient of the email.
                  type: string
                subject:
                  description: The subject of the email.
                  type: string
                text:
                  description: The text of the email. Can contain html.
                  type: string
                copy:
                  description: Should a copy of this email be sent to you?
                  type: boolean
                additionalAttachments:
                  description: "Additional attachments to the mail. String of IDs of existing documents in your\r\n     *                      sevdesk account separated by ','"
                  type: string
                ccEmail:
                  description: String of mail addresses to be put as cc separated by ','
                  type: string
                bccEmail:
                  description: String of mail addresses to be put as bcc separated by ','
                  type: string
              type: object
      responses:
        '201':
          description: Created - Returns created mail object
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_EmailOrder'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/Factory/createPackingListFromOrder:
    post:
      tags:
        - Order
      summary: Create packing list from order
      description: Create packing list from order
      operationId: createPackingListFromOrder
      parameters:
        - name: order[id]
          in: query
          description: the id of the order
          required: true
          explode: false
          schema:
            type: integer
        - name: order[objectName]
          in: query
          description: Model name, which is 'Order'
          required: true
          explode: false
          example: Order
          schema:
            type: string
      requestBody:
        description: Create packing list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CreatePackingListFromOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_OrderResponse'
        '400':
          description: Bad Request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/Factory/createContractNoteFromOrder:
    post:
      tags:
        - Order
      summary: Create contract note from order
      description: Create contract note from order
      operationId: createContractNoteFromOrder
      parameters:
        - name: order[id]
          in: query
          description: the id of the order
          required: true
          explode: false
          schema:
            type: integer
        - name: order[objectName]
          in: query
          description: Model name, which is 'Order'
          required: true
          explode: false
          example: Order
          schema:
            type: string
      requestBody:
        description: Create contract note
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CreatePackingListFromOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_OrderResponse'
        '400':
          description: Bad Request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/{orderId}/getPdf:
    get:
      tags:
        - Order
      summary: Retrieve pdf document of an order
      description: >-
        Retrieves the pdf document of an order with additional metadata and
        commit the order.
      operationId: orderGetPdf
      parameters:
        - name: orderId
          in: path
          description: ID of order from which you want the pdf
          required: true
          schema:
            type: integer
        - name: download
          in: query
          description: If u want to download the pdf of the order.
          schema:
            type: boolean
          example: true
        - name: preventSendBy
          in: query
          description: Defines if u want to send the order.
          schema:
            type: boolean
          example: true
      responses:
        '200':
          description: A pdf file
          content:
            application/json:
              schema:
                properties:
                  filename:
                    type: string
                    example: OR-1001.pdf
                  mimeType:
                    type: string
                    example: application/pdf
                  base64encoded:
                    type: boolean
                    example: true
                  content:
                    type: string
                    format: binary
                type: object
        '400':
          description: Bad request. order was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Order/{orderId}/sendBy:
    put:
      tags:
        - Order
      summary: Mark order as sent
      description: Marks an order as sent by a chosen send type.
      operationId: orderSendBy
      parameters:
        - name: orderId
          in: path
          description: ID of order to mark as sent
          required: true
          schema:
            type: integer
      requestBody:
        description: Specify the send type
        content:
          application/json:
            schema:
              required:
                - sendType
                - sendDraft
              properties:
                sendType:
                  description: "Specifies the way in which the order was sent to the customer.<br>\r\n     Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd)."
                  type: string
                  enum:
                    - VPR
                    - VP
                    - VM
                    - VPDF
                sendDraft:
                  description: >-
                    To create a draft of an order for internal use. This
                    operation will not alter the status of the order.
                  type: boolean
              type: object
      responses:
        '200':
          description: Successful operation - Returns changed order log entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_OrderResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /OrderPos:
    get:
      tags:
        - OrderPos
      summary: Retrieve order positions
      description: >-
        Retrieve all order positions depending on the filters defined in the
        query.
      operationId: getOrderPositions
      parameters:
        - name: order[id]
          in: query
          description: >-
            Retrieve all order positions belonging to this order. Must be
            provided with voucher[objectName]
          required: false
          explode: false
          schema:
            type: integer
        - name: order[objectName]
          in: query
          description: >-
            Only required if order[id] was provided. 'Order' should be used as
            value.
          required: false
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_OrderPosResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /OrderPos/{orderPosId}:
    get:
      tags:
        - OrderPos
      summary: Find order position by ID
      description: Returns a single order position
      operationId: getOrderPositionById
      parameters:
        - name: orderPosId
          in: path
          description: ID of order position to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_OrderPosResponse'
                type: object
        '400':
          description: Bad request. Order position was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - OrderPos
      summary: Update an existing order position
      description: Update an order position
      operationId: updateOrderPosition
      parameters:
        - name: orderPosId
          in: path
          description: ID of order position to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_OrderPosUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed order position resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_OrderPosResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    delete:
      tags:
        - OrderPos
      summary: Deletes an order Position
      operationId: deleteOrderPos
      parameters:
        - name: orderPosId
          in: path
          description: Id of order position resource to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - order position deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict - f.e occurs if the order is not a draft
        '500':
          description: Server Error
      security:
        - api_key: []
  /Voucher/Factory/saveVoucher:
    post:
      tags:
        - Voucher
      summary: Create a new voucher
      description: >-
        Bundles the creation or updating of voucher and voucher position.<br>
        The list of parameters starts with the voucher model.<br> This contains
        all required attributes for a complete voucher.<br> Most of the
        attributes are covered in the voucher attribute list, there are only two
        parameters standing out, namely <b>mapAll</b> and <b>objectName</b>.<br>
        These are just needed for our system and you always need to provide
        them.<br><br> The list of parameters then continues with the voucher
        position array.<br> With this array you have the possibility to add
        multiple positions at once.<br> In the example it only contains one
        position, again together with the parameters <b>mapAll</b> and
        <b>objectName</b>, however, you can add more voucher positions by
        extending the array.<br> So if you wanted to add another position, you
        would add the same list of parameters with an incremented array index of
        \"1\" instead of \"0\".<br><br> The list ends with the two parameters
        voucherPosDelete and filename.<br> We will shortly explain what they can
        do.<br> With voucherPosDelete you can delete voucher positions as this
        request can also be used to update draft vouchers.<br> With filename you
        can attach a file to the voucher.<br> For most of our customers this is
        a really important step, as they need to digitize their receipts.<br>
        Finally, after covering all parameters, the only important information
        left, is that the order of the last two attributes always needs to be
        kept. <br><br> The only valid status values for this endpoint are 50
        (draft) and 100 (open). You can only update draft vouchers. If you have
        to, you can downgrade the status by calling resetToOpen (from paid) and
        resetToDraft (from open).
      operationId: voucherFactorySaveVoucher
      requestBody:
        description: >-
          Creation data. Please be aware, that you need to provide at least all
          required parameters of the voucher and voucher position model!
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveVoucher'
      responses:
        '201':
          description: Created - Returns created voucher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveVoucherResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /Voucher/Factory/uploadTempFile:
    post:
      tags:
        - Voucher
      summary: Upload voucher file
      description: >-
        To attach a document to a voucher, you will need to upload it first for
        later use.<br> To do this, you can use this request.<br> When you
        successfully uploaded the file, you will get a sevdesk internal filename
        in the response.<br> The filename will be a hash generated from your
        uploaded file. You will need it in the next request!<br> After you got
        the just mentioned filename, you can enter it as a value for the
        filename parameter of the saveVoucher request.<br> If you provided all
        necessary parameters and kept all of them in the right order, the file
        will be attached to your voucher.
      operationId: voucherUploadFile
      requestBody:
        description: File to upload
        content:
          form-data:
            schema:
              properties:
                file:
                  description: The file to upload
                  type: string
                  format: binary
              type: object
      responses:
        '201':
          description: A pdf file
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      pages:
                        type: number
                        example: 1
                      mimeType:
                        type: string
                        example: image/jpg
                      originMimeType:
                        type: string
                        example: application/pdf
                      filename:
                        type: string
                        example: f019bec36c65f5a0e7d2c63cc33f0681.pdf
                      contentHash:
                        type: string
                        example: >-
                          1998dea8c6e9e489139caf896690641c0ea065ce5770b51cf2a4d10797f99685
                      content:
                        type: array
                        items:
                          example: null
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /Voucher:
    get:
      tags:
        - Voucher
      summary: Retrieve vouchers
      description: "There are a multitude of parameter which can be used to filter. A few of them are attached but\r\n    for a complete list please check out <a href='#tag/Voucher/How-to-filter-for-certain-vouchers'>this</a> list"
      operationId: getVouchers
      parameters:
        - name: status
          in: query
          description: Status of the vouchers to retrieve.
          required: false
          explode: true
          schema:
            type: number
            enum:
              - 50
              - 100
              - 1000
        - name: creditDebit
          in: query
          description: Define if you only want credit or debit vouchers.
          required: false
          explode: true
          schema:
            type: string
            enum:
              - C
              - D
        - name: descriptionLike
          in: query
          description: Retrieve all vouchers with a description like this.
          required: false
          explode: true
          schema:
            type: string
        - name: startDate
          in: query
          description: Retrieve all vouchers with a date equal or higher
          required: false
          explode: true
          example: 01.01.2020
          schema:
            type: integer
        - name: endDate
          in: query
          description: Retrieve all vouchers with a date equal or lower
          required: false
          explode: true
          example: 01.01.2020
          schema:
            type: integer
        - name: contact[id]
          in: query
          description: >-
            Retrieve all vouchers with this contact. Must be provided with
            contact[objectName]
          required: false
          explode: false
          schema:
            type: integer
        - name: contact[objectName]
          in: query
          description: >-
            Only required if contact[id] was provided. 'Contact' should be used
            as value.
          required: false
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_VoucherResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /Voucher/{voucherId}:
    get:
      tags:
        - Voucher
      summary: Find voucher by ID
      description: Returns a single voucher
      operationId: getVoucherById
      parameters:
        - name: voucherId
          in: path
          description: ID of voucher to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_VoucherResponse'
                type: object
        '400':
          description: Bad request. Voucher was not found
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - Voucher
      summary: Update an existing voucher
      description: >-
        Update a draft voucher using this method if you want to change simple
        values like the description. Complex changes like adding a position
        should use /Voucher/Factory/saveVoucher.<br> You can not change the
        status using this endpoint.
      operationId: updateVoucher
      parameters:
        - name: voucherId
          in: path
          description: ID of voucher to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_VoucherUpdate'
      responses:
        '200':
          description: Successful operation - Returns changed voucher resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_VoucherResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Voucher/{voucherId}/enshrine:
    put:
      tags:
        - Voucher
      summary: Enshrine
      description: >
        Sets the current date and time as a value for the property
        `enshrined`.<br>

        This operation is only possible if the status is "Open" (`"status":
        "100"`) or higher.


        Enshrined vouchers cannot be changed. This operation cannot be undone.
      operationId: voucherEnshrine
      parameters:
        - name: voucherId
          in: path
          description: ID of the voucher to enshrine
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /Voucher/{voucherId}/bookAmount:
    put:
      tags:
        - Voucher
      summary: Book a voucher
      description: >-
        Booking the voucher with a transaction is probably the most important
        part in the bookkeeping process.<br> There are several ways on correctly
        booking a voucher, all by using the same endpoint.<br> Conveniently, the
        booking process is exactly the same as the process for invoices.<br> For
        this reason, you can have a look at it <a
        href='#tag/Voucher/How-to-filter-for-certain-vouchers'>here</a> and all
        you need to to is to change "Invoice" into "Voucher" in the URL.
      operationId: bookVoucher
      parameters:
        - name: voucherId
          in: path
          description: ID of voucher to book
          required: true
          schema:
            type: integer
      requestBody:
        description: Booking data
        content:
          application/json:
            schema:
              required:
                - amount
                - date
                - type
                - checkAccount
              properties:
                amount:
                  description: Amount which should be booked. Can also be a partial amount.
                  type: number
                date:
                  description: The booking date. Most likely the current date.
                  type: string
                  format: date-time
                  nullable: false
                type:
                  description: "Define a type for the booking.<br>\r\n    The following type abbreviations are available (abbreviation <-> meaning).<br>\r\n    <ul>\r\n    <li>N <-> Normal booking / partial booking</li>\r\n    <li>CB <-> Reduced amount due to discount (skonto)</li>\r\n    <li>CF <-> Reduced/Higher amount due to currency fluctuations (deprecated)</li>\r\n    <li>O <-> Reduced/Higher amount due to other reasons</li>\r\n    <li>OF <-> Higher amount due to reminder charges</li>\r\n    <li>MTC <-> Reduced amount due to the monetary traffic costs</li>\r\n    </ul>"
                  type: string
                  enum:
                    - 'N'
                    - CB
                    - CF
                    - O
                    - OF
                    - MTC
                checkAccount:
                  description: The check account on which should be booked.
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: The id of the check account on which should be booked.
                      type: integer
                    objectName:
                      description: Internal object name which is 'CheckAccount'.
                      type: string
                      example: CheckAccount
                  type: object
                checkAccountTransaction:
                  description: "The check account transaction on which should be booked.<br>\r\n    The transaction will be linked to the voucher."
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: >-
                        The id of the check account transaction on which should
                        be booked.
                      type: integer
                    objectName:
                      description: Internal object name which is 'CheckAccountTransaction'.
                      type: string
                      example: CheckAccountTransaction
                  type: object
                createFeed:
                  description: Determines if a feed is created for the booking process.
                  type: boolean
              type: object
      responses:
        '200':
          description: Successful operation - Returns changed voucher log entry
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 2
                  objectName:
                    type: string
                    example: VoucherLog
                  additionalInformation:
                    type: string
                    default: null
                  create:
                    description: Date of email creation
                    type: string
                    format: date-time
                    example: '2023-04-18T15:45:38+02:00'
                  creditNote:
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: The id of the voucher
                        type: integer
                        example: 2
                      objectName:
                        description: Internal object name which is 'Voucher'.
                        type: string
                        example: Voucher
                  fromStatus:
                    type: string
                    example: 200
                  toStatus:
                    type: string
                    example: 1000
                  ammountPayed:
                    type: string
                    example: 0
                  bookingDate:
                    type: string
                    format: date-time
                    example: '2023-04-18T15:45:38+02:00'
                  sevClient:
                    type: object
                    description: >-
                      Client to which invoice belongs. Will be filled
                      automatically
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: Unique identifier of the client
                        type: integer
                        example: 1
                      objectName:
                        description: Model name, which is 'SevClient'
                        type: string
                        example: SevClient
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Voucher/{voucherId}/resetToOpen:
    put:
      tags:
        - Voucher
      summary: Reset status to open
      description: >
        Resets the status to "Open" (`"status": "100"`). Linked payments will be
        unlinked. Created asset depreciation will be reset.<br>

        This is not possible if the voucher is already enshrined!


        This endpoint can not be used to increase the status from "Draft" to
        "Open".<br>

        You can only change the status from higher to lower ("Open" to
        "Draft").<br>

        To change to higher status use
        [Voucher/{voucherId}/bookAmount](#tag/Voucher/operation/bookVoucher).

        To change to lower status use
        [Voucher/{voucherId}/resetToDraft](#tag/Voucher/operation/voucherResetToDraft).
      operationId: voucherResetToOpen
      parameters:
        - name: voucherId
          in: path
          description: ID of the voucher to reset
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - Returns changed voucher
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    allOf:
                      - $ref: '#/components/schemas/Model_VoucherResponse'
                      - type: object
                        properties:
                          status:
                            example: '200'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /Voucher/{voucherId}/resetToDraft:
    put:
      tags:
        - Voucher
      summary: Reset status to draft
      description: >
        Resets the status "Draft" (`"status": "50"`). Linked payments will be
        unlinked. Created asset depreciation will be reset.<br>

        This is not possible if the voucher is already enshrined!


        You can only change the status from higher to lower ("Open" to
        "Draft").<br>

        To change to higher status use
        [/Voucher/Factory/saveVoucher](#tag/Voucher/operation/voucherFactorySaveVoucher).
      operationId: voucherResetToDraft
      parameters:
        - name: voucherId
          in: path
          description: ID of the voucher to reset
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - Returns changed voucher
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    allOf:
                      - $ref: '#/components/schemas/Model_VoucherResponse'
                      - type: object
                        properties:
                          status:
                            example: '200'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '500':
          description: Server Error
      security:
        - api_key: []
  /VoucherPos:
    get:
      tags:
        - VoucherPos
      summary: Retrieve voucher positions
      description: >-
        Retrieve all voucher positions depending on the filters defined in the
        query.
      operationId: getVoucherPositions
      parameters:
        - name: voucher[id]
          in: query
          description: >-
            Retrieve all vouchers positions belonging to this voucher. Must be
            provided with voucher[objectName]
          required: false
          explode: false
          schema:
            type: integer
        - name: voucher[objectName]
          in: query
          description: >-
            Only required if voucher[id] was provided. 'Voucher' should be used
            as value.
          required: false
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_VoucherPosResponse'
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '500':
          description: Server Error
      deprecated: false
      security:
        - api_key: []
  /ReceiptGuidance/forAllAccounts:
    get:
      tags:
        - Voucher
      summary: Get all account guides
      description: >-
        You can use this endpoint to help you decide which accounts you can use
        when creating a voucher
      operationId: forAllAccounts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReceiptGuideDto'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /ReceiptGuidance/forAccountNumber:
    get:
      tags:
        - Voucher
      summary: Get guidance by account number
      description: >-
        You can use this endpoint to get additional information about the
        account that you may want to use.
      operationId: forAccountNumber
      parameters:
        - name: accountNumber
          in: query
          description: The datev account number you want to get additional information of
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReceiptGuideDto'
        '401':
          description: Authentication required
        '422':
          description: The account you requested could not be found.
        '500':
          description: Server Error
      security:
        - api_key: []
  /ReceiptGuidance/forTaxRule:
    get:
      tags:
        - Voucher
      summary: Get guidance by Tax Rule
      description: >-
        You can use this endpoint to get additional information about the tax
        rule (for example, USTPFL_UMS_EINN) that you may want to use.
      operationId: forTaxRule
      parameters:
        - name: taxRule
          in: query
          description: The code of the tax rule you want to get guidance for.
          required: true
          schema:
            type: string
          example: USTPFL_UMS_EINN
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReceiptGuideDto'
        '401':
          description: Authentication required
        '422':
          description: No account guides were found for the requested tax rule.
        '500':
          description: Server Error
      security:
        - api_key: []
  /ReceiptGuidance/forRevenue:
    get:
      tags:
        - Voucher
      summary: Get guidance for revenue accounts
      description: >-
        Provides all possible combinations for revenue accounts to be used with
        revenue receipts/vouchers.
      operationId: forRevenue
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReceiptGuideDto'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /ReceiptGuidance/forExpense:
    get:
      tags:
        - Voucher
      summary: Get guidance for expense accounts
      description: >-
        Provides all possible combinations for expense accounts to be used with
        expense receipts/vouchers.
      operationId: forExpense
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReceiptGuideDto'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Report/invoicelist:
    get:
      summary: Export invoice list
      description: Export invoice list
      operationId: reportInvoice
      tags:
        - Report
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: view
          in: query
          required: true
          schema:
            type: string
          example: all
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name which is exported
                example: Invoice
              objectName:
                description: SevQuery object name
                example: SevQuery
              filter:
                type: object
                properties:
                  invoiceType:
                    type: array
                    description: |-
                      Type of invoices you want to export
                      1. RE - Rechnung
                      2. SR - Stornorechnung
                      3. TR - Teilrechnung
                      4. AR - Abschlagsrechnung
                      5. ER - Endrechnung
                      6. WKR - Wiederkehrende Rechnung
                      7. MA - Mahnung
                    items:
                      enum:
                        - Re
                        - SR
                        - TR
                        - AR
                        - ER
                        - WKR
                        - MA
                  startDate:
                    description: Start date of the invoice
                    type: string
                    format: date-time
                  endDate:
                    description: End date of the invoice
                    type: string
                    format: date-time
                  contact:
                    description: filters the invoices by contact
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: ID of the contact
                        type: integer
                      objectName:
                        description: Model name, which is 'Contact'
                        type: string
                        example: Contact
                  startAmount:
                    description: filters the invoices by amount
                    type: integer
                    example: 100
                  endAmount:
                    description: filters the invoices by amount
                    type: integer
                    example: 150
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: invoice.pdf
                      mimetype:
                        type: string
                        example: application/pdf
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Report/orderlist:
    get:
      summary: Export order list
      description: Export order list
      operationId: reportOrder
      tags:
        - Report
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: view
          in: query
          required: true
          schema:
            type: string
          example: all
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name which is exported
                example: Order
              objectName:
                description: SevQuery object name
                example: SevQuery
              filter:
                type: object
                properties:
                  orderType:
                    type: string
                    description: |-
                      Type of orders you want to export
                      1. AN - Angebote
                      2. AB - Aufträge
                      3. LI - Lieferscheine
                    enum:
                      - AN
                      - AB
                      - LI
                  startDate:
                    description: Start date of the order
                    type: string
                    format: date-time
                  endDate:
                    description: End date of the order
                    type: string
                    format: date-time
                  contact:
                    description: filters the orders by contact
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: ID of the contact
                        type: integer
                      objectName:
                        description: Model name, which is 'Contact'
                        type: string
                        example: Contact
                  startAmount:
                    description: filters the orders by amount
                    type: integer
                    example: 100
                  endAmount:
                    description: filters the orders by amount
                    type: integer
                    example: 150
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: order.pdf
                      mimetype:
                        type: string
                        example: application/pdf
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Report/contactlist:
    get:
      summary: Export contact list
      description: Export contact list
      operationId: reportContact
      tags:
        - Report
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name which is exported
                example: Contact
              objectName:
                description: SevQuery object name
                example: SevQuery
              filter:
                type: object
                properties:
                  zip:
                    description: filters the contacts by zip code
                    type: integer
                    example: 77656
                  city:
                    description: filters the contacts by city
                    type: string
                    example: Offenburg
                  country:
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: id of the country
                        type: integer
                        example: 1
                      objectName:
                        description: Model name, which is 'StaticCountry'
                        type: string
                        example: StaticCountry
                  depth:
                    description: export only organisations
                    type: boolean
                  onlyPeople:
                    description: export only people
                    type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: contact.pdf
                      mimetype:
                        type: string
                        example: application/pdf
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Report/voucherlist:
    get:
      summary: Export voucher list
      description: Export voucher list
      operationId: reportVoucher
      tags:
        - Report
      parameters:
        - name: download
          in: query
          schema:
            type: boolean
        - name: sevQuery
          in: query
          required: true
          schema:
            type: object
            required:
              - modelName
              - objectName
            properties:
              limit:
                type: integer
                description: Limit export
                example: 999999
              modelName:
                description: Model name which is exported
                example: Voucher
              objectName:
                description: SevQuery object name
                example: SevQuery
              filter:
                type: object
                properties:
                  startDate:
                    description: Start date of the voucher
                    type: string
                    format: date-time
                  endDate:
                    description: End date of the voucher
                    type: string
                    format: date-time
                  startPayDate:
                    description: Start pay date of the voucher
                    type: string
                    format: date-time
                  endPayDate:
                    description: End pay date of the voucher
                    type: string
                    format: date-time
                  contact:
                    description: filters the vouchers by contact
                    type: object
                    required:
                      - id
                      - objectName
                    properties:
                      id:
                        description: ID of the contact
                        type: integer
                      objectName:
                        description: Model name, which is 'Contact'
                        type: string
                        example: Contact
                  startAmount:
                    description: filters the vouchers by amount
                    type: integer
                    example: 100
                  endAmount:
                    description: filters the vouchers by amount
                    type: integer
                    example: 150
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: object
                    properties:
                      filename:
                        type: string
                        example: voucher.pdf
                      mimetype:
                        type: string
                        example: application/pdf
                      base64Encoded:
                        type: boolean
                        example: true
                      content:
                        type: string
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Tag:
    get:
      tags:
        - Tag
      summary: Retrieve tags
      description: Retrieve all tags
      operationId: getTags
      parameters:
        - name: id
          in: query
          description: ID of the Tag
          required: false
          schema:
            type: number
        - name: name
          in: query
          description: Name of the Tag
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_TagResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /Tag/{tagId}:
    get:
      tags:
        - Tag
      summary: Find tag by ID
      description: Returns a single tag
      operationId: getTagById
      parameters:
        - name: tagId
          in: path
          description: ID of tag to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_TagResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    put:
      tags:
        - Tag
      summary: Update tag
      description: Update an existing tag
      operationId: updateTag
      parameters:
        - name: tagId
          in: path
          description: ID of tag you want to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the tag u want to update
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_TagResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
    delete:
      tags:
        - Tag
      summary: Deletes a tag
      operationId: deleteTag
      parameters:
        - name: tagId
          in: path
          description: Id of tag to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation - tag deleted
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      default: null
                type: object
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '409':
          description: Conflict
        '500':
          description: Server Error
      security:
        - api_key: []
  /Tag/Factory/create:
    post:
      tags:
        - Tag
      summary: Create a new tag
      description: Create a new tag
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              required:
                - object
              properties:
                name:
                  description: Name of the tag
                  type: string
                object:
                  required:
                    - id
                    - objectName
                  properties:
                    id:
                      description: Id of the invoice/order/voucher/creditNote
                      type: integer
                      example: 1
                    objectName:
                      description: Model name
                      type: string
                      example: Invoice
                      enum:
                        - Invoice
                        - Voucher
                        - Order
                        - CreditNote
                  type: object
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_TagCreateResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
  /TagRelation:
    get:
      tags:
        - Tag
      summary: Retrieve tag relations
      description: Retrieve all tag relations
      operationId: getTagRelations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model_TagCreateResponse'
        '401':
          description: Authentication required
        '500':
          description: Server Error
      security:
        - api_key: []
components:
  schemas:
    Model_CheckAccountResponse:
      title: CheckAccount model
      description: CheckAccount model. Responsible for the payment accounts.
      properties:
        id:
          description: The check account id
          type: string
          readOnly: true
          example: '2'
        objectName:
          description: The check account object name
          type: string
          example: CheckAccount
          readOnly: true
        create:
          description: Date of check account creation
          type: string
          format: date-time
          example: '2024-06-28T14:42:58+02:00'
          readOnly: true
        update:
          description: Date of last check account update
          type: string
          format: date-time
          example: '2024-06-28T14:42:58+02:00'
          readOnly: true
        sevClient:
          description: Client to which check account belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        name:
          description: Name of the check account
          type: string
          example: Iron Bank
        iban:
          description: The IBAN of the account
          type: string
          nullable: true
          example: DE02100500000054540402
        type:
          description: "The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>\r\n     Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection\r\n     to a bank application can not be managed over the API."
          type: string
          enum:
            - online
            - offline
          example: online
        importType:
          description: >-
            Import type, for accounts that are type "online" but not connected
            to a data provider. Transactions can be imported by this method on
            the check account.
          type: string
          enum:
            - CSV
            - MT940
            - null
          example: CSV
          nullable: true
        currency:
          description: The currency of the check account.
          type: string
          example: EUR
        defaultAccount:
          description: Defines if this check account is the default account.
          type: string
          default: '0'
        status:
          description: Status of the check account. 0 <-> Archived - 100 <-> Active
          type: string
          default: '100'
          enum:
            - '0'
            - '100'
          example: '100'
        bankServer:
          description: >-
            Bank server of check account, only set if the account is connected
            to a data provider
          type: string
          nullable: true
          example: FINAPI
        autoMapTransactions:
          description: >-
            Defines if transactions on this account are automatically mapped to
            invoice and vouchers when imported if possible.
          type: string
          default: '1'
          nullable: true
        accountingNumber:
          description: >-
            The booking account used for this bank account, e.g. 1800 in SKR04
            and 1200 in SKR03. Must be unique among all your CheckAccounts.
            Ignore to use a sensible default.
          type: string
          example: '1800'
      type: object
    Model_CheckAccount:
      title: CheckAccount model
      description: CheckAccount model. Responsible for the payment accounts.
      required:
        - name
        - type
        - currency
        - status
      properties:
        id:
          description: The check account id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The check account object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of check account creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last check account update
          type: string
          format: date-time
          readOnly: true
        sevClient:
          description: Client to which check account belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        name:
          description: Name of the check account
          type: string
          example: Iron Bank
          nullable: false
        type:
          description: "The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>\r\n     Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection\r\n     to a bank application can not be managed over the API."
          type: string
          enum:
            - online
            - offline
          example: online
          nullable: false
        importType:
          description: >-
            Import type. Transactions can be imported by this method on the
            check account.
          type: string
          enum:
            - CSV
            - MT940
            - null
          example: CSV
          nullable: true
        currency:
          description: The currency of the check account.
          type: string
          example: EUR
          nullable: false
        defaultAccount:
          description: Defines if this check account is the default account.
          type: integer
          default: 0
          enum:
            - 0
            - 1
        status:
          description: Status of the check account. 0 <-> Archived - 100 <-> Active
          type: integer
          default: 100
          enum:
            - 0
            - 100
          nullable: false
        bankServer:
          description: Bank server of check account
          type: string
          readOnly: true
        autoMapTransactions:
          description: >-
            Defines if transactions on this account are automatically mapped to
            invoice and vouchers when imported if possible.
          type: integer
          default: 1
          nullable: true
        accountingNumber:
          description: >-
            The booking account used for this bank account, e.g. 1800 in SKR04
            and 1200 in SKR03. Must be unique among all your CheckAccounts.
            Ignore to use a sensible default.
          type: string
      type: object
    createFileImportAccount:
      title: Data to create a file import account
      type: object
      properties:
        name:
          description: Name of the check account
          type: string
          example: Iron Bank
        importType:
          description: >-
            Import type. Transactions can be imported by this method on the
            check account.
          type: string
          enum:
            - CSV
            - MT940
          example: CSV
        accountingNumber:
          description: >-
            The booking account used for this bank account, e.g. 1800 in SKR04
            and 1200 in SKR03. Must be unique among all your CheckAccounts.
            Ignore to use a sensible default.
          type: integer
          example: 1800
          nullable: true
        iban:
          description: IBAN of the bank account, without spaces
          type: string
          example: DE02100500000054540402
          nullable: true
    createFileImportAccountResponse:
      title: CheckAccount model
      description: >-
        CheckAccount model. Showing the properties relevant to file import
        accounts.
      properties:
        id:
          description: The check account id
          type: string
          example: '2'
        objectName:
          description: The check account object name, always 'CheckAccount'
          type: string
          example: CheckAccount
        create:
          description: Date of check account creation
          type: string
          format: date-time
          example: '2024-06-28T14:42:58+02:00'
        update:
          description: Date of last check account update
          type: string
          format: date-time
          example: '2024-06-28T14:42:58+02:00'
        sevClient:
          description: Client to which check account belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
        name:
          description: Name of the check account
          type: string
          example: Iron Bank
        iban:
          description: The IBAN of the account
          type: string
          nullable: true
          example: DE02100500000054540402
        type:
          description: >-
            The type of the check account. Account with a CSV or MT940 import
            are regarded as online.
          type: string
          enum:
            - online
            - offline
          example: online
        importType:
          description: >-
            Import type, for accounts that are type "online" but not connected
            to a data provider. Transactions can be imported by this method on
            the check account.
          type: string
          enum:
            - CSV
            - MT940
          example: CSV
        currency:
          description: The currency of the check account.
          type: string
          example: EUR
        defaultAccount:
          description: Defines if this check account is the default account.
          type: string
          enum:
            - '0'
            - '1'
          default: '0'
        status:
          description: Status of the check account. 0 <-> Archived - 100 <-> Active
          type: string
          default: '100'
          enum:
            - '0'
            - '100'
          example: '100'
        autoMapTransactions:
          description: >-
            Defines if transactions on this account are automatically mapped to
            invoice and vouchers when imported if possible.
          type: string
          enum:
            - '0'
            - '1'
          default: '1'
        accountingNumber:
          description: >-
            The booking account used for this bank account, e.g. 1800 in SKR04
            and 1200 in SKR03. Must be unique among all your CheckAccounts.
            Ignore to use a sensible default.
          type: string
          example: '1800'
      type: object
    createClearingAccount:
      title: Data to create a clearing account
      type: object
      properties:
        name:
          description: Name of the check account
          type: string
          example: Coupons
        accountingNumber:
          description: >-
            The booking account used for this clearing account, e.g. 3320 in
            SKR04 and 1723 in SKR03. Must be unique among all your
            CheckAccounts. Ask your tax consultant what to choose.
          type: integer
          nullable: true
    createClearingAccountResponse:
      title: CheckAccount model
      description: >-
        CheckAccount model. Showing the properties relevant to clearing
        accounts.
      properties:
        id:
          description: The check account id
          type: string
          example: '2'
        objectName:
          description: The check account object name, always 'CheckAccount'
          type: string
          example: CheckAccount
        create:
          description: Date of check account creation
          type: string
          format: date-time
          example: '2024-06-28T14:42:58+02:00'
        update:
          description: Date of last check account update
          type: string
          format: date-time
          example: '2024-06-28T14:42:58+02:00'
        sevClient:
          description: Client to which check account belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
        name:
          description: Name of the check account
          type: string
          example: Coupons
        type:
          description: >-
            The type of the check account. Clearing accounts are regarded as
            offline.
          type: string
          enum:
            - online
            - offline
          example: offline
        currency:
          description: The currency of the check account.
          type: string
          example: EUR
        defaultAccount:
          description: Defines if this check account is the default account.
          type: string
          enum:
            - '0'
            - '1'
          default: '0'
        status:
          description: Status of the check account. 0 <-> Archived - 100 <-> Active
          type: string
          default: '100'
          enum:
            - '0'
            - '100'
          example: '100'
        accountingNumber:
          description: The booking account used for this clearing account.
          type: string
          example: '3320'
      type: object
    Model_CheckAccountUpdate:
      title: CheckAccount model
      description: CheckAccount model. Responsible for the payment accounts.
      properties:
        name:
          description: Name of the check account
          type: string
          example: Iron Bank
        type:
          description: "The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>\r\n     Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection\r\n     to a bank application can not be managed over the API."
          type: string
          enum:
            - online
            - offline
          example: online
        importType:
          description: >-
            Import type. Transactions can be imported by this method on the
            check account.
          type: string
          enum:
            - CSV
            - MT940
            - null
          example: CSV
          nullable: true
        currency:
          description: The currency of the check account.
          type: string
          example: EUR
        defaultAccount:
          description: Defines if this check account is the default account.
          type: integer
          default: 0
          enum:
            - 0
            - 1
        status:
          description: Status of the check account. 0 <-> Archived - 100 <-> Active
          type: integer
          default: 100
          enum:
            - 0
            - 100
        autoMapTransactions:
          description: >-
            Defines if transactions on this account are automatically mapped to
            invoice and vouchers when imported if possible.
          type: integer
          default: 1
          nullable: true
        accountingNumber:
          description: >-
            The booking account used for this bank account, e.g. 1800 in SKR04
            and 1200 in SKR03. Must be unique among all your CheckAccounts.
            Ignore to use a sensible default.
          type: string
      type: object
    Model_CheckAccountTransactionResponse:
      title: CheckAccountTransaction model
      description: >-
        CheckAccountTransaction model. Responsible for the transactions on
        payment accounts.
      properties:
        id:
          description: The check account transaction id
          type: string
          example: '0'
          readOnly: true
        objectName:
          description: The check account transaction object name
          type: string
          example: CheckAccountTransaction
          readOnly: true
        create:
          description: Date of check account transaction creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last check account transaction update
          type: string
          format: date-time
          readOnly: true
        sevClient:
          description: >-
            Client to which check account transaction belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        valueDate:
          description: Date the check account transaction was imported
          type: string
          format: date-time
          example: '2024-05-10T00:00:00+02:00'
        entryDate:
          description: Date the check account transaction was booked
          type: string
          format: date-time
          example: '2024-05-10T00:00:00+02:00'
          nullable: true
        paymtPurpose:
          description: The purpose of the transaction
          type: string
          example: salary
          nullable: true
        amount:
          description: Amount of the transaction
          type: string
          example: '-100.32'
        payeePayerName:
          description: Name of the other party
          type: string
          example: Cercei Lannister
          nullable: true
        payeePayerAcctNo:
          description: IBAN or account number of the other party
          type: string
          nullable: true
        payeePayerBankCode:
          description: BIC or bank code of the other party
          type: string
          nullable: true
        checkAccount:
          description: The check account to which the transaction belongs
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the check account
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'CheckAccount'
              type: string
              example: CheckAccount
          type: object
          readOnly: true
        status:
          description: "Status of the check account transaction.<br>\r\n     100 <-> Created<br>\r\n     200 <-> Linked<br>\r\n     300 <-> Private<br>\r\n     400 <-> Booked"
          type: string
          readOnly: true
          enum:
            - '100'
            - '200'
            - '300'
            - '400'
        sourceTransaction:
          description: The check account transaction serving as the source of the rebooking
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the check account transaction
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'CheckAccountTransaction'
              type: string
              example: CheckAccountTransaction
          type: object
          readOnly: true
        targetTransaction:
          description: The check account transaction serving as the target of the rebooking
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the check account transaction
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'CheckAccountTransaction'
              type: string
              default: CheckAccountTransaction
          type: object
          readOnly: true
        enshrined:
          description: >
            Can only be set via
            [CheckAccountTransaction/{checkAccountTransactionId}/enshrine](#tag/CheckAccountTransaction/operation/checkAccountTransactionEnshrine)
          type: string
          format: date-time
          readOnly: true
      type: object
    Model_CheckAccountTransaction:
      title: CheckAccountTransaction model
      description: >-
        CheckAccountTransaction model. Responsible for the transactions on
        payment accounts.
      type: object
      required:
        - valueDate
        - checkAccount
        - amount
        - status
        - payeePayerName
      properties:
        id:
          description: The check account transaction id
          type: integer
          readOnly: true
        objectName:
          description: The check account transaction object name
          type: string
          readOnly: true
        create:
          description: Date of check account transaction creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last check account transaction update
          type: string
          format: date-time
          readOnly: true
        sevClient:
          description: >-
            Client to which check account transaction belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        valueDate:
          description: Date the check account transaction was booked
          type: string
          format: date-time
          example: '2024-05-10T00:00:00+02:00'
        entryDate:
          description: Date the check account transaction was imported
          type: string
          format: date-time
          example: '2024-05-10T00:00:00+02:00'
          nullable: true
        paymtPurpose:
          description: The purpose of the transaction
          type: string
          example: salary
          nullable: true
        amount:
          description: Amount of the transaction
          type: number
          format: float
          example: 100.1
          nullable: false
        payeePayerName:
          description: Name of the other party
          type: string
          example: Cercei Lannister
          nullable: true
        payeePayerAcctNo:
          description: IBAN or account number of the other party
          type: string
          nullable: true
        payeePayerBankCode:
          description: BIC or bank code of the other party
          type: string
          nullable: true
        checkAccount:
          description: The check account to which the transaction belongs
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the check account
              type: integer
            objectName:
              description: Model name, which is 'CheckAccount'
              type: string
              default: CheckAccount
          type: object
          nullable: false
        status:
          description: "Status of the check account transaction.<br>\r\n     100 <-> Created<br>\r\n     200 <-> Linked<br>\r\n     300 <-> Private<br>\r\n     400 <-> Booked"
          type: integer
          nullable: false
          enum:
            - 100
            - 200
            - 300
            - 400
        sourceTransaction:
          description: The check account transaction serving as the source of the rebooking
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the check account transaction
              type: integer
            objectName:
              description: Model name, which is 'CheckAccountTransaction'
              type: string
              default: CheckAccountTransaction
          type: object
          nullable: true
        targetTransaction:
          description: The check account transaction serving as the target of the rebooking
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the check account transaction
              type: integer
            objectName:
              description: Model name, which is 'CheckAccountTransaction'
              type: string
              default: CheckAccountTransaction
          type: object
          nullable: true
    Model_CheckAccountTransactionUpdate:
      title: CheckAccountTransaction model
      description: >-
        CheckAccountTransaction model. Responsible for the transactions on
        payment accounts.
      properties:
        valueDate:
          description: Date the check account transaction was booked
          type: string
          format: date-time
          example: '2024-05-10T00:00:00+02:00'
        entryDate:
          description: Date the check account transaction was imported
          type: string
          format: date-time
          example: '2024-05-10T00:00:00+02:00'
          nullable: true
        paymtPurpose:
          description: the purpose of the transaction
          type: string
          example: salary
        amount:
          description: Amount of the transaction
          type: number
          format: float
          example: 100
          nullable: true
        payeePayerName:
          description: Name of the payee/payer
          type: string
          example: Cercei Lannister
          nullable: true
        checkAccount:
          description: The check account to which the transaction belongs
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the check account
              type: integer
            objectName:
              description: Model name, which is 'CheckAccount'
              type: string
              default: CheckAccount
          type: object
        status:
          description: "Status of the check account transaction.<br>\r\n     100 <-> Created<br>\r\n     200 <-> Linked<br>\r\n     300 <-> Private<br>\r\n     400 <-> Booked"
          type: integer
          enum:
            - 100
            - 200
            - 300
            - 400
        sourceTransaction:
          description: The check account transaction serving as the source of the rebooking
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the check account transaction
              type: integer
            objectName:
              description: Model name, which is 'CheckAccountTransaction'
              type: string
              default: CheckAccountTransaction
          type: object
          nullable: true
        targetTransaction:
          description: The check account transaction serving as the target of the rebooking
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the check account transaction
              type: integer
            objectName:
              description: Model name, which is 'CheckAccountTransaction'
              type: string
              default: CheckAccountTransaction
          type: object
          nullable: true
      type: object
    validationError:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
            exceptionUUID:
              type: string
              description: >-
                An identifier of this exact problem that can be given to the
                support team.
    Model_ContactResponse:
      title: Contact model
      description: Contact model
      properties:
        id:
          description: The contact id
          type: string
          example: '0'
          readOnly: true
        objectName:
          description: The contact object name
          type: string
          example: Contact
          readOnly: true
        create:
          description: Date of contact creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last contact update
          type: string
          format: date-time
          readOnly: true
        name:
          description: >-
            The organization name.<br>

            Be aware that the type of contact will depend on this attribute.<br>

            If it holds a value, the contact will be regarded as an
            organization.
          type: string
          example: string
          readOnly: true
        status:
          description: >-
            Defines the status of the contact. 100 <-> Lead - 500 <-> Pending -
            1000 <-> Active.
          type: string
          example: '100'
          readOnly: true
        customerNumber:
          description: The customer number
          type: string
          example: Customer-1337
          readOnly: true
        parent:
          description: >-
            The parent contact to which this contact belongs. Must be an
            organization.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the parent contact
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          readOnly: true
        surename:
          description: |-
            The <b>first</b> name of the contact.<br>
            Yeah... not quite right in literally every way. We know.<br>
            Not to be used for organizations.
          type: string
          example: John
          readOnly: true
        familyname:
          description: |-
            The last name of the contact.<br>
            Not to be used for organizations.
          type: string
          example: Snow
          readOnly: true
        titel:
          description: |-
            A non-academic title for the contact.
            Not to be used for organizations.
          type: string
          example: Commander
          readOnly: true
        category:
          description: "Category of the contact.<br> For more information,\r\n     see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the category
              type: string
              example: '3'
            objectName:
              description: Model name, which is 'Category'
              type: string
              example: Category
          type: object
          readOnly: true
        description:
          description: A description for the contact.
          type: string
          example: Rightful king of the seven kingdoms
          readOnly: true
        academicTitle:
          description: |-
            A academic title for the contact.
            Not to be used for organizations.
          type: string
          readOnly: true
        gender:
          description: |-
            Gender of the contact.<br>
            Not to be used for organizations.
          type: string
          readOnly: true
        sevClient:
          description: Client to which contact belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        name2:
          description: |-
            Second name of the contact.<br>
            Not to be used for organizations.
          type: string
          example: Targaryen
          readOnly: true
        birthday:
          description: |-
            Birthday of the contact.<br>
            Not to be used for organizations.
          type: string
          format: date
          readOnly: true
        vatNumber:
          description: Vat number of the contact.
          type: string
          readOnly: true
        bankAccount:
          description: Bank account number (IBAN) of the contact.
          type: string
          readOnly: true
        bankNumber:
          description: Bank number of the bank used by the contact.
          type: string
          readOnly: true
        defaultCashbackTime:
          description: >-
            Absolute time in days which the contact has to pay his invoices and
            subsequently get a cashback.
          type: string
          example: string
          readOnly: true
        defaultCashbackPercent:
          description: >-
            Percentage of the invoice sum the contact gets back if he paid
            invoices in time.
          type: string
          format: float
          example: string
          readOnly: true
        defaultTimeToPay:
          description: >-
            The payment goal in days which is set for every invoice of the
            contact.
          type: string
          example: string
          readOnly: true
        taxNumber:
          description: The tax number of the contact.
          type: string
          readOnly: true
        taxOffice:
          description: The tax office of the contact (only for greek customers).
          type: string
          example: string
          readOnly: true
        exemptVat:
          description: Defines if the contact is freed from paying vat.
          type: string
          example: 'false'
          readOnly: true
        defaultDiscountAmount:
          description: >-
            The default discount the contact gets for every invoice.<br>

            Depending on defaultDiscountPercentage attribute, in percent or
            absolute value.
          type: string
          format: float
          example: string
          readOnly: true
        defaultDiscountPercentage:
          description: >-
            Defines if the discount is a percentage (true) or an absolute value
            (false).
          type: string
          example: 'false'
          readOnly: true
        buyerReference:
          description: Buyer reference of the contact.
          example: string
          type: string
          readOnly: true
        governmentAgency:
          description: >-
            Defines whether the contact is a government agency (true) or not
            (false).
          type: string
          example: 'false'
          readOnly: true
        additionalInformation:
          description: Additional information stored for the contact.
          type: string
          example: string
          readOnly: true
          deprecated: true
      type: object
    Model_Contact:
      title: Contact model
      description: Contact model
      required:
        - category
      properties:
        name:
          description: >-
            The organization name.<br>

            Be aware that the type of contact will depend on this attribute.<br>

            If it holds a value, the contact will be regarded as an
            organization.
          type: string
          nullable: true
        status:
          description: >-
            Defines the status of the contact. 100 <-> Lead - 500 <-> Pending -
            1000 <-> Active.
          type: integer
          default: 100
          nullable: true
        customerNumber:
          description: The customer number
          type: string
          example: Customer-1337
          nullable: true
        parent:
          description: >-
            The parent contact to which this contact belongs. Must be an
            organization.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the parent contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: true
        surename:
          description: |-
            The <b>first</b> name of the contact.<br>
            Yeah... not quite right in literally every way. We know.<br>
            Not to be used for organizations.
          type: string
          example: John
          nullable: true
        familyname:
          description: |-
            The last name of the contact.<br>
            Not to be used for organizations.
          type: string
          example: Snow
          nullable: true
        titel:
          description: |-
            A non-academic title for the contact.
            Not to be used for organizations.
          type: string
          example: Commander
          nullable: true
        category:
          description: "Category of the contact.<br> For more information,\r\n     see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the category
              type: integer
              example: 3
            objectName:
              description: Model name, which is 'Category'
              type: string
              example: Category
          type: object
          nullable: false
        description:
          description: A description for the contact.
          type: string
          example: Rightful king of the seven kingdoms
          nullable: true
        academicTitle:
          description: |-
            A academic title for the contact.
            Not to be used for organizations.
          type: string
          nullable: true
        gender:
          description: |-
            Gender of the contact.<br>
            Not to be used for organizations.
          type: string
          nullable: true
        name2:
          description: |-
            Second name of the contact.<br>
            Not to be used for organizations.
          type: string
          example: Targaryen
          nullable: true
        birthday:
          description: |-
            Birthday of the contact.<br>
            Not to be used for organizations.
          type: string
          format: date
          nullable: true
        vatNumber:
          description: Vat number of the contact.
          type: string
          nullable: true
        bankAccount:
          description: Bank account number (IBAN) of the contact.
          type: string
          nullable: true
        bankNumber:
          description: Bank number of the bank used by the contact.
          type: string
          nullable: true
        defaultCashbackTime:
          description: >-
            Absolute time in days which the contact has to pay his invoices and
            subsequently get a cashback.
          type: integer
          nullable: true
        defaultCashbackPercent:
          description: >-
            Percentage of the invoice sum the contact gets back if he paid
            invoices in time.
          type: number
          format: float
          nullable: true
        defaultTimeToPay:
          description: >-
            The payment goal in days which is set for every invoice of the
            contact.
          type: integer
          nullable: true
        taxNumber:
          description: The tax number of the contact.
          type: string
          nullable: true
        taxOffice:
          description: The tax office of the contact (only for greek customers).
          type: string
          nullable: true
        exemptVat:
          description: Defines if the contact is freed from paying vat.
          type: boolean
          nullable: true
        defaultDiscountAmount:
          description: >-
            The default discount the contact gets for every invoice.<br>

            Depending on defaultDiscountPercentage attribute, in percent or
            absolute value.
          type: number
          format: float
          nullable: true
        defaultDiscountPercentage:
          description: >-
            Defines if the discount is a percentage (true) or an absolute value
            (false).
          type: boolean
          nullable: true
        buyerReference:
          description: Buyer reference of the contact.
          type: string
          nullable: true
        governmentAgency:
          description: >-
            Defines whether the contact is a government agency (true) or not
            (false).
          type: boolean
          nullable: true
      type: object
    Model_ContactUpdate:
      title: Contact model
      description: Contact model
      properties:
        name:
          description: >-
            The organization name.<br>

            Be aware that the type of contact will depend on this attribute.<br>

            If it holds a value, the contact will be regarded as an
            organization.
          type: string
          nullable: true
        status:
          description: >-
            Defines the status of the contact. 100 <-> Lead - 500 <-> Pending -
            1000 <-> Active.
          type: integer
          default: 100
          nullable: true
        customerNumber:
          description: The customer number
          type: string
          example: Customer-1337
          nullable: true
        parent:
          description: >-
            The parent contact to which this contact belongs. Must be an
            organization.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the parent contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
          type: object
          nullable: true
        surename:
          description: |-
            The <b>first</b> name of the contact.<br>
            Yeah... not quite right in literally every way. We know.<br>
            Not to be used for organizations.
          type: string
          example: John
          nullable: true
        familyname:
          description: |-
            The last name of the contact.<br>
            Not to be used for organizations.
          type: string
          example: Snow
          nullable: true
        titel:
          description: |-
            A non-academic title for the contact.
            Not to be used for organizations.
          type: string
          example: Commander
          nullable: true
        category:
          description: "Category of the contact.<br> For more information,\r\n     see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the category
              type: integer
              example: 3
            objectName:
              description: Model name, which is 'Category'
              type: string
              example: Category
          type: object
          nullable: true
        description:
          description: A description for the contact.
          type: string
          example: Rightful king of the seven kingdoms
          nullable: true
        academicTitle:
          description: |-
            A academic title for the contact.
            Not to be used for organizations.
          type: string
          nullable: true
        gender:
          description: |-
            Gender of the contact.<br>
            Not to be used for organizations.
          type: string
          nullable: true
        name2:
          description: |-
            Second name of the contact.<br>
            Not to be used for organizations.
          type: string
          example: Targaryen
          nullable: true
        birthday:
          description: |-
            Birthday of the contact.<br>
            Not to be used for organizations.
          type: string
          format: date
          nullable: true
        vatNumber:
          description: Vat number of the contact.
          type: string
          nullable: true
        bankAccount:
          description: Bank account number (IBAN) of the contact.
          type: string
          nullable: true
        bankNumber:
          description: Bank number of the bank used by the contact.
          type: string
          nullable: true
        defaultCashbackTime:
          description: >-
            Absolute time in days which the contact has to pay his invoices and
            subsequently get a cashback.
          type: integer
          nullable: true
        defaultCashbackPercent:
          description: >-
            Percentage of the invoice sum the contact gets back if he paid
            invoices in time.
          type: number
          format: float
          nullable: true
        defaultTimeToPay:
          description: >-
            The payment goal in days which is set for every invoice of the
            contact.
          type: integer
          nullable: true
        taxNumber:
          description: The tax number of the contact.
          type: string
          nullable: true
        taxOffice:
          description: The tax office of the contact (only for greek customers).
          type: string
          nullable: true
        exemptVat:
          description: Defines if the contact is freed from paying vat.
          type: boolean
          nullable: true
        defaultDiscountAmount:
          description: >-
            The default discount the contact gets for every invoice.<br>

            Depending on defaultDiscountPercentage attribute, in percent or
            absolute value.
          type: number
          format: float
          nullable: true
        defaultDiscountPercentage:
          description: >-
            Defines if the discount is a percentage (true) or an absolute value
            (false).
          type: boolean
          nullable: true
        buyerReference:
          description: Buyer reference of the contact.
          type: string
          nullable: true
        governmentAgency:
          description: >-
            Defines whether the contact is a government agency (true) or not
            (false).
          type: boolean
          nullable: true
      type: object
    Model_ContactAddressResponse:
      title: Contact address
      description: ContactAddress model
      required:
        - contact
        - country
      properties:
        id:
          description: The contact address id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The contact address object name
          type: string
          readOnly: true
          nullable: false
          example: ContactAddress
        create:
          description: Date of contact address creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last contact address update
          type: string
          format: date-time
          readOnly: true
        contact:
          description: The contact to which this contact address belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: false
        street:
          description: Street name
          type: string
          example: South road 15
          nullable: true
        zip:
          description: Zib code
          type: string
          example: '12345'
          nullable: true
        city:
          description: City name
          type: string
          example: The North
          nullable: true
        country:
          description: "Country of the contact address.<br>\r\n    For all countries, send a GET to /StaticCountry"
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: integer
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
              example: StaticCountry
          type: object
          nullable: false
        category:
          description: "Category of the contact address.<br>\r\n     For all categories, send a GET to /Category?objectType=ContactAddress."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the category
              type: integer
            objectName:
              description: Model name, which is 'Category'
              type: string
          type: object
          nullable: true
        name:
          description: Name in address
          type: string
          example: John Snow
          nullable: true
        sevClient:
          description: >-
            Client to which contact address belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        name2:
          description: Second name in address
          type: string
          example: Targaryen
        name3:
          description: Third name in address
          type: string
          nullable: true
        name4:
          description: Fourth name in address
          type: string
          nullable: true
      type: object
    Model_ContactAddress:
      title: Contact address
      description: ContactAddress model
      required:
        - contact
        - country
        - category
      properties:
        id:
          description: The contact address id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The contact address object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of contact address creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last contact address update
          type: string
          format: date-time
          readOnly: true
        contact:
          description: The contact to which this contact address belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: false
        street:
          description: Street name
          type: string
          example: South road 15
          nullable: true
        zip:
          description: Zib code
          type: string
          example: '12345'
          nullable: true
        city:
          description: City name
          type: string
          example: The North
          nullable: true
        country:
          description: "Country of the contact address.<br>\r\n    For all countries, send a GET to /StaticCountry"
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: integer
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
              example: StaticCountry
          type: object
          nullable: false
        category:
          description: "Category of the contact address.<br>\r\n     For all categories, send a GET to /Category?objectType=ContactAddress."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the category
              type: integer
            objectName:
              description: Model name, which is 'Category'
              type: string
          type: object
          nullable: true
        name:
          description: Name in address
          type: string
          example: John Snow
          nullable: true
        sevClient:
          description: >-
            Client to which contact address belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        name2:
          description: Second name in address
          type: string
          example: Targaryen
        name3:
          description: Third name in address
          type: string
          nullable: true
        name4:
          description: Fourth name in address
          type: string
          nullable: true
      type: object
    Model_ContactAddressUpdate:
      title: Contact address
      description: ContactAddress model
      properties:
        contact:
          description: The contact to which this contact address belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: true
        street:
          description: Street name
          type: string
          example: South road 15
          nullable: true
        zip:
          description: Zib code
          type: string
          example: '12345'
          nullable: true
        city:
          description: City name
          type: string
          example: The North
          nullable: true
        country:
          description: "Country of the contact address.<br>\r\n    For all countries, send a GET to /StaticCountry"
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: integer
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
              example: StaticCountry
          type: object
          nullable: true
        category:
          description: "Category of the contact address.<br>\r\n     For all categories, send a GET to /Category?objectType=ContactAddress."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the category
              type: integer
            objectName:
              description: Model name, which is 'Category'
              type: string
          type: object
          nullable: true
        name:
          description: Name in address
          type: string
          example: John Snow
          nullable: true
        name2:
          description: Second name in address
          type: string
          example: Targaryen
        name3:
          description: Third name in address
          type: string
          nullable: true
        name4:
          description: Fourth name in address
          type: string
          nullable: true
      type: object
    Model_CommunicationWayResponse:
      title: CommunicationWay model
      description: Contact communication way model
      properties:
        id:
          description: The communication way id
          type: string
          example: '0'
          readOnly: true
        objectName:
          description: The communication way object name
          type: string
          example: CommunicationWay
          readOnly: true
        create:
          description: Date of communication way creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last communication way update
          type: string
          format: date-time
          readOnly: true
        contact:
          description: The contact to which this communication way belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          readOnly: true
        type:
          description: Type of the communication way
          type: string
          enum:
            - EMAIL
            - PHONE
            - WEB
            - MOBILE
          example: EMAIL
          readOnly: true
        value:
          description: "The value of the communication way.<br>\r\n     For example the phone number, e-mail address or website."
          type: string
          readOnly: true
        key:
          description: >-
            The key of the communication way.<br>

            Similar to the category of addresses.<br>

            For all communication way keys please send a GET to
            /CommunicationWayKey.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the key
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'CommunicationWayKey'
              type: string
              example: CommunicationWayKey
          type: object
          readOnly: true
        main:
          description: >-
            Defines whether the communication way is the main communication way
            for the contact.
          type: string
          example: '0'
          readOnly: true
        sevClient:
          description: >-
            Client to which communication way key belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
      type: object
    Model_CommunicationWay:
      title: CommunicationWay model
      description: Contact communication way model
      required:
        - type
        - value
        - key
      properties:
        id:
          description: The communication way id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The communication way object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of communication way creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last communication way update
          type: string
          format: date-time
          readOnly: true
        contact:
          description: The contact to which this communication way belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: false
        type:
          description: Type of the communication way
          type: string
          enum:
            - EMAIL
            - PHONE
            - WEB
            - MOBILE
          example: EMAIL
        value:
          description: "The value of the communication way.<br>\r\n     For example the phone number, e-mail address or website."
          type: string
        key:
          description: >-
            The key of the communication way.<br>

            Similar to the category of addresses.<br>

            For all communication way keys please send a GET to
            /CommunicationWayKey.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the key
              type: integer
            objectName:
              description: Model name, which is 'CommunicationWayKey'
              type: string
              example: CommunicationWayKey
          type: object
          nullable: false
        main:
          description: >-
            Defines whether the communication way is the main communication way
            for the contact.
          type: boolean
          example: 0
          nullable: true
        sevClient:
          description: >-
            Client to which communication way key belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
      type: object
    Model_CommunicationWayUpdate:
      title: CommunicationWay model
      description: Contact communication way model
      properties:
        contact:
          description: The contact to which this communication way belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: true
        type:
          description: Type of the communication way
          type: string
          enum:
            - EMAIL
            - PHONE
            - WEB
            - MOBILE
          example: EMAIL
        value:
          description: "The value of the communication way.<br>\r\n     For example the phone number, e-mail address or website."
          type: string
        key:
          description: >-
            The key of the communication way.<br>

            Similar to the category of addresses.<br>

            For all communication way keys please send a GET to
            /CommunicationWayKey.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the key
              type: integer
            objectName:
              description: Model name, which is 'CommunicationWayKey'
              type: string
              example: CommunicationWayKey
          type: object
          nullable: true
        main:
          description: >-
            Defines whether the communication way is the main communication way
            for the contact.
          type: boolean
          example: 0
          nullable: true
      type: object
    Model_AccountingContactResponse:
      title: AccountingContact model
      description: Accounting contact model
      properties:
        id:
          description: The accounting contact id
          type: string
          example: '0'
          readOnly: true
        objectName:
          description: The accounting contact object name
          type: string
          readOnly: true
          example: AccountingContact
        create:
          description: Date of accounting contact creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last accounting contact update
          type: string
          format: date-time
          readOnly: true
        contact:
          description: The contact to which this accounting contact belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          readOnly: true
        sevClient:
          description: >-
            Client to which accounting contact belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        debitorNumber:
          description: Debitor number of the accounting contact.
          type: string
          example: '0'
          readOnly: true
        creditorNumber:
          description: Creditor number of the accounting contact.
          type: string
          example: '0'
          readOnly: true
      type: object
    Model_AccountingContact:
      title: AccountingContact model
      description: Accounting contact model
      required:
        - contact
      properties:
        contact:
          description: The contact to which this accounting contact belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: false
        debitorNumber:
          description: Debitor number of the accounting contact.
          type: integer
          nullable: true
        creditorNumber:
          description: Creditor number of the accounting contact.
          type: integer
          nullable: true
      type: object
    Model_AccountingContactUpdate:
      title: AccountingContact model
      description: Accounting contact model
      properties:
        contact:
          description: The contact to which this accounting contact belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: true
        debitorNumber:
          description: Debitor number of the accounting contact.
          type: integer
          nullable: true
        creditorNumber:
          description: Creditor number of the accounting contact.
          type: integer
          nullable: true
      type: object
    Model_Textparser_fetchDictionaryEntriesByType_response:
      title: Textparser fetchDictionaryEntriesByType model
      description: Textparser fetchDictionaryEntriesByType model
      properties:
        key:
          type: string
          example: Contact
        value:
          type: array
          items:
            properties:
              key:
                type: string
                example: BANK_NUMBER
              value:
                type: string
                example: '[%BIC%]'
    Model_ContactCustomFieldSettingResponse:
      title: contact fields model
      description: contact fields model
      properties:
        id:
          description: Id of the contact field
          type: string
          example: '1'
          readOnly: true
        objectName:
          description: Internal object name which is 'ContactCustomFieldSetting'.
          type: string
          example: ContactCustomFieldSetting
          readOnly: true
        create:
          description: Date of contact field creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of contact field updated
          type: string
          format: date-time
          readOnly: true
        sevClient:
          description: Client to which invoice belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        name:
          description: name of the contact fields
          type: string
          readOnly: true
        identifier:
          description: Unique identifier for the contact field
          type: string
          readOnly: true
        description:
          description: The description of the contact field
          type: string
          readOnly: true
    Model_ContactCustomFieldResponse:
      title: contact fields model
      description: contact fields model
      properties:
        id:
          description: id of the contact field
          type: string
          example: '0'
        objectName:
          description: Internal object name which is 'ContactCustomField'.
          type: string
          example: ContactCustomField
        create:
          description: Date of contact field creation
          type: string
          format: date-time
        update:
          description: Date of contact field update
          type: string
          format: date-time
        sevClient:
          description: Client to which contact field belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
        contact:
          description: name of the contact
          type: object
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of contact
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
        contactCustomFieldSetting:
          description: the contact custom field setting
          type: object
          allOf:
            - $ref: '#/components/schemas/Model_ContactCustomFieldSettingResponse'
        value:
          description: The value of the contact field
          type: string
    Model_ContactCustomField:
      title: Contact fields model
      description: Contact fields model
      required:
        - contact
        - contactCustomFieldSetting
        - value
        - objectName
      properties:
        contact:
          description: name of the contact
          type: object
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
        contactCustomFieldSetting:
          description: name of the contact custom field setting
          type: object
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of contact custom field setting
              type: integer
            objectName:
              description: Model name, which is 'contactCustomFieldSetting'
              type: string
              example: contactCustomFieldSetting
        value:
          description: The value of the contact field
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomField'.
          type: string
          example: ContactCustomField
    Model_ContactCustomFieldUpdate:
      title: contact fields model
      description: contact fields model
      properties:
        contact:
          description: name of the contact
          type: object
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
        contactCustomFieldSetting:
          description: name of the contact custom field setting
          type: object
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of contact custom field setting
              type: integer
            objectName:
              description: Model name, which is 'contactCustomFieldSetting'
              type: string
              example: contactCustomFieldSetting
        value:
          description: The value of the contact field
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomField'.
          type: string
          example: ContactCustomField
    Model_ContactCustomFieldSetting:
      title: contact field settings model
      description: contact field settings model
      required:
        - name
      properties:
        name:
          description: name of the contact fields
          type: string
          nullable: false
        description:
          description: The description of the contact field
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomFieldSetting'.
          type: string
          example: ContactCustomFieldSetting
    Model_ContactCustomFieldSettingUpdate:
      title: contact fields model
      description: contact fields model
      properties:
        name:
          description: name of the contact fields
          type: string
        description:
          description: The description of the contact field
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomFieldSetting'.
          type: string
          example: ContactCustomFieldSetting
    Model_creditNoteResponse:
      title: creditNote model
      description: creditNote model
      properties:
        id:
          description: The creditNote id
          type: string
          example: '1'
          readOnly: true
          nullable: false
        objectName:
          description: The creditNote object name
          type: string
          readOnly: true
          nullable: false
          example: CreditNote
        create:
          description: Date of creditNote creation
          type: string
          format: date-time
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        update:
          description: Date of last creditNote update
          type: string
          format: date-time
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        creditNoteNumber:
          description: The creditNote number
          type: string
          example: GU-1000
          nullable: true
        contact:
          description: The contact used in the creditNote
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: true
        creditNoteDate:
          description: The credit note date
          type: string
          format: date-time
          example: '2023-04-18T15:45:38+02:00'
          nullable: false
        status:
          description: "Please have a look in \r\n    <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>\r\n    to see what the different status codes mean"
          type: string
          enum:
            - '100'
            - '200'
            - '750'
            - '1000'
          example: '100'
          nullable: false
        header:
          description: Normally consist of prefix plus the creditNote number
          type: string
          example: My GU-1000
          nullable: true
        headText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        footText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        addressCountry:
          description: Can be omitted as complete address is defined in address attribute
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
              example: StaticCountry
          type: object
          nullable: true
        createUser:
          description: Will be filled automatically by our system and can't be changed
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          readOnly: true
        sevClient:
          description: Client to which creditNote belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        deliveryDate:
          description: >-
            Timestamp. This can also be a date range if you also use the
            attribute deliveryDateUntil
          type: string
          format: date-time
          example: '2023-04-18T15:45:38+02:00'
          nullable: false
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n    If yes, the creditNote must not contain any vat"
          type: boolean
          example: '0'
          nullable: true
        contactPerson:
          description: The user who acts as a contact person for the creditNote
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          nullable: true
        taxRate:
          description: >-
            This is not used anymore. Use the taxRate of the individual
            positions instead.
          type: string
          example: '0'
          nullable: true
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                  - `2` - Ausfuhren - allowedTaxRates: 0.0
                  - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                  - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxSet:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax set of the creditNote. Needs to be added if you chose the tax
            type custom
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          type: object
          nullable: true
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          type: string
          example: Umsatzsteuer 19%
          nullable: true
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the creditNote.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          nullable: true
        sendDate:
          description: The date the creditNote was sent to the customer
          type: string
          format: date-time
          example: '2023-04-18T15:45:38+02:00'
          nullable: true
        address:
          description: "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf."
          type: string
          nullable: true
        currency:
          description: >-
            Currency used in the creditNote. Needs to be currency code according
            to ISO-4217
          type: string
          example: EUR
          nullable: true
        sumNet:
          description: Net sum of the creditNote
          type: string
          example: '0'
          readOnly: true
        sumTax:
          description: Tax sum of the creditNote
          type: string
          example: '0'
          readOnly: true
        sumGross:
          description: Gross sum of the creditNote
          type: string
          example: '0'
          readOnly: true
        sumDiscounts:
          description: Sum of all discounts in the creditNote
          type: string
          example: '0'
          readOnly: true
        sumNetForeignCurrency:
          description: Net sum of the creditNote in the foreign currency
          type: string
          example: '0'
          readOnly: true
        sumTaxForeignCurrency:
          description: Tax sum of the creditNote in the foreign currency
          type: string
          example: '0'
          readOnly: true
        sumGrossForeignCurrency:
          description: Gross sum of the creditNote in the foreign currency
          type: string
          example: '0'
          readOnly: true
        sumDiscountsForeignCurrency:
          description: Discounts sum of the creditNote in the foreign currency
          type: string
          example: '0'
          readOnly: true
        customerInternalNote:
          description: >-
            Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          type: string
          nullable: true
        showNet:
          description: >-
            If true, the net amount of each position will be shown on the
            creditNote. Otherwise gross amount
          type: boolean
          example: '1'
        sendType:
          description: "Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!"
          type: string
          enum:
            - VPR
            - VPDF
            - VM
            - VP
          nullable: true
      type: object
    Model_creditNote:
      title: creditNote model
      description: creditNote model
      required:
        - creditNoteNumber
        - creditNoteDate
        - contact
        - status
        - deliveryDate
        - addressCountry
        - contactPerson
        - taxRate
        - taxRule
        - taxText
        - taxType
        - bookingCategory
        - invoiceType
        - currency
        - header
        - mapAll
        - objectName
      properties:
        id:
          description: >-
            The creditNote id. <span style='color:red'>Required</span> if you
            want to create/update an credit note position for an existing credit
            note"
          type: integer
          nullable: false
        objectName:
          description: The creditNote object name
          type: string
          nullable: false
          example: CreditNote
        mapAll:
          type: boolean
          nullable: false
        create:
          description: Date of creditNote creation
          type: string
          format: date-time
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        update:
          description: Date of last creditNote update
          type: string
          format: date-time
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        creditNoteNumber:
          description: The creditNote number
          type: string
          example: GU-1000
        contact:
          description: The contact used in the creditNote
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: false
        creditNoteDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 22.02.2022
          nullable: false
        status:
          description: "Please have a look in \r\n    <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>\r\n    to see what the different status codes mean"
          type: string
          enum:
            - '100'
            - '200'
            - '300'
            - '500'
            - '750'
            - '1000'
          example: '100'
          nullable: false
        header:
          description: Normally consist of prefix plus the creditNote number
          type: string
          example: My GU-1000
          nullable: false
        headText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        footText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        addressCountry:
          description: Can be omitted as complete address is defined in address attribute
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: integer
              example: 1
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
              example: StaticCountry
          type: object
          nullable: true
        createUser:
          description: Will be filled automatically by our system and can't be changed
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          readOnly: true
        sevClient:
          description: Client to which creditNote belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n    If yes, the creditNote must not contain any vat"
          type: boolean
          example: 0
          nullable: true
        contactPerson:
          description: The user who acts as a contact person for the creditNote
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                  - `2` - Ausfuhren - allowedTaxRates: 0.0
                  - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                  - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxRate:
          description: >-
            This is not used anymore. Use the taxRate of the individual
            positions instead.
          type: number
          format: float
          example: 0
          nullable: false
        taxSet:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax set of the creditNote. Needs to be added if you chose the tax
            type custom
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: integer
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          type: object
          nullable: true
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          type: string
          example: Umsatzsteuer 19%
          nullable: false
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the creditNote.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          nullable: false
        sendDate:
          description: The date the creditNote was sent to the customer
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
        address:
          description: "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf."
          type: string
          nullable: true
        bookingCategory:
          description: >-
            Defines the booking category, for more information see the section
            [Credit note booking
            categories](#tag/CreditNote/Credit-note-booking-categories)


            The booking category of the credit note.


            **Must be <code>UNDERACHIEVEMENT</code> in sevdesk-Update 2.0.**
          type: string
          enum:
            - PROVISION
            - ROYALTY_ASSIGNED
            - ROYALTY_UNASSIGNED
            - UNDERACHIEVEMENT
            - ACCOUNTING_TYPE
          example: PROVISION
          nullable: false
        currency:
          description: >-
            Currency used in the creditNote. Needs to be currency code according
            to ISO-4217
          type: string
          example: EUR
          nullable: false
        sumNet:
          description: Net sum of the creditNote
          type: number
          format: float
          readOnly: true
          nullable: false
        sumTax:
          description: Tax sum of the creditNote
          type: number
          format: float
          readOnly: true
          nullable: false
        sumGross:
          description: Gross sum of the creditNote
          type: number
          format: float
          readOnly: true
          nullable: false
        sumDiscounts:
          description: Sum of all discounts in the creditNote
          type: number
          format: float
          readOnly: true
          nullable: false
        sumNetForeignCurrency:
          description: Net sum of the creditNote in the foreign currency
          type: number
          format: float
          readOnly: true
          nullable: false
        sumTaxForeignCurrency:
          description: Tax sum of the creditNote in the foreign currency
          type: number
          format: float
          readOnly: true
          nullable: false
        sumGrossForeignCurrency:
          description: Gross sum of the creditNote in the foreign currency
          type: number
          format: float
          readOnly: true
          nullable: false
        sumDiscountsForeignCurrency:
          description: Discounts sum of the creditNote in the foreign currency
          type: number
          format: float
          readOnly: true
          nullable: false
        customerInternalNote:
          description: >-
            Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          type: string
          nullable: true
        showNet:
          description: >-
            If true, the net amount of each position will be shown on the
            creditNote. Otherwise gross amount
          type: boolean
          example: 1
          nullable: false
        sendType:
          description: "Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!"
          type: string
          enum:
            - VPR
            - VPDF
            - VM
            - VP
          nullable: true
      type: object
    Model_creditNotePos:
      title: creditNote position model
      description: creditNote position model
      required:
        - unity
        - taxRate
        - quantity
        - mapAll
        - objectName
      properties:
        id:
          description: The creditNote position id.
          type: integer
          readOnly: true
          nullable: true
        objectName:
          description: The creditNote position object name
          type: string
          nullable: false
          example: CreditNotePos
        mapAll:
          type: boolean
          nullable: false
        create:
          description: Date of creditNote position creation
          type: string
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        update:
          description: Date of last creditNote position update
          type: string
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        creditNote:
          description: >-
            The creditNote to which the position belongs.  <span
            style='color:red'>Required</span> if you want to create/update an
            credit note position for an existing credit note"
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the creditNote
              type: integer
            objectName:
              description: Model name, which is 'creditNote'
              type: string
              example: creditNote
          type: object
        part:
          description: Part from your inventory which is used in the position.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the part
              type: integer
            objectName:
              description: Model name, which is 'Part'
              type: string
              example: Part
          type: object
        quantity:
          description: Quantity of the article/part
          type: number
          format: float
          example: 1
          nullable: false
        price:
          description: >-
            Price of the article/part. Is either gross or net, depending on the
            sevdesk account setting.
          type: number
          format: float
          example: 100
          nullable: true
        priceNet:
          description: Net price of the part
          type: number
          format: float
          readOnly: true
          nullable: true
        priceTax:
          description: Tax on the price of the part
          type: number
          format: float
          example: 19
          nullable: true
        priceGross:
          description: Gross price of the part
          type: number
          format: float
          example: 119
          nullable: true
        name:
          description: Name of the article/part.
          type: string
          example: Dragonglass
          nullable: true
        unity:
          description: The unit in which the positions part is measured
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the unit
              type: integer
            objectName:
              description: Model name, which is 'Unity'
              type: string
              example: Unity
          type: object
        sevClient:
          description: >-
            Client to which creditNote position belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        positionNumber:
          description: >-
            Position number of your position. Can be used to creditNote multiple
            positions.
          type: integer
          example: 1
          nullable: true
        text:
          description: A text describing your position.
          type: string
          nullable: true
        discount:
          description: An optional discount of the position.
          type: number
          format: float
          nullable: true
        optional:
          description: Defines if the position is optional.
          type: boolean
          nullable: true
        taxRate:
          description: Tax rate of the position.
          type: number
          format: float
          example: 19
          nullable: false
        sumDiscount:
          description: Discount sum of the position
          type: number
          format: float
          readOnly: true
          nullable: true
      type: object
    saveCreditNote:
      type: object
      required:
        - creditNote
        - creditNotePos
      properties:
        creditNote:
          $ref: '#/components/schemas/Model_creditNote'
        creditNotePosSave:
          type: array
          items:
            $ref: '#/components/schemas/Model_creditNotePos'
        creditNotePosDelete:
          required:
            - id
            - objectName
          properties:
            id:
              description: Id of credit note position
              type: integer
            objectName:
              description: Object name of credit note position
              type: string
          default: null
        discountSave:
          required:
            - discount
            - text
            - percentage
            - value
            - objectName
            - mapAll
          properties:
            discount:
              description: Defines if this is a discount or a surcharge
              type: boolean
              example: true
            text:
              description: A text for your discount
              type: string
            percentage:
              description: Defines if this is a percentage or an absolute discount
              type: boolean
            value:
              description: Value of the discount
              type: number
            objectName:
              description: Object name of the discount
              type: string
              example: Discounts
            mapAll:
              description: Internal param
              type: boolean
              example: true
          default: null
        discountDelete:
          required:
            - id
            - objectName
          properties:
            id:
              description: ID of discount to delete
              type: integer
            objectName:
              description: Object name of discount
              type: string
              example: Discounts
          default: null
    Model_creditNotePosResponse:
      title: creditNote position model
      description: creditNote position model
      required:
        - creditNote
        - unity
        - taxRate
        - quantity
      properties:
        id:
          description: The creditNote position id
          type: string
          example: '1'
          readOnly: true
          nullable: false
        objectName:
          description: The creditNote position object name
          type: string
          readOnly: true
          nullable: false
          example: CreditNotePos
        create:
          description: Date of creditNote position creation
          type: string
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        update:
          description: Date of last creditNote position update
          type: string
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        creditNote:
          description: The creditNote to which the position belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the creditNote
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'creditNote'
              type: string
              example: creditNote
          type: object
        part:
          description: Part from your inventory which is used in the position.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the part
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'Part'
              type: string
              example: Part
          type: object
        quantity:
          description: Quantity of the article/part
          type: string
          example: '1'
          nullable: false
        price:
          description: >-
            Price of the article/part. Is either gross or net, depending on the
            sevdesk account setting.
          type: string
          example: '100'
          nullable: true
        priceNet:
          description: Net price of the part
          type: string
          example: '100'
          readOnly: true
          nullable: true
        priceTax:
          description: Tax on the price of the part
          type: string
          example: '19'
          nullable: true
        priceGross:
          description: Gross price of the part
          type: string
          example: '119'
          nullable: true
        name:
          description: Name of the article/part.
          type: string
          example: Dragonglass
          nullable: true
        unity:
          description: The unit in which the positions part is measured
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the unit
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'Unity'
              type: string
              example: Unity
          type: object
        sevClient:
          description: >-
            Client to which creditNote position belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        positionNumber:
          description: >-
            Position number of your position. Can be used to creditNote multiple
            positions.
          type: string
          example: '1'
          nullable: true
        text:
          description: A text describing your position.
          type: string
          nullable: true
        discount:
          description: An optional discount of the position.
          type: string
          example: '0'
          nullable: true
        optional:
          description: Defines if the position is optional.
          type: boolean
          nullable: true
        taxRate:
          description: Tax rate of the position.
          type: string
          example: '19'
          nullable: false
        sumDiscount:
          description: Discount sum of the position
          type: string
          example: '0'
          readOnly: true
          nullable: true
      type: object
    saveCreditNoteResponse:
      type: object
      properties:
        creditNote:
          $ref: '#/components/schemas/Model_creditNoteResponse'
        creditNotePos:
          type: array
          items:
            $ref: '#/components/schemas/Model_creditNotePosResponse'
    Model_discountsResponse:
      properties:
        id:
          description: The id of the discount
          type: integer
          example: 1234
        objectName:
          description: Model name, which is 'Discounts'
          type: string
          example: Discounts
        create:
          description: Date of discount creation
          type: string
          example: '2023-03-15T13:46:33+01:00'
        update:
          description: Date of last discount update
          type: string
          example: '2023-03-15T13:46:33+01:00'
        sevClient:
          description: Client to which the discount belongs
          type: string
          example: '1234'
        discount:
          description: >-
            Indicates that this is a discount or a surcharge (0 = surcharge, 1 =
            discount)
          type: string
          example: '1'
        text:
          description: A text describing your position.
          type: string
          example: Info about the discount
        percentage:
          description: Defines if this is a percentage or an absolute discount
          type: string
          example: '1'
        value:
          description: Value of the discount
          type: string
          example: '5'
        isNet:
          description: Defines is the Discount net or gross (0 = net, 1 = gross)
          type: string
          example: '0'
    Model_creditNoteUpdate:
      title: creditNote model
      description: creditNote model
      properties:
        id:
          description: The creditNote id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The creditNote object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of creditNote creation
          type: string
          format: date-time
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        update:
          description: Date of last creditNote update
          type: string
          format: date-time
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        creditNoteNumber:
          description: The creditNote number
          type: string
          example: GU-1000
          nullable: true
        contact:
          description: The contact used in the creditNote
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: true
        creditNoteDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2020
          nullable: false
        status:
          description: "Please have a look in \r\n    <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>\r\n    to see what the different status codes mean"
          type: string
          enum:
            - '100'
            - '200'
            - '750'
            - '1000'
          example: '100'
          nullable: false
        header:
          description: Normally consist of prefix plus the creditNote number
          type: string
          example: My GU-1000
          nullable: true
        headText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        footText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        addressCountry:
          description: Can be omitted as complete address is defined in address attribute
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: integer
              example: 1
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
              example: StaticCountry
          type: object
          nullable: true
        createUser:
          description: Will be filled automatically by our system and can't be changed
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          readOnly: true
        sevClient:
          description: Client to which creditNote belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        deliveryDate:
          description: >-
            Timestamp. This can also be a date range if you also use the
            attribute deliveryDateUntil
          type: string
          format: date-time
          example: '2023-04-18T15:45:38+02:00'
          nullable: false
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n    If yes, the creditNote must not contain any vat"
          type: boolean
          example: 0
          nullable: true
        contactPerson:
          description: The user who acts as a contact person for the creditNote
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          nullable: true
        taxRate:
          description: >-
            This is not used anymore. Use the taxRate of the individual
            positions instead.
          type: number
          format: float
          example: 0
          nullable: true
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                  - `2` - Ausfuhren - allowedTaxRates: 0.0
                  - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                  - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxSet:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax set of the creditNote. Needs to be added if you chose the tax
            type custom
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: integer
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          type: object
          nullable: true
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          type: string
          example: Umsatzsteuer 19%
          nullable: true
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the creditNote.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          nullable: true
        sendDate:
          description: The date the creditNote was sent to the customer
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
        address:
          description: "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf."
          type: string
          nullable: true
        currency:
          description: >-
            Currency used in the creditNote. Needs to be currency code according
            to ISO-4217
          type: string
          example: EUR
          nullable: true
        sumNet:
          description: Net sum of the creditNote
          type: number
          format: float
          readOnly: true
        sumTax:
          description: Tax sum of the creditNote
          type: number
          format: float
          readOnly: true
        sumGross:
          description: Gross sum of the creditNote
          type: number
          format: float
          readOnly: true
        sumDiscounts:
          description: Sum of all discounts in the creditNote
          type: number
          format: float
          readOnly: true
        sumNetForeignCurrency:
          description: Net sum of the creditNote in the foreign currency
          type: number
          format: float
          readOnly: true
        sumTaxForeignCurrency:
          description: Tax sum of the creditNote in the foreign currency
          type: number
          format: float
          readOnly: true
        sumGrossForeignCurrency:
          description: Gross sum of the creditNote in the foreign currency
          type: number
          format: float
          readOnly: true
        sumDiscountsForeignCurrency:
          description: Discounts sum of the creditNote in the foreign currency
          type: number
          format: float
          readOnly: true
        customerInternalNote:
          description: >-
            Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          type: string
          nullable: true
        showNet:
          description: >-
            If true, the net amount of each position will be shown on the
            creditNote. Otherwise gross amount
          type: boolean
          example: 1
        sendType:
          description: "Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!"
          type: string
          enum:
            - VPR
            - VPDF
            - VM
            - VP
          nullable: true
      type: object
    Model_CreditNote_sendByWithRender:
      type: object
      properties:
        thumbs:
          type: array
          items:
            example: null
        pages:
          type: integer
          example: 2
        docId:
          type: string
          example: d4605b19248ad176443b7cb382679b1f
        parameters:
          type: array
          items:
            properties:
              key:
                type: string
                example: language
              name:
                type: string
                example: Sprache
              values:
                type: array
                items:
                  properties:
                    name:
                      type: string
                      example: deutsch
                    translationCade:
                      type: string
                      example: SEVDOC_LANG_DE_DE
                    value:
                      type: string
                      example: de_DE
                  type: object
              visible:
                type: boolean
                example: true
              value:
                type: string
                example: de_DE
    Model_creditNote_mailResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        objectName:
          type: string
          example: Email
        additionalInformation:
          type: string
          default: null
        create:
          description: Date of email creation
          type: string
          format: date-time
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        update:
          description: Date of last email update
          type: string
          format: date-time
          readOnly: true
          example: '2023-04-18T15:45:38+02:00'
        object:
          $ref: '#/components/schemas/Model_creditNoteResponse'
        from:
          type: string
          example: example@mail.com
        to:
          type: string
          example: example2@mail.com
        subject:
          type: string
          example: subject
        text:
          type: string
          example: example
        sevClient:
          description: Client to which creditNote belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
              example: 1
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
    Model_Part:
      title: Part model
      description: Part model
      required:
        - taxRate
        - unity
        - stock
        - name
        - partNumber
      properties:
        id:
          description: The part id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The part object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of part creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last part update
          type: string
          format: date-time
          readOnly: true
        name:
          description: Name of the part
          type: string
          example: Dragonglass
        partNumber:
          description: The part number
          type: string
          example: Part-1000
        text:
          description: A text describing the part
          type: string
          nullable: true
        category:
          description: "Category of the part.<br>\r\n    For all categories, send a GET to /Category?objectType=Part"
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the category
              type: integer
            objectName:
              description: Model name, which is 'Category'
              type: string
              example: Category
          type: object
          nullable: true
        stock:
          description: The stock of the part
          type: number
          format: float
          example: 10000
        stockEnabled:
          description: Defines if the stock should be enabled
          type: boolean
          example: 1
          nullable: false
        unity:
          description: The unit in which the part is measured
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the unit
              type: integer
              example: 1
            objectName:
              description: Model name, which is 'Unity'
              type: string
              example: Unity
          type: object
        price:
          description: >-
            Net price for which the part is sold. we will change this parameter
            so that the gross price is calculated automatically, until then the
            priceGross parameter must be used.
          type: number
          format: float
          example: 100
          nullable: true
        priceNet:
          description: Net price for which the part is sold
          type: number
          format: float
          example: 100
          nullable: true
        priceGross:
          description: Gross price for which the part is sold
          type: number
          format: float
          example: 119
          nullable: true
        sevClient:
          description: Client to which part belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        pricePurchase:
          description: Purchase price of the part
          type: number
          format: float
          example: 50
          nullable: true
        taxRate:
          description: Tax rate of the part
          type: number
          format: float
          example: 19
        status:
          description: Status of the part. 50 <-> Inactive - 100 <-> Active
          type: integer
          example: 100
          enum:
            - 50
            - 100
          nullable: true
        internalComment:
          description: "An internal comment for the part.<br>\r\n     Does not appear on invoices and orders."
          type: string
          nullable: true
      type: object
    Model_PartUpdate:
      title: Part model
      description: Part model
      properties:
        id:
          description: The part id
          type: integer
          readOnly: true
          nullable: true
        objectName:
          description: The part object name
          type: string
          readOnly: true
          nullable: true
        create:
          description: Date of part creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last part update
          type: string
          format: date-time
          readOnly: true
        name:
          description: Name of the part
          type: string
          example: Dragonglass
        partNumber:
          description: The part number
          type: string
          example: Part-1000
        text:
          description: A text describing the part
          type: string
          nullable: true
        category:
          description: "Category of the part.<br>\r\n    For all categories, send a GET to /Category?objectType=Part"
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the category
              type: integer
            objectName:
              description: Model name, which is 'Category'
              type: string
              example: Category
          type: object
          nullable: true
        stock:
          description: The stock of the part
          type: number
          format: float
          example: 10000
        stockEnabled:
          description: Defines if the stock should be enabled
          type: boolean
          example: 1
          nullable: true
        unity:
          description: The unit in which the part is measured
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the unit
              type: integer
              example: 1
            objectName:
              description: Model name, which is 'Unity'
              type: string
              example: Unity
          type: object
        price:
          description: >-
            Net price for which the part is sold. we will change this parameter
            so that the gross price is calculated automatically, until then the
            priceGross parameter must be used.
          type: number
          format: float
          example: 100
          nullable: true
        priceNet:
          description: Net price for which the part is sold
          type: number
          format: float
          example: 100
          nullable: true
        priceGross:
          description: Gross price for which the part is sold
          type: number
          format: float
          example: 119
          nullable: true
        sevClient:
          description: Client to which part belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        pricePurchase:
          description: Purchase price of the part
          type: number
          format: float
          example: 50
          nullable: true
        taxRate:
          description: Tax rate of the part
          type: number
          format: float
          example: 19
        status:
          description: Status of the part. 50 <-> Inactive - 100 <-> Active
          type: integer
          example: 100
          enum:
            - 50
            - 100
          nullable: true
        internalComment:
          description: "An internal comment for the part.<br>\r\n     Does not appear on invoices and orders."
          type: string
          nullable: true
      type: object
    Model_InvoiceResponse:
      title: Invoice model
      description: Invoice model
      properties:
        id:
          description: The invoice id
          type: string
          example: '1'
          readOnly: true
        objectName:
          description: The invoice object name
          type: string
          example: Invoice
          readOnly: true
        invoiceNumber:
          description: The invoice number
          type: string
          example: RE-1000
          readOnly: true
        contact:
          description: The contact used in the invoice
          readOnly: true
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
        create:
          description: Date of invoice creation
          type: string
          format: date-time
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        update:
          description: Date of last invoice update
          type: string
          format: date-time
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        sevClient:
          description: Client to which invoice belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        invoiceDate:
          description: The invoice date.
          type: string
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        header:
          description: Normally consist of prefix plus the invoice number
          type: string
          example: My RE-1000
          readOnly: true
        headText:
          description: Certain html tags can be used here to format your text
          type: string
          example: header information
          readOnly: true
        footText:
          description: Certain html tags can be used here to format your text
          type: string
          example: footer information
          readOnly: true
        timeToPay:
          description: The time the customer has to pay the invoice in days
          type: string
          example: '10'
          readOnly: true
        discountTime:
          description: "If a value other than zero is used for the discount attribute,\r\n    you need to specify the amount of days for which the discount is granted."
          type: string
          example: '0'
          readOnly: true
        discount:
          description: >-
            If you want to give a discount, define the percentage here.
            Otherwise provide zero as value
          type: string
          example: '0'
          readOnly: true
        addressCountry:
          description: Can be omitted as complete address is defined in address attribute
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
              example: StaticCountry
          type: object
          readOnly: true
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        createUser:
          description: Will be filled automatically by our system and can't be changed
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          readOnly: true
        deliveryDate:
          description: >-
            Timestamp. This can also be a date range if you also use the
            attribute deliveryDateUntil
          type: string
          format: date-time
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        status:
          description: "Please have a look in our\r\n     <a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>\r\n     to see what the different status codes mean"
          type: string
          enum:
            - '50'
            - '100'
            - '200'
            - '750'
            - '1000'
          example: '100'
          readOnly: true
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n    If yes, the invoice must not contain any vat"
          type: boolean
          example: '0'
          readOnly: true
        contactPerson:
          description: The user who acts as a contact person for the invoice
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          readOnly: true
        taxRate:
          description: >-
            This is not used anymore. Use the taxRate of the individual
            positions instead.
          type: string
          example: '0'
          readOnly: true
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                  - `2` - Ausfuhren - allowedTaxRates: 0.0
                  - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                  - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          type: string
          example: Umsatzsteuer 19%
          readOnly: true
        dunningLevel:
          description: "Defines how many reminders have already been sent for the invoice.\r\n    Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent."
          type: string
          example: '0'
          readOnly: true
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the invoice.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          enum:
            - default
            - eu
            - noteu
            - custom
          readOnly: true
        paymentMethod:
          description: Payment method used for the invoice
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the payment method
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'PaymentMethod'
              type: string
              example: PaymentMethod
          type: object
          readOnly: true
        costCentre:
          description: Cost centre for the invoice
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the cost centre
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'CostCentre'
              type: string
              example: CostCentre
          type: object
          readOnly: true
        sendDate:
          description: The date the invoice was sent to the customer
          type: string
          format: date-time
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        origin:
          description: Origin of the invoice. Could f.e. be an order
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: string
              example: '1'
            objectName:
              description: Model name. Could f.e. be 'Order''
              type: string
          type: object
          readOnly: true
        invoiceType:
          description: "Type of the invoice. For more information on the different types, check\r\n     <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section\r\n"
          type: string
          example: RE
          enum:
            - RE
            - WKR
            - SR
            - MA
            - TR
            - ER
          readOnly: true
        accountIntervall:
          description: "The interval in which recurring invoices are due as ISO-8601 duration.<br>\r\n     Necessary attribute for all recurring invoices."
          type: string
          example: '2022-03-14'
          readOnly: true
        accountNextInvoice:
          description: >-
            Timestamp when the next invoice will be generated by this recurring
            invoice.
          type: string
          example: '1647259198'
          readOnly: true
        reminderTotal:
          description: Total reminder amount
          type: string
          example: '0'
          readOnly: true
        reminderDebit:
          description: Debit of the reminder
          type: string
          example: '0'
          readOnly: true
        reminderDeadline:
          description: Deadline of the reminder as timestamp
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        reminderCharge:
          description: The additional reminder charge
          type: string
          example: '0'
          readOnly: true
        taxSet:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax set of the invoice. Needs to be added if you chose the tax type
            custom
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          type: object
          readOnly: true
        address:
          description: "Complete address of the recipient including name, street, city, zip and country.\r\n     * Line breaks can be used and will be displayed on the invoice pdf."
          type: string
          example: |-
            name
            street
            postCode city
          readOnly: true
        currency:
          description: >-
            Currency used in the invoice. Needs to be currency code according to
            ISO-4217
          type: string
          example: EUR
          readOnly: true
        sumNet:
          description: Net sum of the invoice
          type: string
          example: '100'
          readOnly: true
        sumTax:
          description: Tax sum of the invoice
          type: string
          example: '19'
          readOnly: true
        sumGross:
          description: Gross sum of the invoice
          type: string
          example: '119'
          readOnly: true
        sumDiscounts:
          description: Sum of all discounts in the invoice
          type: string
          example: '0'
          readOnly: true
        sumNetForeignCurrency:
          description: Net sum of the invoice in the foreign currency
          type: string
          example: '0'
          readOnly: true
        sumTaxForeignCurrency:
          description: Tax sum of the invoice in the foreign currency
          type: string
          example: '0'
          readOnly: true
        sumGrossForeignCurrency:
          description: Gross sum of the invoice in the foreign currency
          type: string
          example: '0'
          readOnly: true
        sumDiscountsForeignCurrency:
          description: Discounts sum of the invoice in the foreign currency
          type: string
          example: '0'
          readOnly: true
        sumNetAccounting:
          description: Net accounting sum of the invoice. Is usually the same as sumNet
          type: string
          example: '0'
          readOnly: true
        sumTaxAccounting:
          description: Tax accounting sum of the invoice. Is usually the same as sumTax
          type: string
          example: '0'
          readOnly: true
        sumGrossAccounting:
          description: Gross accounting sum of the invoice. Is usually the same as sumGross
          type: string
          example: '0'
          readOnly: true
        paidAmount:
          description: Amount which has already been paid for this invoice by the customer
          type: number
          format: float
          example: 0
          readOnly: true
        customerInternalNote:
          description: >-
            Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          type: string
          readOnly: true
        showNet:
          description: >-
            If true, the net amount of each position will be shown on the
            invoice. Otherwise gross amount
          type: boolean
          example: '1'
          readOnly: true
        enshrined:
          description: >-
            Enshrined invoices cannot be changed. Can only be set via
            [Invoice/{invoiceId}/enshrine](#tag/Invoice/operation/invoiceEnshrine).
            This operation cannot be undone.
          type: string
          format: date-time
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        sendType:
          description: "Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!"
          type: string
          enum:
            - VPR
            - VPDF
            - VM
            - VP
          readOnly: true
        deliveryDateUntil:
          description: "If the delivery date should be a time range, another timestamp can be provided in this attribute\r\n     * to define a range from timestamp used in deliveryDate attribute to the timestamp used here."
          type: string
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        datevConnectOnline:
          description: Internal attribute
          type: object
          readOnly: true
        sendPaymentReceivedNotificationDate:
          description: Internal attribute
          type: string
          example: '0'
          readOnly: true
      type: object
    Model_Invoice:
      title: Invoice model
      description: Invoice model
      required:
        - invoiceDate
        - contact
        - discount
        - status
        - addressCountry
        - contactPerson
        - taxRate
        - taxRule
        - taxText
        - taxType
        - invoiceType
        - currency
        - mapAll
      properties:
        id:
          description: >-
            The invoice id. <span style='color:red'>Required</span> if you want
            to create or update an invoice position for an existing invoice
          type: integer
          example: null
          nullable: true
        objectName:
          description: The invoice object name.
          type: string
          example: Invoice
          nullable: false
        invoiceNumber:
          description: The invoice number
          type: string
          readOnly: false
          example: RE-1000
          nullable: true
        contact:
          description: The contact used in the invoice
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: false
        contactPerson:
          description: The user who acts as a contact person for the invoice
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
        create:
          description: Date of invoice creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last invoice update
          type: string
          format: date-time
          readOnly: true
        sevClient:
          description: Client to which invoice belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        invoiceDate:
          description: >-
            Needs to be provided as timestamp or dd.mm.yyyy


            **Requirements:**

            * For final invoices (invoiceType = 'ER'), the invoiceDate must be
            later than or equal to the invoiceDate of related advance
            (invoiceType = 'AR') / partial (invoiceType = 'TR') invoices.</li>
          type: string
          example: 01.01.2022
          nullable: false
        header:
          description: Normally consist of prefix plus the invoice number
          type: string
          nullable: true
          example: Invoice RE-1000
        headText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
          example: header information
        footText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
          example: footer information
        timeToPay:
          description: The time the customer has to pay the invoice in days
          type: integer
          nullable: true
          example: 20
        discount:
          description: >-
            If you want to give a discount, define the percentage here.
            Otherwise provide zero as value
          type: integer
          example: 0
          nullable: false
        address:
          description: "Complete address of the recipient including name, street, city, zip and country.\r\n     * Line breaks can be used and will be displayed on the invoice pdf."
          type: string
          example: |-
            name
            street
            postCode city
          nullable: true
        addressCountry:
          description: Can be omitted as complete address is defined in address attribute
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: integer
              example: 1
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
              example: StaticCountry
          type: object
          nullable: false
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          type: string
          format: date-time
          nullable: true
        createUser:
          description: Will be filled automatically by our system and can't be changed
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          readOnly: true
        deliveryDate:
          description: >-
            Timestamp. This can also be a date range if you also use the
            attribute deliveryDateUntil
          type: string
          format: date-time
          example: 01.01.2022
          nullable: true
        deliveryDateUntil:
          description: "If the delivery date should be a time range, another timestamp can be provided in this attribute\r\n     * to define a range from timestamp used in deliveryDate attribute to the timestamp used here."
          type: integer
          example: null
          nullable: true
        status:
          description: "Please have a look in our\r\n     <a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>\r\n     to see what the different status codes mean"
          type: string
          enum:
            - '50'
            - '100'
            - '200'
            - '750'
            - '1000'
          example: '100'
          nullable: false
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n    If yes, the invoice must not contain any vat"
          type: boolean
          example: 0
          nullable: true
        taxRate:
          description: >-
            This is not used anymore. Use the taxRate of the individual
            positions instead.
          type: number
          format: float
          example: 0
          nullable: false
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                  - `2` - Ausfuhren - allowedTaxRates: 0.0
                  - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                  - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          type: string
          example: Umsatzsteuer 19%
          nullable: false
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the invoice.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          enum:
            - default
            - eu
            - noteu
            - custom
          nullable: false
        taxSet:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax set of the invoice. Needs to be added if you chose the tax type
            custom
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          example: null
          type: object
          nullable: true
        dunningLevel:
          description: "Defines how many reminders have already been sent for the invoice.\r\n    Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent."
          type: integer
          nullable: true
          readOnly: true
        paymentMethod:
          description: Payment method used for the invoice
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the payment method
              type: integer
              example: 21919
            objectName:
              description: Model name, which is 'PaymentMethod'
              type: string
              example: PaymentMethod
          type: object
        sendDate:
          description: The date the invoice was sent to the customer
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
        invoiceType:
          description: "Type of the invoice. For more information on the different types, check\r\n     <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section\r\n"
          type: string
          example: RE
          enum:
            - RE
            - WKR
            - SR
            - MA
            - TR
            - ER
          nullable: false
        accountIntervall:
          description: "The interval in which recurring invoices are due as ISO-8601 duration.<br>\r\n     Necessary attribute for all recurring invoices."
          type: string
          nullable: true
          readOnly: true
        accountNextInvoice:
          description: >-
            Timestamp when the next invoice will be generated by this recurring
            invoice.
          type: integer
          nullable: true
          readOnly: true
        currency:
          description: >-
            Currency used in the invoice. Needs to be currency code according to
            ISO-4217
          type: string
          example: EUR
          nullable: false
        sumNet:
          description: Net sum of the invoice
          type: number
          format: float
          readOnly: true
          nullable: false
        sumTax:
          description: Tax sum of the invoice
          type: number
          format: float
          readOnly: true
          nullable: false
        sumGross:
          description: Gross sum of the invoice
          type: number
          format: float
          readOnly: true
          nullable: false
        sumDiscounts:
          description: Sum of all discounts in the invoice
          type: number
          format: float
          readOnly: true
          nullable: false
        sumNetForeignCurrency:
          description: Net sum of the invoice in the foreign currency
          type: number
          format: float
          readOnly: true
          nullable: false
        sumTaxForeignCurrency:
          description: Tax sum of the invoice in the foreign currency
          type: number
          format: float
          readOnly: true
          nullable: false
        sumGrossForeignCurrency:
          description: Gross sum of the invoice in the foreign currency
          type: number
          format: float
          readOnly: true
          nullable: false
        sumDiscountsForeignCurrency:
          description: Discounts sum of the invoice in the foreign currency
          type: number
          format: float
          readOnly: true
          nullable: false
        sumNetAccounting:
          description: Net accounting sum of the invoice. Is usually the same as sumNet
          type: number
          format: float
          readOnly: true
          nullable: false
        sumTaxAccounting:
          description: Tax accounting sum of the invoice. Is usually the same as sumTax
          type: number
          format: float
          readOnly: true
          nullable: false
        sumGrossAccounting:
          description: Gross accounting sum of the invoice. Is usually the same as sumGross
          type: number
          format: float
          readOnly: true
          nullable: false
        paidAmount:
          description: Amount which has already been paid for this invoice by the customer
          type: number
          format: float
          readOnly: true
          nullable: true
        showNet:
          description: >-
            If true, the net amount of each position will be shown on the
            invoice. Otherwise gross amount
          type: boolean
          example: '1'
          nullable: false
        enshrined:
          description: >-
            Enshrined invoices cannot be changed. Can only be set via
            [Invoice/{invoiceId}/enshrine](#tag/Invoice/operation/invoiceEnshrine).
            This operation cannot be undone.
          type: string
          format: date-time
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        sendType:
          description: Type which was used to send the invoice.
          type: string
          enum:
            - VPR
            - VPDF
            - VM
            - VP
          nullable: true
        origin:
          description: Origin of the invoice. Could f.e. be an order
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: string
              example: '1'
            objectName:
              description: Model name, which could be 'Order'
              type: string
              example: Order
          example: null
          type: object
          nullable: true
        customerInternalNote:
          description: >-
            Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          type: string
          example: null
          nullable: true
        mapAll:
          type: boolean
          nullable: false
      type: object
    Model_InvoicePos:
      title: Invoice position model
      description: Invoice position model
      required:
        - unity
        - taxRate
        - quantity
        - objectName
        - mapAll
      properties:
        id:
          description: >-
            The invoice position id. <span style='color:red'>Required</span> if
            you want to update an invoice position for an existing invoice
          type: integer
          example: null
          nullable: false
        objectName:
          description: The invoice position object name
          type: string
          example: InvoicePos
          nullable: false
        mapAll:
          type: boolean
          nullable: false
        create:
          description: Date of invoice position creation
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        update:
          description: Date of last invoice position update
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        invoice:
          description: The invoice to which the position belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the invoice
              type: integer
            objectName:
              description: Model name, which is 'Invoice'
              type: string
              example: Invoice
          type: object
          readOnly: true
        part:
          description: Part from your inventory which is used in the position.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the part
              type: integer
            objectName:
              description: Model name, which is 'Part'
              type: string
              example: Part
          type: object
        quantity:
          description: Quantity of the article/part
          type: number
          format: float
          example: 1
          nullable: false
        price:
          description: >-
            Price of the article/part. Is either gross or net, depending on the
            sevdesk account setting.
          type: number
          format: float
          example: 100
          nullable: true
        name:
          description: Name of the article/part.
          type: string
          example: Dragonglass
          nullable: true
        unity:
          description: The unit in which the positions part is measured
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the unit
              type: integer
              example: 1
            objectName:
              description: Model name, which is 'Unity'
              type: string
              example: Unity
          type: object
        sevClient:
          description: >-
            Client to which invoice position belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        positionNumber:
          description: >-
            Position number of your position. Can be used to order multiple
            positions.
          type: integer
          nullable: true
        text:
          description: A text describing your position.
          type: string
          nullable: true
        discount:
          description: An optional discount of the position.
          type: number
          format: float
          nullable: true
        taxRate:
          description: Tax rate of the position.
          type: number
          format: float
          example: 19
          nullable: false
        sumDiscount:
          description: Discount sum of the position
          type: number
          format: float
          readOnly: true
          nullable: true
        sumNetAccounting:
          description: Net accounting sum of the position
          type: number
          format: float
          readOnly: true
          nullable: true
        sumTaxAccounting:
          description: Tax accounting sum of the position
          type: number
          format: float
          readOnly: true
          nullable: true
        sumGrossAccounting:
          description: Gross accounting sum of the position
          type: number
          format: float
          readOnly: true
          nullable: true
        priceNet:
          description: Net price of the part
          type: number
          format: float
          readOnly: true
          nullable: true
        priceGross:
          description: Gross price of the part
          type: number
          format: float
          example: 100
          nullable: true
        priceTax:
          description: Tax on the price of the part
          type: number
          format: float
          nullable: true
      type: object
    saveInvoice:
      type: object
      required:
        - invoice
        - invoicePos
      properties:
        invoice:
          $ref: '#/components/schemas/Model_Invoice'
        invoicePosSave:
          type: array
          items:
            $ref: '#/components/schemas/Model_InvoicePos'
        invoicePosDelete:
          required:
            - id
            - objectName
          properties:
            id:
              description: Id of invoice position
              type: integer
            objectName:
              description: Object name of invoice position
              type: string
          default: null
        filename:
          description: Filename of a previously upload file which should be attached.
          type: string
          format: binary
        discountSave:
          required:
            - discount
            - text
            - percentage
            - value
            - objectName
            - mapAll
          type: array
          items:
            properties:
              discount:
                description: Defines if this is a discount or a surcharge
                type: boolean
                example: 'true'
              text:
                description: A text for your discount
                type: string
              percentage:
                description: Defines if this is a percentage or an absolute discount
                type: boolean
              value:
                description: Value of the discount
                type: number
              objectName:
                description: Object name of the discount
                type: string
                example: Discounts
              mapAll:
                description: Internal param
                type: boolean
                example: 'true'
        discountDelete:
          properties:
            id:
              description: ID of discount to delete
              type: integer
            objectName:
              description: Object name of discount
              type: string
              example: Discounts
          example: null
          type: object
    Model_InvoicePosResponse:
      title: Invoice position model
      description: Invoice position model
      properties:
        id:
          description: The invoice position id
          type: string
          readOnly: true
        objectName:
          description: The invoice position object name
          type: string
          example: InvoicePos
          readOnly: true
        create:
          description: Date of invoice position creation
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        update:
          description: Date of last invoice position update
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        invoice:
          description: The invoice to which the position belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the invoice
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'Invoice'
              type: string
              example: Invoice
          type: object
          readOnly: true
        part:
          description: Part from your inventory which is used in the position.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the part
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'Part'
              type: string
              example: Part
          type: object
          readOnly: true
        quantity:
          description: Quantity of the article/part
          type: boolean
          example: true
          readOnly: true
        price:
          description: >-
            Price of the article/part. Is either gross or net, depending on the
            sevdesk account setting.
          type: string
          example: '100'
          readOnly: true
        name:
          description: Name of the article/part.
          type: string
          example: Dragonglass
          readOnly: true
        unity:
          description: The unit in which the positions part is measured
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the unit
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'Unity'
              type: string
              example: Unity
          type: object
          readOnly: true
        sevClient:
          description: >-
            Client to which invoice position belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        positionNumber:
          description: >-
            Position number of your position. Can be used to order multiple
            positions.
          type: string
          example: '0'
          readOnly: true
        text:
          description: A text describing your position.
          type: string
          readOnly: true
        discount:
          description: An optional discount of the position.
          type: string
          example: '0'
          readOnly: true
        taxRate:
          description: Tax rate of the position.
          type: string
          example: '19'
          readOnly: true
        sumDiscount:
          description: Discount sum of the position
          type: string
          example: '0'
          readOnly: true
        sumNetAccounting:
          description: Net accounting sum of the position
          type: string
          example: '0'
          readOnly: true
        sumTaxAccounting:
          description: Tax accounting sum of the position
          type: string
          example: '0'
          readOnly: true
        sumGrossAccounting:
          description: Gross accounting sum of the position
          type: string
          example: '0'
          readOnly: true
        priceNet:
          description: Net price of the part
          type: string
          example: '0'
          readOnly: true
        priceGross:
          description: Gross price of the part
          type: string
          example: '100'
          readOnly: true
        priceTax:
          description: Tax on the price of the part
          type: string
          example: '0'
          readOnly: true
      type: object
    saveInvoiceResponse:
      type: object
      properties:
        invoice:
          $ref: '#/components/schemas/Model_InvoiceResponse'
        invoicePos:
          type: array
          items:
            $ref: '#/components/schemas/Model_InvoicePosResponse'
        filename:
          description: Filename of a previously upload file which should be attached.
          type: string
          format: binary
    Model_CreateInvoiceFromOrder:
      title: Create Invoice
      description: Invoice model
      required:
        - order
      properties:
        order:
          description: select the order for which you want to create the invoice
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the order
              type: integer
            objectName:
              description: Model name, which is 'Order'
              type: string
              example: Order
          nullable: false
          type: object
        type:
          description: defines the type of amount
          type: string
          enum:
            - percentage
            - net
            - gross
          nullable: true
        amount:
          description: Amount which has already been paid for this Invoice
          type: number
          example: 100
          nullable: true
        partialType:
          description: |-
            defines the type of the invoice
            1. RE - Schlussrechnung
            2. TR - Teilrechnung
            3. AR - Abschlagsrechnung
          enum:
            - RE
            - TR
            - AR
          type: string
          nullable: true
    Model_Email:
      title: Email model
      description: Email model
      required:
        - from
        - to
        - subject
      properties:
        id:
          description: The email id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The email object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of mail creation
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        update:
          description: Date of last mail update
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        object:
          $ref: '#/components/schemas/Model_InvoiceResponse'
        from:
          description: The sender of the email
          type: string
          nullable: false
        to:
          description: The recipient of the email
          type: string
          nullable: false
        subject:
          description: The subject of the email
          type: string
          nullable: false
        text:
          description: The text of the email
          type: string
          nullable: true
        sevClient:
          description: Client to which mail belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        cc:
          description: A list of mail addresses which are in the cc
          type: string
          nullable: true
        bcc:
          description: A list of mail addresses which are in the bcc
          type: string
          nullable: true
        arrived:
          description: Date the mail arrived
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
      type: object
    Model_ChangeLayout:
      title: Layout model
      description: Layout model
      required:
        - key
        - value
      properties:
        key:
          description: the type to be changed
          type: string
          enum:
            - language
            - template
            - letterpaper
            - payPal
          example: template
          nullable: false
        value:
          description: the id/value of the template/letterpaper/language/payPal.
          type: string
          example: 573ef2706bd2d50366786471
    Model_ChangeLayoutResponse:
      title: Layout model
      description: Layout model
      type: object
      properties:
        result:
          type: string
          example: '1'
        metadaten:
          type: object
          properties:
            pages:
              description: the number of pages in the document
              type: integer
              example: 1
            docId:
              description: the id of the document
              type: string
              readOnly: true
            thumbs:
              description: the pdf file
              type: array
              items:
                properties:
                  key:
                    type: string
                    example: language
                  name:
                    type: string
                    example: Sprache
                  values:
                    type: array
                    items:
                      properties:
                        name:
                          type: string
                          example: deutsch
                        value:
                          type: string
                          example: de_DE
                        translationCode:
                          type: string
                          example: SEVDOC_LANG_DE_DE
    Model_OrderResponse:
      title: Order model
      description: Order model
      properties:
        id:
          description: The order id
          type: string
          readOnly: true
          nullable: false
          example: '0'
        objectName:
          description: The order object name
          type: string
          readOnly: true
          nullable: false
          example: Order
        create:
          description: Date of order creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last order update
          type: string
          format: date-time
          readOnly: true
        orderNumber:
          description: The order number
          type: string
          example: Offer-1000
        contact:
          description: The contact used in the order
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: false
        orderDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2020
          nullable: false
        status:
          description: "Please have a look in \r\n    <a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>\r\n    to see what the different status codes mean"
          type: string
          enum:
            - '100'
            - '200'
            - '300'
            - '500'
            - '750'
            - '1000'
          example: '100'
          nullable: false
        header:
          description: Normally consist of prefix plus the order number
          type: string
          example: My Offer-1000
          nullable: false
        headText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        footText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        addressCountry:
          description: Can be omitted as complete address is defined in address attribute
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: string
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
          type: object
          nullable: true
        createUser:
          description: Will be filled automatically by our system and can't be changed
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          readOnly: true
        sevClient:
          description: Client to which order belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        deliveryTerms:
          description: Delivery terms of the order
          type: string
          nullable: true
        paymentTerms:
          description: Payment terms of the order
          type: string
          nullable: true
        origin:
          description: Object from which the order was created. For example an offer.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: string
              example: '0'
            objectName:
              description: Model name of the object. Could be 'Order'.
              type: string
              example: Order
          type: object
          nullable: true
        version:
          description: "Version of the order.<br>\r\n    Can be used if you have multiple drafts for the same order.<br>\r\n    Should start with 0"
          type: string
          example: '0'
          nullable: false
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n    If yes, the order must not contain any vat"
          type: boolean
          example: '0'
          nullable: false
        contactPerson:
          description: The user who acts as a contact person for the order
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
        taxRate:
          description: >-
            This is not used anymore. Use the taxRate of the individual
            positions instead.
          type: string
          example: '0'
          nullable: false
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                  - `2` - Ausfuhren - allowedTaxRates: 0.0
                  - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                  - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxSet:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax set of the order. Needs to be added if you chose the tax type
            custom
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          type: object
          nullable: true
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          type: string
          example: Umsatzsteuer 19%
          nullable: false
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the order.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          nullable: false
        orderType:
          description: "Type of the order. For more information on the different types, check\r\n    <a href='#tag/Order/Types-and-status-of-orders'>this</a>\r\n"
          type: string
          enum:
            - AN
            - AB
            - LI
          example: AN
          nullable: false
        sendDate:
          description: The date the order was sent to the customer
          type: string
          format: date-time
          nullable: true
        address:
          description: "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf."
          type: string
          nullable: true
        currency:
          description: >-
            Currency used in the order. Needs to be currency code according to
            ISO-4217
          type: string
          example: EUR
          nullable: false
        sumNet:
          description: Net sum of the order
          type: string
          readOnly: true
          nullable: false
        sumTax:
          description: Tax sum of the order
          type: string
          readOnly: true
          nullable: false
        sumGross:
          description: Gross sum of the order
          type: string
          readOnly: true
          nullable: false
        sumDiscounts:
          description: Sum of all discounts in the order
          type: string
          readOnly: true
          nullable: false
        sumNetForeignCurrency:
          description: Net sum of the order in the foreign currency
          type: string
          readOnly: true
          nullable: false
        sumTaxForeignCurrency:
          description: Tax sum of the order in the foreign currency
          type: string
          readOnly: true
          nullable: false
        sumGrossForeignCurrency:
          description: Gross sum of the order in the foreign currency
          type: string
          readOnly: true
          nullable: false
        sumDiscountsForeignCurrency:
          description: Discounts sum of the order in the foreign currency
          type: string
          readOnly: true
          nullable: false
        customerInternalNote:
          description: >-
            Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          type: string
          nullable: true
        showNet:
          description: >-
            If true, the net amount of each position will be shown on the order.
            Otherwise gross amount
          type: boolean
          example: 1
          nullable: false
        sendType:
          description: "Type which was used to send the order. IMPORTANT: Please refer to the order section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!"
          type: string
          enum:
            - VPR
            - VPDF
            - VM
            - VP
          nullable: true
      type: object
    Model_Order:
      title: Order model
      description: Order model
      required:
        - orderNumber
        - orderDate
        - contact
        - status
        - addressCountry
        - contactPerson
        - taxRate
        - taxRule
        - taxText
        - taxType
        - currency
        - header
        - version
        - mapAll
      properties:
        id:
          description: The order id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The order object name
          type: string
          nullable: false
        mapAll:
          type: boolean
          nullable: false
        create:
          description: Date of order creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last order update
          type: string
          format: date-time
          readOnly: true
        orderNumber:
          description: The order number
          type: string
          example: Offer-1000
        contact:
          description: The contact used in the order
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: false
        orderDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2020
          nullable: false
        status:
          description: "Please have a look in \r\n    <a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>\r\n    to see what the different status codes mean"
          type: integer
          enum:
            - 100
            - 200
            - 300
            - 500
            - 750
            - 1000
          example: 100
          nullable: false
        header:
          description: Normally consist of prefix plus the order number
          type: string
          example: My Offer-1000
          nullable: false
        headText:
          description: Certain html tags can be used here to format your text
          type: string
          default: null
          example: header information
          nullable: true
        footText:
          description: Certain html tags can be used here to format your text
          type: string
          default: null
          example: footer information
          nullable: true
        addressCountry:
          description: Can be omitted as complete address is defined in address attribute
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: integer
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
              example: StaticCountry
          type: object
          nullable: false
        deliveryTerms:
          description: Delivery terms of the order
          type: string
          default: null
          example: delivery terms
          nullable: true
        paymentTerms:
          description: Payment terms of the order
          type: string
          default: null
          example: payment terms
          nullable: true
        version:
          description: "Version of the order.<br>\r\n    Can be used if you have multiple drafts for the same order.<br>\r\n    Should start with 0"
          type: integer
          example: 0
          nullable: false
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n    If yes, the order must not contain any vat"
          type: boolean
          example: 0
          nullable: false
        contactPerson:
          description: The user who acts as a contact person for the order
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
              example: 0
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          nullable: false
        taxRate:
          description: >-
            This is not used anymore. Use the taxRate of the individual
            positions instead.
          type: number
          example: 0
          nullable: false
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                  - `2` - Ausfuhren - allowedTaxRates: 0.0
                  - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                  - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxSet:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax set of the order. Needs to be added if you chose the tax type
            custom
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: integer
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          type: object
          nullable: true
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          type: string
          example: Umsatzsteuer 19%
          nullable: false
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the order.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          nullable: false
        orderType:
          description: "Type of the order. For more information on the different types, check\r\n    <a href='#tag/Order/Types-and-status-of-orders'>this</a> \r\n"
          type: string
          enum:
            - AN
            - AB
            - LI
          example: AN
          nullable: false
        sendDate:
          description: The date the order was sent to the customer
          type: string
          format: date-time
          example: 26.07.2022
          nullable: true
        address:
          description: "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf."
          type: string
          default: null
          example: name\nstreet\npostCode city
          nullable: true
        currency:
          description: >-
            Currency used in the order. Needs to be currency code according to
            ISO-4217
          type: string
          example: EUR
          nullable: false
        customerInternalNote:
          description: >-
            Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          type: string
          default: null
          example: customer internal note
          nullable: true
        showNet:
          description: >-
            If true, the net amount of each position will be shown on the order.
            Otherwise gross amount
          type: boolean
          example: 1
          nullable: false
        sendType:
          description: "Type which was used to send the order. IMPORTANT: Please refer to the order section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!"
          type: string
          default: null
          example: VPR
          enum:
            - VPR
            - VPDF
            - VM
            - VP
          nullable: true
        origin:
          description: Object from which the order was created. For example an offer.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: integer
            objectName:
              description: Model name of the object. Could be 'Order'.
              type: string
          type: object
          nullable: true
      type: object
    Model_OrderPos:
      title: Order position model
      description: Order position model
      required:
        - unity
        - taxRate
        - quantity
      properties:
        id:
          description: The order position id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The order position object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of order position creation
          type: string
          readOnly: true
        update:
          description: Date of last order position update
          type: string
          readOnly: true
        order:
          description: The order to which the position belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the order
              type: integer
            objectName:
              description: Model name, which is 'Order'
              type: string
              example: Order
          type: object
        part:
          description: Part from your inventory which is used in the position.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the part
              type: integer
            objectName:
              description: Model name, which is 'Part'
              type: string
              example: Part
          type: object
        quantity:
          description: Quantity of the article/part
          type: number
          example: 1
          nullable: false
        price:
          description: >-
            Price of the article/part. Is either gross or net, depending on the
            sevdesk account setting.
          type: number
          example: 100
          nullable: true
        priceNet:
          description: Net price of the part
          type: number
          readOnly: true
          nullable: true
        priceTax:
          description: Tax on the price of the part
          type: number
          nullable: true
        priceGross:
          description: Gross price of the part
          type: number
          nullable: true
        name:
          description: Name of the article/part.
          type: string
          example: Dragonglass
          nullable: true
        unity:
          description: The unit in which the positions part is measured
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the unit
              type: integer
            objectName:
              description: Model name, which is 'Unity'
              type: string
              example: Unity
          type: object
        sevClient:
          description: Client to which order position belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        positionNumber:
          description: >-
            Position number of your position. Can be used to order multiple
            positions.
          type: integer
          example: 1
          nullable: true
        text:
          description: A text describing your position.
          type: string
          nullable: true
        discount:
          description: An optional discount of the position.
          type: number
          nullable: true
        optional:
          description: Defines if the position is optional.
          type: boolean
          nullable: true
        taxRate:
          description: Tax rate of the position.
          type: number
          example: 19
          nullable: false
        sumDiscount:
          description: Discount sum of the position
          type: number
          readOnly: true
          nullable: true
      type: object
    saveOrder:
      type: object
      required:
        - order
        - orderPos
      properties:
        order:
          $ref: '#/components/schemas/Model_Order'
        orderPosSave:
          type: array
          items:
            $ref: '#/components/schemas/Model_OrderPos'
        orderPosDelete:
          required:
            - id
            - objectName
          properties:
            id:
              description: Id of order position
              type: integer
            objectName:
              description: Object name of order position
              type: string
          default: null
    Model_OrderPosResponse:
      title: Order position model
      description: Order position model
      properties:
        id:
          description: The order position id
          type: string
          readOnly: true
          example: '0'
          nullable: false
        objectName:
          description: The order position object name
          type: string
          example: OrderPos
          readOnly: true
          nullable: false
        create:
          description: Date of order position creation
          type: string
          format: date-time
          readOnly: true
          example: 01.01.2020
        update:
          description: Date of last order position update
          type: string
          format: date-time
          readOnly: true
          example: 01.01.2020
        order:
          description: The order to which the position belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the order
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Order'
              type: string
              example: Order
          type: object
        part:
          description: Part from your inventory which is used in the position.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the part
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Part'
              type: string
              example: Part
          type: object
        quantity:
          description: Quantity of the article/part
          type: string
          example: '1'
          nullable: false
        price:
          description: >-
            Price of the article/part. Is either gross or net, depending on the
            sevdesk account setting.
          type: string
          example: '100'
          nullable: true
        priceNet:
          description: Net price of the part
          type: string
          readOnly: true
          example: '100'
          nullable: true
        priceTax:
          description: Tax on the price of the part
          type: string
          example: '19'
          nullable: true
        priceGross:
          description: Gross price of the part
          type: string
          example: '119'
          nullable: true
        name:
          description: Name of the article/part.
          type: string
          example: Dragonglass
          nullable: true
        unity:
          description: The unit in which the positions part is measured
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the unit
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Unity'
              type: string
              example: Unity
          type: object
        sevClient:
          description: Client to which order position belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        positionNumber:
          description: >-
            Position number of your position. Can be used to order multiple
            positions.
          type: string
          example: '1'
          nullable: true
        text:
          description: A text describing your position.
          type: string
          nullable: true
        discount:
          description: An optional discount of the position.
          type: string
          nullable: true
        optional:
          description: Defines if the position is optional.
          type: boolean
          nullable: true
        taxRate:
          description: Tax rate of the position.
          type: string
          example: '19'
          nullable: false
        sumDiscount:
          description: Discount sum of the position
          type: string
          readOnly: true
          nullable: true
      type: object
    saveOrderResponse:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Model_OrderResponse'
        orderPos:
          type: array
          items:
            $ref: '#/components/schemas/Model_OrderPosResponse'
    Model_OrderUpdate:
      title: Order model
      description: Order model
      properties:
        id:
          description: The order id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The order object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of order creation
          type: string
          format: date-time
          readOnly: true
        update:
          description: Date of last order update
          type: string
          format: date-time
          readOnly: true
        orderNumber:
          description: The order number
          type: string
          example: Offer-1000
        contact:
          description: The contact used in the order
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: true
        orderDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
        status:
          description: "Please have a look in \r\n    <a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>\r\n    to see what the different status codes mean"
          type: integer
          enum:
            - 100
            - 200
            - 300
            - 500
            - 750
            - 1000
          example: 100
          nullable: true
        header:
          description: Normally consist of prefix plus the order number
          type: string
          example: My Offer-1000
          nullable: true
        headText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        footText:
          description: Certain html tags can be used here to format your text
          type: string
          nullable: true
        addressCountry:
          description: Can be omitted as complete address is defined in address attribute
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the country
              type: integer
            objectName:
              description: Model name, which is 'StaticCountry'
              type: string
          type: object
          nullable: true
        createUser:
          description: Will be filled automatically by our system and can't be changed
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
            objectName:
              description: Model name, which is 'SevUser'
              type: string
          type: object
          readOnly: true
        sevClient:
          description: Client to which order belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        deliveryTerms:
          description: Delivery terms of the order
          type: string
          nullable: true
        paymentTerms:
          description: Payment terms of the order
          type: string
          nullable: true
        origin:
          description: Object from which the order was created. For example an offer.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: integer
            objectName:
              description: Model name of the object. Could be 'Order'.
              type: string
          type: object
          nullable: true
        version:
          description: "Version of the order.<br>\r\n    Can be used if you have multiple drafts for the same order.<br>\r\n    Should start with 0"
          type: integer
          example: 0
          nullable: true
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n    If yes, the order must not contain any vat"
          type: boolean
          example: 0
          nullable: true
        contactPerson:
          description: The user who acts as a contact person for the order
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
        taxRate:
          description: >-
            This is not used anymore. Use the taxRate of the individual
            positions instead.
          type: number
          example: 0
          nullable: true
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                  - `2` - Ausfuhren - allowedTaxRates: 0.0
                  - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                  - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxSet:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax set of the order. Needs to be added if you chose the tax type
            custom
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: integer
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
          type: object
          nullable: true
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          type: string
          example: Umsatzsteuer 19%
          nullable: true
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the order.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          nullable: true
        orderType:
          description: "Type of the order. For more information on the different types, check\r\n    <a href='#tag/Order/Types-and-status-of-orders'>this</a>\r\n"
          type: string
          enum:
            - AN
            - AB
            - LI
          example: AN
          nullable: true
        sendDate:
          description: The date the order was sent to the customer
          type: string
          format: date-time
          nullable: true
        address:
          description: "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf."
          type: string
          nullable: true
        currency:
          description: >-
            Currency used in the order. Needs to be currency code according to
            ISO-4217
          type: string
          example: EUR
          nullable: true
        sumNet:
          description: Net sum of the order
          type: number
          readOnly: true
          nullable: false
        sumTax:
          description: Tax sum of the order
          type: number
          readOnly: true
          nullable: false
        sumGross:
          description: Gross sum of the order
          type: number
          readOnly: true
          nullable: false
        sumDiscounts:
          description: Sum of all discounts in the order
          type: number
          readOnly: true
          nullable: false
        sumNetForeignCurrency:
          description: Net sum of the order in the foreign currency
          type: number
          readOnly: true
          nullable: false
        sumTaxForeignCurrency:
          description: Tax sum of the order in the foreign currency
          type: number
          readOnly: true
          nullable: false
        sumGrossForeignCurrency:
          description: Gross sum of the order in the foreign currency
          type: number
          readOnly: true
          nullable: false
        sumDiscountsForeignCurrency:
          description: Discounts sum of the order in the foreign currency
          type: number
          readOnly: true
          nullable: false
        customerInternalNote:
          description: >-
            Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          type: string
          nullable: true
        showNet:
          description: >-
            If true, the net amount of each position will be shown on the order.
            Otherwise gross amount
          type: boolean
          example: 1
          nullable: true
        sendType:
          description: "Type which was used to send the order. IMPORTANT: Please refer to the order section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!"
          type: string
          enum:
            - VPR
            - VPDF
            - VM
            - VP
          nullable: true
      type: object
    Model_Discount:
      title: Discounts
      description: Discount model
      properties:
        id:
          description: the id of the discount
          type: string
          example: '0'
          readOnly: true
        objectName:
          description: Model name, which is 'Discounts'
          type: string
          example: Discounts
          readOnly: true
        create:
          description: Date of discount creation
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        update:
          description: Date of last discount update
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        object:
          description: The order used for the discount
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the order
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Order'
              type: string
              example: Order
          type: object
          readOnly: true
        sevClient:
          description: Client to which invoice belongs. Will be filled automatically
          type: string
          example: '0'
          readOnly: true
        text:
          description: A text describing your position.
          type: string
          readOnly: true
        percentage:
          description: Defines if this is a percentage or an absolute discount
          type: string
          example: '1'
        value:
          description: Value of the discount
          type: string
          example: '10'
        isNet:
          description: |-
            Defines is the Discount net or gross
            0 - gross
            1 - net
          type: string
          example: '1'
    Model_EmailOrder:
      title: Email model
      description: Email model
      required:
        - from
        - to
        - subject
      properties:
        id:
          description: The email id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The email object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of mail creation
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        update:
          description: Date of last mail update
          type: string
          format: date-time
          example: 01.01.2020
          readOnly: true
        object:
          $ref: '#/components/schemas/Model_OrderResponse'
        from:
          description: The sender of the email
          type: string
          nullable: false
        to:
          description: The recipient of the email
          type: string
          nullable: false
        subject:
          description: The subject of the email
          type: string
          nullable: false
        text:
          description: The text of the email
          type: string
          nullable: true
        sevClient:
          description: Client to which mail belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        cc:
          description: A list of mail addresses which are in the cc
          type: string
          nullable: true
        bcc:
          description: A list of mail addresses which are in the bcc
          type: string
          nullable: true
        arrived:
          description: Date the mail arrived
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
      type: object
    Model_CreatePackingListFromOrder:
      title: Create packing list
      description: order model
      required:
        - id
        - objectName
      properties:
        id:
          description: Unique identifier of the order
          type: integer
        objectName:
          description: Model name, which is 'Order'
          type: string
          example: Order
      nullable: false
      type: object
    Model_OrderPosUpdate:
      title: Order position model
      description: Order position model
      properties:
        id:
          description: The order position id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The order position object name
          type: string
          example: OrderPos
          readOnly: true
          nullable: false
        create:
          description: Date of order position creation
          type: string
          format: date-time
          readOnly: true
          example: 01.01.2020
        update:
          description: Date of last order position update
          type: string
          format: date-time
          readOnly: true
          example: 01.01.2020
        order:
          description: The order to which the position belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the order
              type: integer
            objectName:
              description: Model name, which is 'Order'
              type: string
              example: Order
          type: object
        part:
          description: Part from your inventory which is used in the position.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the part
              type: integer
            objectName:
              description: Model name, which is 'Part'
              type: string
              example: Part
          type: object
        quantity:
          description: Quantity of the article/part
          type: number
          example: 1
          nullable: true
        price:
          description: >-
            Price of the article/part. Is either gross or net, depending on the
            sevdesk account setting.
          type: number
          example: 100
          nullable: true
        priceNet:
          description: Net price of the part
          type: number
          readOnly: true
          nullable: true
        priceTax:
          description: Tax on the price of the part
          type: number
          nullable: true
        priceGross:
          description: Gross price of the part
          type: number
          nullable: true
        name:
          description: Name of the article/part.
          type: string
          example: Dragonglass
          nullable: true
        unity:
          description: The unit in which the positions part is measured
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the unit
              type: integer
            objectName:
              description: Model name, which is 'Unity'
              type: string
              example: Unity
          type: object
        sevClient:
          description: Client to which order position belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        positionNumber:
          description: >-
            Position number of your position. Can be used to order multiple
            positions.
          type: integer
          example: 1
          nullable: true
        text:
          description: A text describing your position.
          type: string
          nullable: true
        discount:
          description: An optional discount of the position.
          type: number
          nullable: true
        optional:
          description: Defines if the position is optional.
          type: boolean
          nullable: true
        taxRate:
          description: Tax rate of the position.
          type: number
          example: 19
          nullable: true
        sumDiscount:
          description: Discount sum of the position
          type: number
          readOnly: true
          nullable: true
      type: object
    Model_Voucher:
      title: Voucher model
      description: Voucher model
      required:
        - creditDebit
        - taxType
        - taxRule
        - status
        - voucherType
        - mapAll
        - objectName
      properties:
        id:
          description: The voucher id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The voucher object name
          type: string
          nullable: false
        mapAll:
          type: boolean
          example: true
          nullable: false
        create:
          description: Date of voucher creation
          type: string
          format: date-time
          readOnly: true
          example: 01.01.2020
        update:
          description: Date of last voucher update
          type: string
          format: date-time
          readOnly: true
          example: 01.01.2020
        sevClient:
          description: Client to which voucher belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        createUser:
          description: User who created the voucher. Will be filled automatically.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: integer
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          readOnly: true
        voucherDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2022
          nullable: true
        supplier:
          description: >-
            The contact used in the voucher as a supplier.<br>

            If you don't have a contact as a supplier, you can set this object
            to null.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: true
        supplierName:
          description: "The supplier name.<br>\r\n     The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier."
          type: string
          example: John Snow
          nullable: true
        description:
          description: The description of the voucher. Essentially the voucher number.
          type: string
          example: Voucher-1000
          nullable: true
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          type: string
          format: date-time
          nullable: true
          example: 01.01.2022
        status:
          description: "Please have a look in \r\n    <a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>\r\n    to see what the different status codes mean"
          type: number
          enum:
            - 50
            - 100
            - 1000
          example: 50
          nullable: false
        sumNet:
          description: Net sum of the voucher
          type: number
          format: float
          readOnly: true
          nullable: false
        sumTax:
          description: Tax sum of the voucher
          type: number
          format: float
          readOnly: true
          nullable: false
        sumGross:
          description: Gross sum of the voucher
          type: number
          format: float
          readOnly: true
          nullable: false
        sumNetAccounting:
          description: Net accounting sum of the voucher. Is usually the same as sumNet
          type: number
          format: float
          readOnly: true
          nullable: false
        sumTaxAccounting:
          description: Tax accounting sum of the voucher. Is usually the same as sumTax
          type: number
          format: float
          readOnly: true
          nullable: false
        sumGrossAccounting:
          description: Gross accounting sum of the voucher. Is usually the same as sumGross
          type: number
          format: float
          readOnly: true
          nullable: false
        sumDiscounts:
          description: Sum of all discounts in the voucher
          type: number
          format: float
          readOnly: true
          nullable: false
        sumDiscountsForeignCurrency:
          description: Discounts sum of the voucher in the foreign currency
          type: number
          format: float
          readOnly: true
          nullable: false
        paidAmount:
          description: Amount which has already been paid for this voucher by the customer
          type: number
          format: float
          readOnly: true
          nullable: true
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
                  - `2` - Ausfuhren (tax rates: 0.0)
                  - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
                  - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the voucher.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          nullable: false
        creditDebit:
          description: Defines if your voucher is a credit (C) or debit (D)
          type: string
          enum:
            - C
            - D
          example: C
          nullable: false
        voucherType:
          description: "Type of the voucher. For more information on the different types, check\r\n     <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>\r\n"
          type: string
          enum:
            - VOU
            - RV
          example: VOU
          nullable: false
        currency:
          description: >-
            specifies which currency the voucher should have. Attention: If the
            currency differs from the default currency stored in the account,
            then either the "propertyForeignCurrencyDeadline" or
            "propertyExchangeRate" parameter must be specified. If both
            parameters are specified, then the "propertyForeignCurrencyDeadline"
            parameter is preferred
          type: string
          example: EUR
          nullable: true
        propertyForeignCurrencyDeadline:
          description: >-
            Defines the exchange rate day and and then the exchange rate is set
            from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2022
          nullable: true
        propertyExchangeRate:
          description: Defines the exchange rate
          type: number
          format: float
          example: 0.8912
          nullable: true
        recurringInterval:
          description: "The DateInterval in which recurring vouchers are generated.<br>\r\n     Necessary attribute for all recurring vouchers."
          type: string
          enum:
            - P0Y0M1W
            - P0Y0M2W
            - P0Y1M0W
            - P0Y3M0W
            - P0Y6M0W
            - P1Y0M0W
            - P2Y0M0W
            - P3Y0M0W
            - P4Y0M0W
            - P5Y0M0W
          nullable: true
          readOnly: true
        recurringStartDate:
          description: "The date when the recurring vouchers start being generated.<br>\r\n     Necessary attribute for all recurring vouchers."
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
          readOnly: true
        recurringNextVoucher:
          description: "The date when the next voucher should be generated.<br>\r\n     Necessary attribute for all recurring vouchers."
          type: string
          format: date-time
          example: 01.02.2020
          nullable: true
          readOnly: true
        recurringLastVoucher:
          description: The date when the last voucher was generated.
          type: string
          format: date-time
          example: 01.01.2021
          nullable: true
          readOnly: true
        recurringEndDate:
          description: "The date when the recurring vouchers end being generated.<br>\r\n    Necessary attribute for all recurring vouchers."
          type: string
          format: date-time
          example: 01.01.2021
          nullable: true
          readOnly: true
        enshrined:
          description: >-
            Enshrined vouchers cannot be changed. Can only be set via
            [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine).
            This operation cannot be undone.
          type: string
          format: date-time
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        taxSet:
          description: >-
            ** Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**


            Tax set of the voucher. Needs to be added if you chose the
            taxType=custom.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: integer
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          type: object
          example: null
          nullable: true
        paymentDeadline:
          description: Payment deadline of the voucher.
          type: string
          format: date-time
          nullable: true
          example: 01.01.2022
        deliveryDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2022
          nullable: false
        deliveryDateUntil:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 22.02.2022
          nullable: true
        document:
          description: The document of the voucher.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the document
              type: integer
            objectName:
              description: Model name, which is 'Document'
              type: string
              example: Document
          example: null
          type: object
          nullable: true
        costCentre:
          description: Cost centre for the voucher
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the cost centre
              type: integer
            objectName:
              description: Model name, which is 'CostCentre'
              type: string
              example: CostCentre
          example: null
          type: object
      type: object
    Model_VoucherPos:
      title: VoucherPos model
      description: Voucher position model
      required:
        - accountDatev
        - accountingType
        - voucher
        - taxRate
        - sumGross
        - sumNet
        - net
        - mapAll
        - objectName
      properties:
        id:
          description: The voucher position id
          type: integer
          readOnly: true
          nullable: false
        objectName:
          description: The voucher position object name
          type: string
          nullable: false
        mapAll:
          type: boolean
          nullable: false
        create:
          description: Date of voucher position creation
          type: string
          readOnly: true
          example: 01.01.2020
        update:
          description: Date of last voucher position update
          type: string
          readOnly: true
          example: 01.01.2020
        sevClient:
          description: >-
            Client to which voucher position belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: integer
            objectName:
              description: Model name, which is 'SevClient'
              type: string
          type: object
          readOnly: true
        voucher:
          description: The voucher to which the position belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the voucher
              type: integer
            objectName:
              description: Model name, which is 'Voucher'
              type: string
              example: Voucher
          type: object
          readOnly: true
        accountDatev:
          description: "<b>Use this in sevdesk-Update 2.0 (replaces accountingType).</b>\r\n     The account datev to which the position belongs.<br>\r\n     An account datev is the booking account to which the position belongs.<br>\r\n     For more information, please refer to\r\n <a href='#tag/Voucher/Account-Datev'>this</a> section."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the account datev
              type: integer
            objectName:
              description: Model name, which is 'AccountDatev'
              type: string
              example: AccountDatev
          type: object
        accountingType:
          description: "The accounting type to which the position belongs.<br>\r\n     An accounting type is the booking account to which the position belongs.<br>\r\n     For more information, please refer to\r\n <a href='#tag/Voucher/Accounting-type'>this</a> section."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the accounting type
              type: integer
            objectName:
              description: Model name, which is 'AccountingType'
              type: string
              example: AccountingType
          type: object
        estimatedAccountingType:
          description: "The accounting type to which the position belongs estimated by our voucher recognition.<br>\r\n    An accounting type is the booking account to which the position belongs.<br>\r\n    For more information, please refer to\r\n    <a href='#tag/Voucher/Accounting-type'>this</a> section."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the accounting type
              type: integer
            objectName:
              description: Model name, which is 'AccountingType'
              type: string
              example: AccountingType
          type: object
          readOnly: true
        taxRate:
          description: Tax rate of the voucher position.
          type: number
          format: float
          example: 19
        net:
          description: "Determines whether 'sumNet' or 'sumGross' is regarded.<br>\r\n     If both are not given, 'sum' is regarded and treated as net or gross depending on 'net'. \n All positions must be either net or gross, a mixture of the two is not possible."
          type: boolean
          example: 'true'
        isAsset:
          description: >-
            Determines whether position is regarded as an asset which can be
            depreciated.
          type: boolean
          example: 'false'
        sumNet:
          description: "Net sum of the voucher position.<br>\r\n    Only regarded if 'net' is 'true', otherwise its readOnly."
          type: number
          format: float
          example: 100
        sumTax:
          description: Tax sum of the voucher position.
          type: number
          format: float
          readOnly: true
          example: 19
        sumGross:
          description: "Gross sum of the voucher position.<br>\r\n    Only regarded if 'net' is 'false', otherwise its readOnly."
          type: number
          format: float
          example: 119
        sumNetAccounting:
          description: Net accounting sum. Is equal to sumNet.
          type: number
          format: float
          readOnly: true
        sumTaxAccounting:
          description: Tax accounting sum. Is equal to sumTax.
          type: number
          format: float
          readOnly: true
        sumGrossAccounting:
          description: Gross accounting sum. Is equal to sumGross.
          type: number
          format: float
          readOnly: true
        comment:
          description: Comment for the voucher position.
          type: string
          nullable: true
      type: object
    saveVoucher:
      type: object
      required:
        - voucher
        - voucherPos
      properties:
        voucher:
          $ref: '#/components/schemas/Model_Voucher'
        voucherPosSave:
          type: array
          items:
            $ref: '#/components/schemas/Model_VoucherPos'
        voucherPosDelete:
          required:
            - id
            - objectName
          properties:
            id:
              description: Id of voucher position
              type: integer
            objectName:
              description: Object name of voucher position
              type: string
          default: null
        filename:
          description: Filename of a previously upload file which should be attached.
          type: string
          format: binary
    Model_VoucherResponse:
      title: Voucher model
      description: Voucher model
      properties:
        id:
          description: The voucher id
          type: string
          example: '0'
          readOnly: true
          nullable: false
        objectName:
          description: The voucher object name
          type: string
          readOnly: true
          nullable: false
        mapAll:
          type: boolean
          example: true
          nullable: false
        create:
          description: Date of voucher creation
          type: string
          format: date-time
          readOnly: true
          example: 01.01.2020
        update:
          description: Date of last voucher update
          type: string
          format: date-time
          readOnly: true
          example: 01.01.2020
        sevClient:
          description: Client to which voucher belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        createUser:
          description: User who created the voucher. Will be filled automatically.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the user
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevUser'
              type: string
              example: SevUser
          type: object
          readOnly: true
        voucherDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
        supplier:
          description: >-
            The contact used in the voucher as a supplier.<br>

            If you don't have a contact as a supplier, you can set this object
            to null.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Contact'
              type: string
              example: Contact
          type: object
          nullable: true
        supplierName:
          description: "The supplier name.<br>\r\n     The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier."
          type: string
          example: John Snow
          nullable: true
        description:
          description: The description of the voucher. Essentially the voucher number.
          type: string
          example: Voucher-1000
          nullable: true
        document:
          description: The document of the voucher.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the document
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Document'
              type: string
              example: Document
          type: object
          nullable: true
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          type: string
          format: date-time
          nullable: true
          example: 01.01.2020
        status:
          description: "Please have a look in \r\n    <a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>\r\n    to see what the different status codes mean"
          type: string
          enum:
            - '50'
            - '100'
            - '1000'
          example: '50'
          nullable: true
        sumNet:
          description: Net sum of the voucher
          type: string
          example: '0'
          readOnly: true
          nullable: false
        sumTax:
          description: Tax sum of the voucher
          type: string
          example: '0'
          readOnly: true
          nullable: false
        sumGross:
          description: Gross sum of the voucher
          type: string
          example: '0'
          readOnly: true
          nullable: false
        sumNetAccounting:
          description: Net accounting sum of the voucher. Is usually the same as sumNet
          type: string
          example: '0'
          readOnly: true
          nullable: false
        sumTaxAccounting:
          description: Tax accounting sum of the voucher. Is usually the same as sumTax
          type: string
          example: '0'
          readOnly: true
          nullable: false
        sumGrossAccounting:
          description: Gross accounting sum of the voucher. Is usually the same as sumGross
          type: string
          example: '0'
          readOnly: true
          nullable: false
        sumDiscounts:
          description: Sum of all discounts in the voucher
          type: string
          example: '0'
          readOnly: true
          nullable: false
        sumDiscountsForeignCurrency:
          description: Discounts sum of the voucher in the foreign currency
          type: string
          example: '0'
          readOnly: true
          nullable: false
        paidAmount:
          description: Amount which has already been paid for this voucher by the customer
          type: number
          example: 0
          readOnly: true
          nullable: true
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
                  - `2` - Ausfuhren (tax rates: 0.0)
                  - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
                  - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the voucher.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
          nullable: true
        creditDebit:
          description: Defines if your voucher is a credit (C) or debit (D)
          type: string
          enum:
            - C
            - D
          example: C
          nullable: true
        costCentre:
          description: Cost centre for the voucher
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the cost centre
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'CostCentre'
              type: string
          type: object
        voucherType:
          description: "Type of the voucher. For more information on the different types, check\r\n     <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>\r\n"
          type: string
          enum:
            - VOU
            - RV
          example: VOU
          nullable: true
        currency:
          description: >-
            specifies which currency the voucher should have. Attention: If the
            currency differs from the default currency stored in the account,
            then either the "propertyForeignCurrencyDeadline" or
            "propertyExchangeRate" parameter must be specified. If both
            parameters are specified, then the "propertyForeignCurrencyDeadline"
            parameter is preferred
          type: string
          example: EUR
          nullable: true
        propertyForeignCurrencyDeadline:
          description: >-
            Defines the exchange rate day and and then the exchange rate is set
            from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2022
          nullable: true
        propertyExchangeRate:
          description: Defines the exchange rate
          type: string
          example: '0.8912'
          nullable: true
        recurringInterval:
          description: "The DateInterval in which recurring vouchers are generated.<br>\r\n     Necessary attribute for all recurring vouchers."
          type: string
          enum:
            - P0Y0M1W
            - P0Y0M2W
            - P0Y1M0W
            - P0Y3M0W
            - P0Y6M0W
            - P1Y0M0W
            - P2Y0M0W
            - P3Y0M0W
            - P4Y0M0W
            - P5Y0M0W
          nullable: true
        recurringStartDate:
          description: "The date when the recurring vouchers start being generated.<br>\r\n     Necessary attribute for all recurring vouchers."
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
        recurringNextVoucher:
          description: "The date when the next voucher should be generated.<br>\r\n     Necessary attribute for all recurring vouchers."
          type: string
          format: date-time
          example: 01.02.2020
          nullable: true
        recurringLastVoucher:
          description: The date when the last voucher was generated.
          type: string
          format: date-time
          example: 01.01.2021
          nullable: true
        recurringEndDate:
          description: "The date when the recurring vouchers end being generated.<br>\r\n    Necessary attribute for all recurring vouchers."
          type: string
          format: date-time
          example: 01.01.2021
          nullable: true
        enshrined:
          description: >-
            Enshrined vouchers cannot be changed. Can only be set via
            [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine).
            This operation cannot be undone.
          type: string
          format: date-time
          example: '2024-04-08T00:00:00+02:00'
          readOnly: true
        taxSet:
          description: >-
            **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**


            Tax set of the voucher. Needs to be added if you chose the
            taxType=custom.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          type: object
          nullable: true
        paymentDeadline:
          description: Payment deadline of the voucher.
          type: string
          format: date-time
          nullable: true
          example: 01.01.2020
        deliveryDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2020
          nullable: false
        deliveryDateUntil:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2020
          nullable: true
      type: object
    Model_VoucherPosResponse:
      title: VoucherPos model
      description: Voucher position model
      required:
        - accountDatev
        - accountingType
        - voucher
        - taxRate
        - sumGross
        - sumNet
        - net
      properties:
        id:
          description: The voucher position id
          type: string
          example: '0'
          readOnly: true
          nullable: false
        objectName:
          description: The voucher position object name
          type: string
          readOnly: true
          nullable: false
        create:
          description: Date of voucher position creation
          type: string
          readOnly: true
          example: 01.01.2020
        update:
          description: Date of last voucher position update
          type: string
          readOnly: true
          example: 01.01.2020
        sevClient:
          description: >-
            Client to which voucher position belongs. Will be filled
            automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
          readOnly: true
        voucher:
          description: The voucher to which the position belongs.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the voucher
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'Voucher'
              type: string
              example: Voucher
          type: object
          readOnly: true
        accountDatev:
          description: "<b>Use this in sevdesk-Update 2.0 (replaces accountingType).</b>\r\n     The account datev to which the position belongs.<br>\r\n     An account datev is the booking account to which the position belongs.<br>\r\n     For more information, please refer to\r\n <a href='#tag/Voucher/Account-Datev'>this</a> section."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the account datev
              type: integer
            objectName:
              description: Model name, which is 'AccountDatev'
              type: string
              example: AccountDatev
          type: object
        accountingType:
          description: "The accounting type to which the position belongs.<br>\r\n     An accounting type is the booking account to which the position belongs.<br>\r\n     For more information, please refer to\r\n <a href='#tag/Voucher/Accounting-type'>this</a> section."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the accounting type
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'AccountingType'
              type: string
              example: AccountingType
          type: object
        estimatedAccountingType:
          description: "The accounting type to which the position belongs estimated by our voucher recognition.<br>\r\n    An accounting type is the booking account to which the position belongs.<br>\r\n    For more information, please refer to\r\n    <a href='#tag/Voucher/Accounting-type'>this</a> section."
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the accounting type
              type: string
              example: '0'
            objectName:
              description: Model name, which is 'AccountingType'
              type: string
              example: AccountingType
          type: object
          readOnly: true
        taxRate:
          description: Tax rate of the voucher position.
          type: string
          example: '19'
        net:
          description: "Determines whether 'sumNet' or 'sumGross' is regarded.<br>\r\n     If both are not given, 'sum' is regarded and treated as net or gross depending on 'net'.\n All positions must be either net or gross, a mixture of the two is not possible."
          type: boolean
          example: 'true'
        isAsset:
          description: >-
            Determines whether position is regarded as an asset which can be
            depreciated.
          type: boolean
          example: 'false'
        sumNet:
          description: "Net sum of the voucher position.<br>\r\n    Only regarded if 'net' is 'true', otherwise its readOnly."
          type: string
          example: '100'
        sumTax:
          description: Tax sum of the voucher position.
          type: string
          readOnly: true
          example: '19'
        sumGross:
          description: "Gross sum of the voucher position.<br>\r\n    Only regarded if 'net' is 'false', otherwise its readOnly."
          type: string
          example: '119'
        sumNetAccounting:
          description: Net accounting sum. Is equal to sumNet.
          type: string
          example: '0'
          readOnly: true
        sumTaxAccounting:
          description: Tax accounting sum. Is equal to sumTax.
          type: string
          example: '0'
          readOnly: true
        sumGrossAccounting:
          description: Gross accounting sum. Is equal to sumGross.
          type: string
          example: '0'
          readOnly: true
        comment:
          description: Comment for the voucher position.
          type: string
          nullable: true
      type: object
    saveVoucherResponse:
      type: object
      properties:
        voucher:
          $ref: '#/components/schemas/Model_VoucherResponse'
        voucherPos:
          type: array
          items:
            $ref: '#/components/schemas/Model_VoucherPosResponse'
        filename:
          description: Filename of a previously upload file which should be attached.
          type: string
          format: binary
    Model_VoucherUpdate:
      title: Voucher model
      description: Voucher model
      properties:
        voucherDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2022
          nullable: true
        supplier:
          description: >-
            The contact used in the voucher as a supplier.<br>

            If you don't have a contact as a supplier, you can set this object
            to null.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the contact
              type: integer
            objectName:
              description: Model name, which is 'Contact'
              type: string
              default: Contact
          type: object
          nullable: true
        supplierName:
          description: "The supplier name.<br>\r\n     The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier."
          type: string
          example: John Snow
          nullable: true
        description:
          description: The description of the voucher. Essentially the voucher number.
          type: string
          example: Voucher-1000
          nullable: true
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          type: string
          format: date-time
          nullable: true
          example: 01.01.2022
        status:
          description: >-
            <b>Not supported in sevdesk-Update 2.0.</b><br><br>    Please have a
            look in <a href='#tag/Voucher/Types-and-status-of-vouchers'>status
            of vouchers</a>    to see what the different status codes mean
          type: number
          enum:
            - 50
            - 100
            - 1000
          example: 50
        paidAmount:
          description: Amount which has already been paid for this voucher by the customer
          type: number
          format: float
          readOnly: true
          nullable: true
        taxRule:
          description: '**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**'
          required:
            - id
            - objectName
          properties:
            id:
              description: |-
                **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**

                Defines the vat-regulation.
                For "Regelbesteuerung" it can be one of:
                  - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
                  - `2` - Ausfuhren (tax rates: 0.0)
                  - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
                  - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
                  - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)

                For small business owner ("Kleinunternehmer") it can be:
                  - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
              type: string
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
                - '11'
            objectName:
              description: Name of the object. Must always be TaxRule`
              type: string
              enum:
                - TaxRule
          type: object
          nullable: false
        taxType:
          description: >-
            **Use this in sevdesk-Update 1.0 (instead of taxRule).**


            Tax type of the voucher.

            There are four tax types:

            1. default - Umsatzsteuer ausweisen

            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische
            Union)

            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb
            EU, z. B. Schweiz)

            4. custom - Using custom tax set

            5. ss - Not subject to VAT according to §19 1 UStG

            Tax rates are heavily connected to the tax type used.
          type: string
          example: default
        creditDebit:
          description: Defines if your voucher is a credit (C) or debit (D)
          type: string
          enum:
            - C
            - D
          example: C
        voucherType:
          description: "Type of the voucher. For more information on the different types, check\r\n <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>\r\n"
          type: string
          enum:
            - VOU
            - RV
          example: VOU
        currency:
          description: >-
            specifies which currency the voucher should have. Attention: If the
            currency differs from the default currency stored in the account,
            then either the "propertyForeignCurrencyDeadline" or
            "propertyExchangeRate" parameter must be specified. If both
            parameters are specified, then the "propertyForeignCurrencyDeadline"
            parameter is preferred
          type: string
          example: EUR
          nullable: true
        propertyForeignCurrencyDeadline:
          description: >-
            Defines the exchange rate day and and then the exchange rate is set
            from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2022
          nullable: true
        propertyExchangeRate:
          description: Defines the exchange rate
          type: number
          format: float
          example: 0.8912
          nullable: true
        taxSet:
          description: >-
            **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**


            Tax set of the voucher. Needs to be added if you chose the
            taxType=custom.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the object
              type: integer
            objectName:
              description: Model name, which is 'TaxSet'
              type: string
              example: TaxSet
          type: object
          example: null
          nullable: true
        paymentDeadline:
          description: Payment deadline of the voucher.
          type: string
          format: date-time
          nullable: true
          example: 01.01.2022
        deliveryDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 01.01.2022
        deliveryDateUntil:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          type: string
          format: date-time
          example: 22.02.2022
          nullable: true
        document:
          description: The document of the voucher.
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the document
              type: integer
            objectName:
              description: Model name, which is 'Document'
              type: string
              example: Document
          example: null
          type: object
          nullable: true
        costCentre:
          description: Cost centre for the voucher
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the cost centre
              type: integer
            objectName:
              description: Model name, which is 'CostCentre'
              type: string
              example: CostCentre
          example: null
          type: object
    ReceiptGuideDto:
      title: ReceiptGuide Data Transfer Object
      description: >-
        Model holds data about a single selectable account with additional
        information matching to that account.
      properties:
        accountDatevId:
          description: The ID of the matching account datev
          type: integer
          nullable: false
        accountNumber:
          description: >-
            The account number of the account datev (dependent on the active
            accounting system of the client)
          type: string
          example: '4000'
          nullable: false
        accountName:
          description: The name of the account
          type: string
          example: Umsatzerlöse
          nullable: false
        description:
          description: The description of the account and/or what the account is used for
          type: string
          example: Einnahmen aus dem Verkauf von Waren und Dienstleistungen
        allowedTaxRules:
          description: An array that holds all possible tax rules for this account
          type: array
          items:
            properties:
              name:
                description: The name of the tax rule
                type: string
                nullable: false
                example: USTPFL_UMS_EINN
              description:
                description: A readable description of the tax rule
                type: string
                nullable: false
                example: Umsatzsteuerpflichtige Umsätze
              id:
                description: The id of the tax rule to use in different scenarios
                type: integer
                example: 1
              taxRates:
                description: An array of tax rates which are combinable with this tax rule
                type: array
                items:
                  type: string
                example:
                  - ZERO
                  - SEVEN
                  - NINETEEN
          nullable: false
        allowedReceiptTypes:
          description: An array that holds the viable receipt types for this account
          type: array
          items:
            type: string
          example:
            - EXPENSE
          nullable: false
    Model_TagResponse:
      title: Tag model
      description: tag model
      properties:
        id:
          description: Id of the tag
          type: string
          example: '1'
          readOnly: true
        objectName:
          description: Internal object name which is 'Tag'.
          type: string
          example: Tag
          readOnly: true
        additionalInformation:
          type: string
          default: null
        create:
          description: Date of tag creation
          type: string
          format: date-time
          readOnly: true
        name:
          description: name of the tag
          type: string
          readOnly: true
        sevClient:
          description: Client to which invoice belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
    Model_TagCreateResponse:
      title: Tag model
      description: tag model
      properties:
        id:
          description: Id of the tag
          type: string
          example: '1'
          readOnly: true
        objectName:
          description: Internal object name which is 'TagRelation'.
          type: string
          example: TagRelation
          readOnly: true
        additionalInformation:
          type: string
          default: null
        create:
          description: Date of tag creation
          type: string
          format: date-time
          readOnly: true
        tag:
          description: The tag information
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the tag
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'Tag'
              type: string
              example: Tag
          type: object
        object:
          required:
            - id
            - objectName
          properties:
            id:
              description: Id of the invoice/order/voucher/creditNote
              type: integer
              example: 1
            objectName:
              description: Model name
              type: string
              example: Invoice
              enum:
                - Invoice
                - Voucher
                - Order
                - CreditNote
          type: object
        sevClient:
          description: Client to which invoice belongs. Will be filled automatically
          required:
            - id
            - objectName
          properties:
            id:
              description: Unique identifier of the client
              type: string
              example: '1'
            objectName:
              description: Model name, which is 'SevClient'
              type: string
              example: SevClient
          type: object
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
x-tagGroups:
  - name: sevdesk API
    tags:
      - Basics
      - CheckAccount
      - CheckAccountTransaction
      - AccountingContact
      - CommunicationWay
      - ContactAddress
      - Contact
      - ContactField
      - CreditNote
      - CreditNotePos
      - Export
      - Part
      - Invoice
      - InvoicePos
      - Layout
      - Order
      - OrderPos
      - Voucher
      - VoucherPos
      - Report
      - Tag
